<?xml version="1.0"?>
<doc>
    <assembly>
        <name>iFactr.UI</name>
    </assembly>
    <members>
        <member name="T:iFactr.Core.Controls.ActionType">
            <summary>
            The available types of actions to perform.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.ActionType.Undefined">
            <summary>
            An undefined or default action.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.ActionType.Add">
            <summary>
            The action performs an addition or creation operation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.ActionType.Cancel">
            <summary>
            The action performs a cancellation operation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.ActionType.Edit">
            <summary>
            The action performs an edit operation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.ActionType.Delete">
            <summary>
            The action performs a deletion operation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.ActionType.More">
            <summary>
            The action performs an operation for displaying additional information.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.ActionType.Submit">
            <summary>
            The action performs a form submission operation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.ActionType.None">
            <summary>
            No action is performed.
            </summary>
        </member>
        <member name="T:iFactr.Core.Controls.Break">
            <summary>
            A <see cref="T:iFactr.Core.Controls.IBlockPanelItem"/> for rendering line breaks and horizontal rules.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.Break.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.Break"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.Break.#ctor(iFactr.Core.Styles.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.Break"/> class.
            </summary>
            <param name="style">The <see cref="T:iFactr.Core.Styles.Style" /> instance to style this object with.</param>
        </member>
        <member name="P:iFactr.Core.Controls.Break.IsHorizontalRule">
            <summary>
            Gets or sets a value indicating whether to render a horizontal rule.
            </summary>
            <value>
            <c>true</c> to render a horizontal rule; otherwise, <c>false</c> to render a normal line break.
            </value>
        </member>
        <member name="M:iFactr.Core.Controls.Break.GetHtml">
            <summary>
            Returns an HTML representation of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> representing this instance in HTML.
            </returns>
        </member>
        <member name="M:iFactr.Core.Controls.Break.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Controls.Button">
            <summary>
            Represents a control that performs a navigation when pressed.
            </summary>
            <remarks>
            The Button Control is a navigation control rendered as a button on the target
            platform.  Generally all buttons are rendered in the layer header, but may be
            added to other parts of a layer depending upon the desired behavior.  All
            buttons are in essence navigation links that load a layer from the Navigation
            Map in the same manner as a list or menu item does.  
            <para></para>
            <para><b>Position Property</b></para>
            <para>The iFactr Framework automatically determines the position of buttons on a
            layer based upon the button type and usage.  The Position property give the
            developer the opportunity to override this behavior and force a specific
            position.  The default value for Position is NotSpecified.</para>
            <para></para>
            <para><b>ActionType Property</b></para>
            <para>The ActionType property provides the framework with additional information
            regarding the intended action of the button, the default value is
            Undefined.</para>
            </remarks>
        </member>
        <member name="T:iFactr.Core.Controls.Button.Position">
            <summary>
            The available button control positions within a layer.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.Button.Position.NotSpecified">
            <summary>
            Positions the button in the top-left corner of the layer.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.Button.Position.TopLeft">
            <summary>
            Positions the button in the top-left corner of the layer.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.Button.Position.TopRight">
            <summary>
            Positions the button in the top-right corner of the layer.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.Button.Position.InLine">
            <summary>
            Positions the button in-line at the relative position defined in the layer code.
            </summary>
        </member>
        <member name="T:iFactr.Core.Controls.Button.ActionType">
            <summary>
            The available button actions.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.Button.ActionType.Undefined">
            <summary>
            Specifies the button action is undefined.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.Button.ActionType.Add">
            <summary>
            Specifies the button is used for add or create operations.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.Button.ActionType.Cancel">
            <summary>
            Specifies the button is used to cancel an operation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.Button.ActionType.Edit">
            <summary>
            Specifies the button is used for an edit operation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.Button.ActionType.Delete">
            <summary>
            Specifies the button is used for a delete operation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.Button.ActionType.More">
            <summary>
            Specifies the button is used to display additional information within the layer context.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.Button.ActionType.Submit">
            <summary>
            Specifies the button is used to submit a form.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.Button.ActionType.None">
            <summary>
            Specifies that no button should be displayed.
            </summary>
        </member>
        <member name="P:iFactr.Core.Controls.Button.Action">
            <summary>
            Gets or sets the action type for this instance.
            </summary>
            <value>The action type as an <see cref="T:iFactr.Core.Controls.Button.ActionType"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Controls.Button.ButtonPosition">
            <summary>
            Gets or sets the position of this instance within the layer.
            </summary>
            <value>The button position as a <see cref="T:iFactr.Core.Controls.Button.Position"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Controls.Button.ID">
            <summary>
            Gets or sets the ID for this instance.
            </summary>
            <value>The ID as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Controls.Button.Text">
            <summary>
            Gets or sets the text to be displayed for this instance.
            </summary>
            <value>The text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Controls.Button.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.Button"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.Button.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.Button"/> class.
            </summary>
            <param name="text">The text displayed on the button.</param>
        </member>
        <member name="M:iFactr.Core.Controls.Button.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.Button"/> class using the URL address provided.
            </summary>
            <param name="text">The text displayed on the button.</param>
            <param name="address">A <see cref="T:System.String"/> representing the URL address value.</param>
        </member>
        <member name="M:iFactr.Core.Controls.Button.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.Button"/> class using the URL address provided.
            </summary>
            <param name="text">The text displayed on the button.</param>
            <param name="address">A <see cref="T:System.String"/> representing the URL address value.</param>
            <param name="parameters">An optional set of parameters to pass through.</param>
        </member>
        <member name="M:iFactr.Core.Controls.Button.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.Button"/> class using the URL address and async setting provided.
            </summary>
            <param name="text">The text displayed on the button.</param>
            <param name="address">A <see cref="T:System.String"/> representing the URL address value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="M:iFactr.Core.Controls.Button.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.Button.CloneOverride">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Controls.CancelButton">
            <summary>
            Represents a button control with an action type of cancel.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.CancelButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.CancelButton"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.CancelButton.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.CancelButton"/> class.
            </summary>
            <param name="text">The text to display.</param>
        </member>
        <member name="P:iFactr.Core.Controls.CancelButton.Action">
            <summary>
            Gets the action type for this instance.
            </summary>
            <value>The action type as an <see cref="T:iFactr.Core.Controls.ActionType"/> value.</value>
            <remarks>Because this is a CancelButton, this will always return ActionType.Cancel.</remarks>
        </member>
        <member name="T:iFactr.Core.Controls.PanelItem">
            <summary>
            An item that can be added to an <see cref="T:iFactr.Core.Layers.IHtmlText"/> element.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.PanelItem.GetHtml">
            <summary>
            Returns an HTML representation of this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> representing this instance in HTML.</returns>
        </member>
        <member name="M:iFactr.Core.Controls.PanelItem.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:iFactr.Core.Controls.PanelItem.CloneOverride">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="T:iFactr.Core.Controls.HeaderLabel">
            <summary>
            Represents a Header Label control.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.HeaderLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.HeaderLabel"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.HeaderLabel.#ctor(iFactr.Core.Styles.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.HeaderLabel"/> class.
            </summary>
            <param name="style">The <see cref="T:iFactr.Core.Styles.Style" /> instance to style this object with.</param>
        </member>
        <member name="T:iFactr.Core.Controls.IBlockPanelItem">
            <summary>
            Defines an object that can be inserted into <see cref="T:iFactr.Core.Layers.iBlock"/>s and <see cref="T:iFactr.Core.Layers.iPanel"/>s.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.IBlockPanelItem.GetHtml">
            <summary>
            Returns an HTML representation of this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> representing this instance in HTML.</returns>
        </member>
        <member name="T:iFactr.Core.Controls.Icon">
            <summary>
            Represents a control for displaying images.
            </summary>
        </member>
        <member name="P:iFactr.Core.Controls.Icon.Align">
            <summary>
            Gets or sets the alignment of the icon.
            </summary>
            <value>The alignment as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Controls.Icon.Height">
            <summary>
            Gets or sets the display height of the icon.
            </summary>
            <value>The height as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Controls.Icon.Location">
            <summary>
            Gets or sets the URI location of the icon image.
            </summary>
            <value>The location as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Controls.Icon.Name">
            <summary>
            Gets or sets the name of the control.
            </summary>
            <value>The name as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Controls.Icon.Width">
            <summary>
            Gets or sets the display width of the icon.
            </summary>
            <value>The width as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Controls.Icon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.Icon"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.Icon.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.Icon"/> class.
            </summary>
            <param name="location">The URI location of the image to display.</param>
        </member>
        <member name="M:iFactr.Core.Controls.Icon.GetHtml">
            <summary>
            Returns an HTML representation of this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> representing this instance in HTML.</returns>
        </member>
        <member name="M:iFactr.Core.Controls.Icon.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Controls.Label">
            <summary>
            Represents a text label within an <see cref="T:iFactr.Core.Layers.iBlock"/> or <see cref="T:iFactr.Core.Layers.iPanel"/> control.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.Label.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.Label"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.Label.#ctor(iFactr.Core.Styles.LabelStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.Label"/> class.
            </summary>
            <param name="style">The <see cref="P:iFactr.Core.Controls.Label.Style"/> instance to style this object with.</param>
        </member>
        <member name="M:iFactr.Core.Controls.Label.#ctor(iFactr.Core.Styles.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.Label"/> class.
            </summary>
            <param name="style">The <see cref="P:iFactr.Core.Controls.Label.Style"/> instance with a label style.</param>
        </member>
        <member name="P:iFactr.Core.Controls.Label.Name">
            <summary>
            Gets or sets the name of this instance.
            </summary>
            <value>The name of this instance as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Controls.Label.Style">
            <summary>
            Gets or sets the label style of this instance.
            </summary>
            <value>The label style as a <see cref="T:iFactr.Core.Styles.LabelStyle"/>.</value>
        </member>
        <member name="P:iFactr.Core.Controls.Label.Text">
            <summary>
            Gets or sets the text to display.
            </summary>
            <value>The text to display as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Controls.Label.GetHtml">
            <summary>
            Returns an HTML representation of this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> representing this instance in HTML.</returns>
        </member>
        <member name="M:iFactr.Core.Controls.Label.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.Label.CloneOverride">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Controls.Link">
            <summary>
            Represents a control that points to a URL address and can be navigated to.
            </summary>
        </member>
        <member name="T:iFactr.Core.Controls.Link.Rev">
            <summary>
            The possible rev values of a link.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.Link.Rev.Async">
            <summary>
            The link delivers asynchronous content.
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.Link.Rev.Media">
            <summary>
            The link delivers media content, (audio or video).
            </summary>
        </member>
        <member name="F:iFactr.Core.Controls.Link.Rev.None">
            <summary>
            No rev value specified.
            </summary>
        </member>
        <member name="P:iFactr.Core.Controls.Link.Action">
            <summary>
            Gets or sets the action type of this instance.
            </summary>
        </member>
        <member name="P:iFactr.Core.Controls.Link.Address">
            <summary>
            Gets or sets the URL address that will be navigated to.
            </summary>
            <value>The URL address as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Controls.Link.ConfirmationText">
            <summary>
            Gets or sets the text to be displayed in a confirmation dialog before navigating.
            </summary>
            <value>The text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Controls.Link.Image">
            <summary>
            Gets or sets the image to be displayed in conjunction with the link.
            </summary>
            <value>The image as an <see cref="T:iFactr.Core.Controls.Icon"/>.</value>
        </member>
        <member name="P:iFactr.Core.Controls.Link.LoadIndicatorDelay">
            <summary>
            Gets or sets the amount of time, in milliseconds, before the load indicator is displayed when navigating.
            Any value below 0 means the load indicator will not display.
            </summary>
        </member>
        <member name="P:iFactr.Core.Controls.Link.LoadIndicatorTitle">
            <summary>
            Gets or sets the title to display for the load indicator when navigating.
            </summary>
        </member>
        <member name="P:iFactr.Core.Controls.Link.NewWindow">
            <summary>
            Gets or sets whether this instance should open a new browser window when targeting the Web/Webkit bindings.
            </summary>
            <value><c>true</c> to launch the end link outside of the framework; otherwise <c>false</c>.</value>
        </member>
        <member name="P:iFactr.Core.Controls.Link.Parameters">
            <summary>
            Gets or sets an optional collection of parameters to pass through when navigating.
            </summary>
        </member>
        <member name="P:iFactr.Core.Controls.Link.RevSetting">
            <summary>
            Gets or sets the rev setting for this instance.
            </summary>
            <value>The rev setting as a <see cref="T:iFactr.Core.Controls.Link.Rev"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Controls.Link.RequestType">
            <summary>
            Gets or sets the request type for this instance.
            </summary>
        </member>
        <member name="P:iFactr.Core.Controls.Link.Text">
            <summary>
            Gets or sets the text to be displayed for this instance.
            </summary>
            <value>The text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Controls.Link.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.Link"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.Link.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.Link"/> class with the specified URL address.
            </summary>
            <param name="address">The URL address to navigate to.</param>
        </member>
        <member name="M:iFactr.Core.Controls.Link.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.Link"/> class with the specified URL address and parameters.
            </summary>
            <param name="address">The URL address to navigate to.</param>
            <param name="parameters">The parameters to pass through when navigating.</param>
        </member>
        <member name="M:iFactr.Core.Controls.Link.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.Link"/> class with the specified URL address.
            </summary>
            <param name="address">The URL address to navigate to.</param>
            <param name="newWindow"><c>true</c> to open the link in a new window; otherwise <c>false</c>.</param>
        </member>
        <member name="M:iFactr.Core.Controls.Link.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.Link.CloneOverride">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.Link.GetHtml">
            <summary>
            Returns an HTML representation of this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> representing this instance in HTML.</returns>
        </member>
        <member name="T:iFactr.Core.Controls.SubmitButton">
            <summary>
            Represents a button control with an action type of submit.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.SubmitButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.SubmitButton"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Controls.SubmitButton.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.SubmitButton"/> class.
            </summary>
            <param name="address">A <see cref="T:System.String"/> representing the URL address value.</param>
        </member>
        <member name="M:iFactr.Core.Controls.SubmitButton.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.SubmitButton"/> class using the URL address provided.
            </summary>
            <param name="text">The text displayed on the button.</param>
            <param name="address">A <see cref="T:System.String"/> representing the URL address value.</param>
        </member>
        <member name="M:iFactr.Core.Controls.SubmitButton.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.SubmitButton"/> class using the URL address provided.
            </summary>
            <param name="text">The text displayed on the button.</param>
            <param name="address">A <see cref="T:System.String"/> representing the URL address value.</param>
            <param name="parameters">An optional set of parameters to pass through.</param>
        </member>
        <member name="M:iFactr.Core.Controls.SubmitButton.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Controls.SubmitButton"/> class using the URL address and async setting provided.
            </summary>
            <param name="text">The text displayed on the button.</param>
            <param name="address">A <see cref="T:System.String"/> representing the URL address value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="P:iFactr.Core.Controls.SubmitButton.Action">
            <summary>
            Gets the action type for this instance.
            </summary>
            <value>The action type as an <see cref="T:iFactr.Core.Controls.ActionType"/> value.</value>
            <remarks>Because this is a SubmitButton, this will always return ActionType.Submit.</remarks>
        </member>
        <member name="P:iFactr.Core.Controls.SubmitButton.ButtonPosition">
            <summary>
            Gets the position of this instance within the layer.
            </summary>
            <value>The button position as a <see cref="T:iFactr.Core.Controls.Button.Position"/> value.</value>
        </member>
        <member name="T:iFactr.Core.FormFactor">
            <summary>
            The available application layouts for large form-factor devices.
            </summary>
        </member>
        <member name="F:iFactr.Core.FormFactor.SplitView">
            <summary>
            The screen is split between the master pane and a detail pane.
            </summary>
        </member>
        <member name="F:iFactr.Core.FormFactor.Fullscreen">
            <summary>
            No detail pane.  Layers assigned to the detail pane will appear in the master pane instead.
            </summary>
        </member>
        <member name="F:iFactr.Core.FormFactor.Accordion">
            <summary>
            A layout consisting of sliding panels that are stacked on top of each other.
            </summary>
        </member>
        <member name="T:iFactr.Core.IApp">
            <summary>
            Defines a cross-platform iFactr application.
            </summary>
        </member>
        <member name="P:iFactr.Core.IApp.NavigationMap">
            <summary>
            Gets the navigation map that associates the application's layers and controllers to their respective URIs.
            </summary>
        </member>
        <member name="P:iFactr.Core.IApp.Title">
            <summary>
            Gets or sets the application's title.
            </summary>
        </member>
        <member name="P:iFactr.Core.IApp.NavigateOnLoad">
            <summary>
            Gets or sets the URI to navigate to once the application has loaded.
            </summary>
        </member>
        <member name="P:iFactr.Core.IApp.HasNavigationTabs">
            <summary>
            Gets whether the application has a <see cref="T:iFactr.Core.Layers.NavigationTabs"/> layer.
            </summary>
        </member>
        <member name="P:iFactr.Core.IApp.Style">
            <summary>
            Gets or sets the application's style.  If no layer style is set, this style is used.
            </summary>
        </member>
        <member name="P:iFactr.Core.IApp.FormFactor">
            <summary>
            Gets the application's form factor as a <see cref="P:iFactr.Core.IApp.FormFactor"/> value.
            </summary>
        </member>
        <member name="P:iFactr.Core.IApp.Platform">
            <summary>
            Gets the platform that the application is running on.
            </summary>
        </member>
        <member name="P:iFactr.Core.IApp.Target">
            <summary>
            Gets the target that the application is running on.
            </summary>
        </member>
        <member name="T:iFactr.Core.iApp">
            <summary>
            Represents a cross-platform iFactr application.  This class is abstract.
            </summary>
            <remarks>
            <b>iApp </b>is the base container for your business logic when using the iFactr
            framework. Within your own implementation of <b>iApp</b> you will define a
            navigation map that establishes the heirarchy of <b>iLayer</b> objects. These
            layers will be consumed by the target bindings for your mobile platform, and
            translated to an optimized user-experience on your target, or targets of choice.
            <para> </para>
            <para>When implementing your own<b> iApp</b> you will override the <c>OnAppLoad()</c>method to perform the following tasks: </para>
            <para> </para>
            <para><b>Setting the application Title</b></para>
            <para> </para>
            <para>You can give you application a title by simply setting the Title property
            on your <b>iApp</b> instance:</para>
            <para></para>
            <code lang="C#">// Set the application title
            Title = &quot;Best Sellers&quot;;</code>
            <para> </para>
            <para><b>Establishing a Navigation Map</b></para>
            <para> </para>
            <para>The Navigation Map defines your application structure by associating a specific URI template with a specific layer instance. Establish a navigation map by adding these associations in your <c>OnAppLoad()</c> override:</para>
            <code lang="C#">
            
            // Add navigation mappings
            NavigationMap.Add(&quot;&quot;, new CategoryList());
            NavigationMap.Add(&quot;{Category}&quot;, new BookList());
            NavigationMap.Add(&quot;{Category}/{Book}&quot;, new BookDetails());
            </code>
            <para></para>
            <para><b>Advanced Endpoint Definitions</b> </para>
            <para>You can parameterize any data and/or metadata needed for your layer
            processing, as long as you follow a consistent URI template scheme. But there
            are a few rules that need to be followed to ensure proper processing by the
            framework navigation processing.</para>
            <para> </para>
            <para>Let's say you want to use a single layer to process both edit and delete
            operations for an order. Following the design paradigm in our previous examples,
            you might place two separate endpoints in your navigation map:</para>
            <para> </para>
            <para><code lang="C#"> NavigationMap.Add(&quot;Orders/Edit/{Id}&quot;,
            orderDetails);    </code></para>
            <para><code lang="C#"> NavigationMap.Add(&quot;Orders/Delete/{Id}&quot;, orderDetails);<c></c></code>  </para>
            <para> </para>
            <para>This will establish two endpoints to your OrderDetails layer, one for
            edit, and one for delete, but the resulting parameters passed will be the same,
            (i.e. a single Order ID parameter). In order to provide the necessary metadata,
            in this case the layer action, you can parameterize your URI to include the
            necessary value. Simply replace the two URI's above with the following: </para>
            <para><c>      </c></para>
            <para><code lang="C#">NavigationMap.Add(&quot;Orders/{Action}/{Id}&quot;,
            orderDetails; </code></para>
            <para> </para>
            <para>Now when you make a request to <c>&quot;Orders/Edit/1234&quot;</c> your Layer will load with two parameters in the dictionary: <c>Action=Edit;Id=1234</c>. The action parameter, indicates the desired transaction, (in this case, edit), and the ID parameter represents the order you wish to edit. </para>
            <para> </para>
            <para>One additional rule to follow when establishing your navigation map
            ensures the navigation framework will produce the desired result. Let's take our
            example to the next logical step to illustrate this point. Now I'd like to
            provide an endpoint for adding an order based on an existing customer, so I
            might assume I can add the following to support that function: </para>
            <para> </para>
            <para><code lang="C#">NavigationMap.Add(&quot;Orders/{Action}/{Customer}&quot;, orderDetails;<c></c></code>  </para>
            <para> </para>
            <para>Now when I receive an Action of &quot;Add&quot;, and a parameter called Customer on
            my Layer parameter dictionary, I can process the transaction as a new order. But
            there is a problem; in this instance you'll never receive a Customer parameter
            on your Layer parameters. Here's why. Your navigation map entries now look like
            this: </para>
            <para><c></c></para>
            <para><code lang="C#">NavigationMap.Add(&quot;Orders/{Action}/{Id}&quot;,
            orderDetails;</code></para>
            <para><code lang="C#">NavigationMap.Add(&quot;Orders/{Action}/{Customer}&quot;, orderDetails;<c></c></code>   </para>
            <para> </para>
            <para>When the iFactr navigation framework processes your request, it does a
            Regex match between the URI requested and the URI key in the navigation map.
            Because we use some segments of the navigation map URI for parameters, they must
            all be treated equally. Because the possible parameter substitutions are
            infinitely variable, we cannot include them as part of our Regex, because they
            will never produce a match. </para>
            <para> </para>
            <para>So the navigation framework treats each squiggly bracket variable as a generic placeholder. And the precedence of the layers in the navigation map are set by the order in which they are added to the map, so when the navigation map is processed for a match on the URI <c>&quot;Orders/Add/9876&quot;</c>, it will match the entry for <c>&quot;Orders/{Action}/{Id}&quot;</c>, and return the layer with the associated parameters. The second entry, (<c>URI=&quot;Orders/{Action}/{Customer}&quot;</c>), will never be found, and the Customer parameter will never be generated.</para>
            <para> </para>
            <para>We can try to remedy this situation by ensuring our navigation map URI
            patterns are unique. So we can replace one of the parameters with the hard-coded
            action we are performing: </para>
            <para> </para>
            <para><code lang="C#">NavigationMap.Add(&quot;Orders/{Action}/{Id}&quot;,
            orderDetails;</code></para>
            <para><code lang="C#">NavigationMap.Add(&quot;Orders/Add/{Customer}&quot;, orderDetails; <c></c></code>  </para>
            <para> </para>
            <para>But there is still a problem; remember the precedence of the pattern
            matches? Placing the hard-coded item in the second position in this case does
            not help, because the Regex will still find and match the first entry. Remember,
            all parameters are treated as generic placeholders, and will match on any value
            passed to the map. We need to make sure any hard-coded values appear before any
            parameterized URI's in the same navigation tree. So the final fix is to move it
            up in the order:</para>
            <para> </para>
            <para><code lang="C#">NavigationMap.Add(&quot;Orders/Add/{Customer}&quot;,
            orderDetails;</code></para>
            <para><code lang="C#">NavigationMap.Add(&quot;Orders/{Action}/{Id}&quot;, orderDetails;<c></c></code>   </para>
            <para> </para>
            <para>Now the URI<c> &quot;Orders/Add/9876&quot; </c>will return the correct layer with the correct Customer parameter.</para>
            <para> </para>
            <para><b>Setting the Default Navigation URI</b></para>
            <para> </para>
            <para>The default navigation URI represents the starting layer for your application. Use the URI value from your Navigation Map that represents the starting point for your app, and set the <c>NavigateOnLoad</c> property:<code lang="C#"></code></para>
            <code lang="C#">
            // Set default navigation URI
            NavigateOnLoad = &quot;&quot;;</code>
            <para> </para>
            <para><b>Setting the Application Style</b></para>
            <para> </para>
            <para>Finally, you can apply application-level styles using the <c>Style</c> class. For example, to set the header color to black, set the <c>HeaderColor</c> property on your <b>iApp</b> instance's <c>Style</c> to a new <b>Color</b> object containing appropriate information:</para>
            <code lang="C#">
            // Set the application style
            Style.HeaderColor = new Style.Color(0,0,0);</code>
            <para> </para>
            </remarks>
            <example>
            <code lang="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            
            using iFactr.Core;
            using iFactr.Core.Styles;
            
            namespace BestSellers
            {
                public class App : iApp
            
                    public override void OnAppLoad()
                    {
                        // Set the application title
                        Title = &quot;Best Sellers&quot;;
            
                        // Add navigation mappings
                        NavigationMap.Add(&quot;&quot;, new CategoryList());
                        NavigationMap.Add(&quot;{Category}&quot;, new BookList());
                        NavigationMap.Add(&quot;{Category}/{Book}&quot;, new BookDetails());
            
                        // Set default navigation URI
                        NavigateOnLoad = &quot;&quot;;
            
                        // Set the application style
                        Style.HeaderColor = new Style.Color(0,0,0);
                    }
                }
            }</code>
            </example>
        </member>
        <member name="E:iFactr.Core.iApp.OnLayerLoadComplete">
            <summary>
            Occurs when the layer load has been completed and is ready to be displayed. This event is to be consumed by the Target Factory instance.
            </summary>
        </member>
        <member name="E:iFactr.Core.iApp.OrientationChanged">
            <summary>
            Occurs when the orientation of the application is changed.
            </summary>
        </member>
        <member name="M:iFactr.Core.iApp.SetNotification(iFactr.Core.INotification)">
            <summary>
            Sends the specified notification to the device's notification system.
            </summary>
            <param name="notification">The notification to send.</param>
        </member>
        <member name="M:iFactr.Core.iApp.MatchUrl(System.String)">
            <summary>
            Matches the specified URL to an entry in the navigation map.
            </summary>
            <param name="url">The URL to match.</param>
        </member>
        <member name="P:iFactr.Core.iApp.CurrentNavContext">
            <summary>
            Gets or sets the current navigation context containing information about the last navigation.
            </summary>
            <value>The current navigation context.</value>
        </member>
        <member name="M:iFactr.Core.iApp.Navigate(System.String)">
            <summary>
             Initiates a navigation to the specified URL.
            </summary>
            <param name="url">A <see cref="T:System.String"/> representing the URL to navigate to.</param>
        </member>
        <member name="M:iFactr.Core.iApp.Navigate(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Initiates a navigation to the specified URL with the specified parameters.
            </summary>
            <param name="url">A <see cref="T:System.String"/> representing the URL to navigate to.</param>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing the parameters to pass through.</param>
        </member>
        <member name="M:iFactr.Core.iApp.Navigate(iFactr.UI.Link)">
            <summary>
            Initiates a navigation using the specified Link.
            </summary>
            <param name='link'>A <see cref="T:iFactr.UI.Link"/> containing the URL to navigate to with the parameters to pass through.</param>
        </member>
        <member name="M:iFactr.Core.iApp.Navigate(iFactr.UI.Link,MonoCross.Navigation.IMXView)">
            <summary>
            Initiates a navigation using the specified Link.
            </summary>
            <param name='link'>A <see cref="T:iFactr.UI.Link"/> containing the URL to navigate to with the parameters to pass through.</param>
            <param name="fromView">The <see cref="T:MonoCross.Navigation.IMXView"/> instance from which the navigation was initiated.</param>
        </member>
        <member name="M:iFactr.Core.iApp.SetNavigationContext(iFactr.Core.Layers.iLayer.NavigationContext)">
            <summary>
            Sets the application's navigation context using the specified layer navigation context.
            </summary>
            <param name="navContext">The layer navigation context to set the application's navigation context with.</param>
        </member>
        <member name="M:iFactr.Core.iApp.PostNetworkResponse(MonoCross.NetworkResponse)">
            <summary>
            Posts the specified network response.
            </summary>
            <param name="networkResponse">The network response to post.</param>
        </member>
        <member name="M:iFactr.Core.iApp.OnOrientationChanged(iFactr.Core.iApp.Orientation)">
            <summary>
            Called when the device changes orientation.
            </summary>
            <param name="orientation">The new device orientation.</param>
        </member>
        <member name="P:iFactr.Core.iApp.RequestInjectionHeaders">
            <summary>
            Gets or sets the request injection headers within the current session.
            </summary>
            <value>A <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> representing the request injection headers.</value>
        </member>
        <member name="P:iFactr.Core.iApp.Instance">
            <summary>
            Gets or sets the application instance.
            </summary>
            <value>The application instance.</value>
        </member>
        <member name="P:iFactr.Core.iApp.Factory">
            <summary>
            Gets the target-specific singleton factory instance.
            </summary>
            <value>The factory as a <see cref="T:iFactr.Core.Targets.TargetFactory"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.iApp.VanityImagePath">
            <summary>
            Gets or sets the file path to the image that should be used in the vanity panel for split view applications.
            </summary>
        </member>
        <member name="P:iFactr.Core.iApp.Config">
            <summary>
            Gets the application's configuration settings.
            </summary>
            <remarks>
            Provides durable storage of string values across multiple application instances and uses.
            This property is set by the Target Bindings at runtime.
            </remarks>
        </member>
        <member name="P:iFactr.Core.iApp.File">
            <summary>
            Gets the application's file system interface.
            </summary>
            <value>File system access for the application as an <see cref="T:MonoCross.Utilities.Storage.IFile"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.iApp.Compositor">
            <summary>
            Gets the application's image compositor.
            </summary>
            <value>The image compositor for the application as an <see cref="T:MonoCross.Utilities.ImageComposition.ICompositor"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.iApp.Log">
            <summary>
            Gets the application's logging utility.
            </summary>
            <value>The logger as an <see cref="T:MonoCross.Utilities.Logging.ILog"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.iApp.Thread">
            <summary>
            Gets the application's threading utility.
            </summary>
            <value>The threading utility as an <see cref="T:MonoCross.Utilities.Threading.IThread"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.iApp.Network">
            <summary>
            Gets the application's networking utility.
            </summary>
            <value>The networking utility as an <see cref="T:MonoCross.Utilities.Network.INetwork"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.iApp.Encryption">
            <summary>
            Gets the application's data encryptor.
            </summary>
            <value>The encryptor as an <see cref="T:MonoCross.Utilities.Encryption.IEncryption"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.iApp.Session">
            <summary>
            Gets the application's session settings.
            </summary>
            <remarks>
            Provides non-durable values for session-scoped storage of objects to be used during this instance of the application.
            This property is set by the Target Bindings at runtime.
            </remarks>
        </member>
        <member name="P:iFactr.Core.iApp.Settings">
            <summary>
            Gets the application's settings.
            </summary>
            <remarks>
            Provides durable storage of string values across multiple application instances and uses.
            This property is set by the Target Bindings at runtime.
            </remarks>
        </member>
        <member name="P:iFactr.Core.iApp.DeviceId">
            <summary>
            Gets a unique identifier for the device running the application.
            </summary>
        </member>
        <member name="P:iFactr.Core.iApp.Style">
            <summary>
            Gets or sets the application's style.  If no layer style is set, this style is used.
            </summary>
        </member>
        <member name="P:iFactr.Core.iApp.Platform">
            <summary>
            Gets the platform that the application is running on.
            </summary>
            <value>The platform as a <see cref="T:MonoCross.MobilePlatform"/> value.</value>
        </member>
        <member name="P:iFactr.Core.iApp.Target">
            <summary>
            Gets the target that the application is running on.
            </summary>
            <value>
            The target as a <see cref="T:iFactr.Core.MobileTarget" /> value.
            </value>
        </member>
        <member name="P:iFactr.Core.iApp.FormFactor">
            <summary>
            Gets the application's form factor as a <see cref="P:iFactr.Core.iApp.FormFactor"/> value.
            </summary>
        </member>
        <member name="P:iFactr.Core.iApp.HasNavigationTabs">
            <summary>
            Gets whether the application has a <see cref="T:iFactr.Core.Layers.NavigationTabs"/> layer.
            </summary>
            <value><c>true</c> if this instance has navigation tabs; otherwise <c>false</c>.</value>
        </member>
        <member name="M:iFactr.Core.iApp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.iApp"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.iApp.OnLayerLoading(iFactr.Core.Layers.iLayer)">
            <summary>
            Called when an application layer begins loading.  This method is meant to be overridden in consuming applications 
            for notification when a layer is loaded as an alternative to using events.
            </summary>
            <param name="layer">An <see cref="T:iFactr.Core.Layers.iLayer"/> representing the layer being loaded.</param>
        </member>
        <member name="M:iFactr.Core.iApp.OnControllerLoadCanceled(MonoCross.Navigation.IMXView,MonoCross.Navigation.IMXController,System.String)">
            <summary>
            Called when a controller's view output has been canceled by setting <see cref="F:MonoCross.Navigation.MXContainer.CancelLoad"/> or by returning a <c>null</c> perspective.
            </summary>
            <param name="fromView">The view that initiated the navigation to the controller.</param>
            <param name="controller">The canceled controller.</param>
            <param name="navigatedUri">The uri used to navigate to the controller.</param>
        </member>
        <member name="T:iFactr.Core.iApp.AppNavigationContext">
            <summary>
            Represents an application's navigation context.
            </summary>
        </member>
        <member name="P:iFactr.Core.iApp.AppNavigationContext.ActiveTab">
            <summary>
            Gets or sets the tab that the last navigation was initiated from.
            </summary>
        </member>
        <member name="P:iFactr.Core.iApp.AppNavigationContext.ActivePane">
            <summary>
            Gets or sets the pane that the last navigation was initiated from.
            </summary>
        </member>
        <member name="P:iFactr.Core.iApp.AppNavigationContext.ActiveLayer">
            <summary>
            Gets or sets the layer that was last navigated to.
            </summary>
        </member>
        <member name="M:iFactr.Core.iApp.AppNavigationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.iApp.AppNavigationContext"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.iApp.AppNavigationContext.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:iFactr.Core.iApp.AppNavigationContext.Equals(System.Object)">
            <summary>
            Determines if the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to test for equality.</param>
            <returns><c>true</c> if the object is equal to this instance; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.Core.iApp.AppNavigationContext.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.iApp.Orientation">
            <summary>
            The available device orientations.
            </summary>
        </member>
        <member name="F:iFactr.Core.iApp.Orientation.Portrait">
            <summary>
            Portrait orientation.
            </summary>
        </member>
        <member name="F:iFactr.Core.iApp.Orientation.PortraitUpsideDown">
            <summary>
            Portrait orientation, inverted.
            </summary>
        </member>
        <member name="F:iFactr.Core.iApp.Orientation.LandscapeLeft">
            <summary>
            Landscape, left oriented.
            </summary>
        </member>
        <member name="F:iFactr.Core.iApp.Orientation.LandscapeRight">
            <summary>
            Landscape, right oriented.
            </summary>
        </member>
        <member name="T:iFactr.Core.iApp.OrientationEvent">
            <summary>
            Represents the method that will handle the OrientationChanged event.
            </summary>
            <param name="orientation">The new device orientation.</param>
        </member>
        <member name="T:iFactr.Core.Integrations.MailTo">
            <summary>
            Represents a "mailto:" scheme parser for common handling across platforms.
            </summary>
            <remarks>The attachment parsing may not work on all platforms.</remarks>
        </member>
        <member name="P:iFactr.Core.Integrations.MailTo.EmailTo">
            <summary>
            Gets or sets a collection of email addresses to include in the recipient list.
            </summary>
        </member>
        <member name="P:iFactr.Core.Integrations.MailTo.EmailSubject">
            <summary>
            Gets or sets the subject of the email.
            </summary>
        </member>
        <member name="P:iFactr.Core.Integrations.MailTo.EmailBody">
            <summary>
            Gets or sets the message body of the email.
            </summary>
        </member>
        <member name="P:iFactr.Core.Integrations.MailTo.EmailAttachments">
            <summary>
            Gets or sets a collection of attachments to include in the email.
            </summary>
        </member>
        <member name="T:iFactr.Core.Integrations.MailTo.Attachment">
            <summary>
            Represents an email attachment.
            </summary>
        </member>
        <member name="M:iFactr.Core.Integrations.MailTo.Attachment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Integrations.MailTo.Attachment"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Integrations.MailTo.Attachment.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Integrations.MailTo.Attachment"/> class.
            </summary>
            <param name="filename">The path of the file to attach.</param>
            <param name="mimeType">The type of the file to attach.</param>
        </member>
        <member name="P:iFactr.Core.Integrations.MailTo.Attachment.Filename">
            <summary>
            Gets or sets the path of the file to attach.
            </summary>
        </member>
        <member name="P:iFactr.Core.Integrations.MailTo.Attachment.MimeType">
            <summary>
            Gets or sets the type of the file to attach.
            </summary>
        </member>
        <member name="M:iFactr.Core.Integrations.MailTo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Integrations.MailTo"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Integrations.MailTo.ParseUrl(System.String)">
            <summary>
            Parses the specified "mailto:" URL into a <see cref="T:iFactr.Core.Integrations.MailTo"/> instance.
            </summary>
            <param name="mailToUrl">The "mailto:" URL to parse into a <see cref="T:iFactr.Core.Integrations.MailTo"/> instance.</param>
            <returns>The <see cref="T:iFactr.Core.Integrations.MailTo"/> instance that was generated from the URL.</returns>
        </member>
        <member name="T:iFactr.Core.MobileTarget">
            <summary>
            The available mobile targets available in the iFactr framework.
            </summary>
        </member>
        <member name="F:iFactr.Core.MobileTarget.Cloud">
            <summary>
            A Microsoft Azure-based HTML/CSS/JS rich Web target.
            </summary>
        </member>
        <member name="F:iFactr.Core.MobileTarget.Compact">
            <summary>
            A Microsoft Windows Mobile and .NET Compact Framework target.
            </summary>
        </member>
        <member name="F:iFactr.Core.MobileTarget.Console">
            <summary>
            A Microsoft Windows Console target.
            </summary>
        </member>
        <member name="F:iFactr.Core.MobileTarget.Android">
            <summary>
            An Google Android OS target.
            </summary>
        </member>
        <member name="F:iFactr.Core.MobileTarget.Touch">
            <summary>
            An Apple iOS target.
            </summary>
        </member>
        <member name="F:iFactr.Core.MobileTarget.Web">
            <summary>
            A HTML Large-format Web target.
            </summary>
        </member>
        <member name="F:iFactr.Core.MobileTarget.Wap">
            <summary>
            A Mobile XHTML version for basic devices.
            </summary>
        </member>
        <member name="F:iFactr.Core.MobileTarget.WebKit">
            <summary>
            A HTML/CSS/Javascript rich Mobile Web target.
            </summary>
        </member>
        <member name="F:iFactr.Core.MobileTarget.Windows">
            <summary>
            A Microsoft Windows OS Laptop/Desktop target.
            </summary>
        </member>
        <member name="F:iFactr.Core.MobileTarget.Metro">
            <summary>
            A Microsoft Windows 8 'Metro' target.
            </summary>
        </member>
        <member name="F:iFactr.Core.MobileTarget.WinPhone">
            <summary>
            A Microsoft Windows Phone target.
            </summary>
        </member>
        <member name="F:iFactr.Core.MobileTarget.Unknown">
            <summary>
            The target is unknown.
            </summary>
        </member>
        <member name="T:iFactr.Core.Parameter">
            <summary>
            Defines methods used internally by the framework to check parameter validity.
            </summary>
        </member>
        <member name="M:iFactr.Core.Parameter.CheckParameterType(System.Object,System.String,System.Type[])">
            <summary>
            Checks if the specified object is an instance of any of the expected types.
            </summary>
            <param name="parameter">The object to check.</param>
            <param name="parameterName">The name of the parameter that the object represents.</param>
            <param name="expectedTypes">The types that the object is allowed to be.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="parameter"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="parameter"/> is not an instance of any of the <paramref name="expectedTypes"/>.</exception>
        </member>
        <member name="M:iFactr.Core.Parameter.CheckParameterType(System.Object,System.String,System.Boolean,System.Type[])">
            <summary>
            Checks if the specified object is an instance of any of the expected types.
            </summary>
            <param name="parameter">The object to check.</param>
            <param name="parameterName">The name of the parameter that the object represents.</param>
            <param name="allowNull">Whether or not the object can be null.</param>
            <param name="expectedTypes">The types that the object is allowed to be.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="parameter"/> is <c>null</c> and <paramref name="allowNull"/> is <c>false</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="parameter"/> is not an instance of any of the <paramref name="expectedTypes"/>.</exception>
        </member>
        <member name="M:iFactr.Core.Parameter.CheckParameterTypes(System.Collections.IEnumerable,System.String,System.Type[])">
            <summary>
            Checks if all objects in the specified collection are instances of any of the expected types.
            </summary>
            <param name="collection">The collection in which to check each object.</param>
            <param name="collectionName">The name of the collection.</param>
            <param name="expectedTypes">The types that each object is allowed to be.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="collection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when an object in the collection is not an instance of any of the <paramref name="expectedTypes"/>.</exception>
        </member>
        <member name="M:iFactr.Core.Parameter.CheckParameterTypes(System.Collections.IEnumerable,System.String,System.Boolean,System.Type[])">
            <summary>
            Checks if all objects in the specified collection are instances of any of the expected types.
            </summary>
            <param name="collection">The collection in which to check each object.</param>
            <param name="collectionName">The name of the collection.</param>
            <param name="allowNull">Whether or not the objects in the collection can be null.</param>
            <param name="expectedTypes">The types that each object is allowed to be.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="collection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when an object in the collection is not an instance of any of the <paramref name="expectedTypes"/>.</exception>
        </member>
        <member name="M:iFactr.Core.Parameter.CheckObjectExists(System.Collections.IEnumerable,System.String,System.Object,System.String)">
            <summary>
            Checks if the specified object resides within the specified collection.
            </summary>
            <param name="collection">The collection in which to check for the object.</param>
            <param name="collectionName">The name of the collection.</param>
            <param name="parameter">The object to check.</param>
            <param name="parameterName">The name of the parameter that the object represents.</param>
            <returns>The index of the object within the collection.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="collection"/> is <c>null</c> -or- when the <paramref name="parameter"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="parameter"/> is not found within the <paramref name="collection"/>.</exception>
        </member>
        <member name="M:iFactr.Core.Parameter.CheckIndex(System.Collections.IEnumerable,System.String,System.Int32)">
            <summary>
            Checks if the specified index is within range of the specified collection.
            </summary>
            <param name="collection">The collection that the index is to be checked against.</param>
            <param name="collectionName">The name of the collection.</param>
            <param name="index">The index to check.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="collection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> exceeds the upper or lower bound of the <paramref name="collection"/>.</exception>
        </member>
        <member name="M:iFactr.Core.Parameter.CheckUrl(System.String)">
            <summary>
            Checks if the specified url is valid.
            </summary>
            <param name="url">The url to check.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="url"/> is <c>null</c> or an empty string.</exception>
        </member>
        <member name="T:iFactr.Core.NavigationMap">
            <summary>
            A <see cref="T:MonoCross.Navigation.NavigationList"/> implementation that provides a browser controller.
            </summary>
        </member>
        <member name="M:iFactr.Core.NavigationMap.MatchUrl(System.String)">
            <summary>
            Returns a <see cref="T:MonoCross.Navigation.MXNavigation"/> from the NavigationMap that matches the specified URL.
            </summary>
            <param name="url">A <see cref="T:System.String"/> representing the URL to match.</param>
            <returns>A <see cref="T:MonoCross.Navigation.MXNavigation"/> that matches the URL.</returns>
        </member>
        <member name="T:iFactr.Core.IHistoryStack">
            <summary>
            Defines a view manager that can push and pop <see cref="T:MonoCross.Navigation.IMXView"/> instances from a view stack.
            </summary>
        </member>
        <member name="P:iFactr.Core.IHistoryStack.ID">
            <summary>
            Gets the viewport identifier of this stack.
            </summary>
        </member>
        <member name="P:iFactr.Core.IHistoryStack.CurrentLayer">
            <summary>
            Gets the <see cref="T:iFactr.Core.Layers.iLayer"/> that acts as the view-model for the <see cref="P:iFactr.Core.IHistoryStack.CurrentView"/>.
            </summary>
        </member>
        <member name="P:iFactr.Core.IHistoryStack.History">
            <summary>
            A stack of layers that used to be in the pane.
            </summary>
        </member>
        <member name="M:iFactr.Core.IHistoryStack.PopToLayer(iFactr.Core.Layers.iLayer)">
            <summary>
            Clears the history stack through the given layer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iFactr.Core.IHistoryStack.Peek">
            <summary>
            Gets the last layer pushed onto the history stack.
            </summary>
            <returns>The <see cref="T:MonoCross.Navigation.IMXView"/> on the top of the history stack.</returns>
            <remarks>This can be used to get information about the previous Layer.</remarks>
        </member>
        <member name="M:iFactr.Core.IHistoryStack.PushCurrent">
            <summary>
            Pushes the <see cref="P:iFactr.Core.IHistoryStack.CurrentView"/> onto the History to make way for another layer.
            </summary>
            <remarks>If the CurrentPerspective is associated with a LoginLayer, it will not be pushed to the stack history.</remarks>
        </member>
        <member name="M:iFactr.Core.IHistoryStack.Clear(iFactr.Core.Layers.iLayer)">
            <summary>
            Clears the history and current display.
            </summary>
            <remarks>If this is a popover stack, the popover is closed. If this is a detail stack, it will show the vanity panel.</remarks>
        </member>
        <member name="P:iFactr.Core.IHistoryStack.CurrentView">
            <summary>
            Gets the view that is currently being displayed on the stack.
            </summary>
        </member>
        <member name="P:iFactr.Core.IHistoryStack.Views">
            <summary>
            Gets a collection of the views that are shown in this stack.
            </summary>
            <remarks>
            This collection represents the history of views shown on this stack plus the view currently shown.
            </remarks>
        </member>
        <member name="M:iFactr.Core.IHistoryStack.InsertView(System.Int32,MonoCross.Navigation.IMXView)">
            <summary>
            Inserts the specified <see cref="T:MonoCross.Navigation.IMXView"/> instance into the stack at the specified index.
            </summary>
            <param name="index">The index of the stack in which to insert the view.</param>
            <param name="view">The view to be inserted.</param>
            <exception cref="T:System.ArgumentException">Thrown when the view is of an unexpected type.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the view is <c>null</c>.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index exceeds the upper or lower bound of the <see cref="P:iFactr.Core.IHistoryStack.Views"/> collection.</exception>
        </member>
        <member name="M:iFactr.Core.IHistoryStack.PopToRoot">
            <summary>
            Removes all views from the stack except for the root.
            If this is a stack for a popover pane, it will also close the popover.
            </summary>
            <returns>The views that have been removed from the stack.</returns>
        </member>
        <member name="M:iFactr.Core.IHistoryStack.PopToView(MonoCross.Navigation.IMXView)">
            <summary>
            Removes from the stack all of the views that are on top of the specified <see cref="T:MonoCross.Navigation.IMXView"/> instance.
            </summary>
            <param name="view">The view that should be on the top of the stack.</param>
            <exception cref="T:System.ArgumentException">Thrown when the view does not exist within the stack -or- when the view is of an unexpected type.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the view is <c>null</c>.</exception>
            <returns>The views that have been removed from the stack.</returns>
        </member>
        <member name="M:iFactr.Core.IHistoryStack.PopView">
            <summary>
            Removes the top view from the stack.  If this is a stack for a popover pane
            and the top view is the root view, it will also close the popover.
            </summary>
            <returns>The view that was removed from the stack.</returns>
        </member>
        <member name="M:iFactr.Core.IHistoryStack.PushView(MonoCross.Navigation.IMXView)">
            <summary>
            Pushes the specified <see cref="T:MonoCross.Navigation.IMXView"/> instance onto the stack.
            </summary>
            <param name="view">The view to be pushed.</param>
            <exception cref="T:System.ArgumentException">Thrown when the view is of an unexpected type.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the view is <c>null</c>.</exception>
        </member>
        <member name="M:iFactr.Core.IHistoryStack.ReplaceView(MonoCross.Navigation.IMXView,MonoCross.Navigation.IMXView)">
            <summary>
            Removes the specified <see cref="T:MonoCross.Navigation.IMXView"/> instance from the stack and inserts another view into its place.
            </summary>
            <param name="currentView">The view to be removed.</param>
            <param name="newView">The view to be inserted.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="currentView"/> does not exist within the stack -or- when the <paramref name="newView"/> is of an unexpected type.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="currentView"/> is <c>null</c> -or- when the <paramref name="newView"/> is <c>null</c>.</exception>
        </member>
        <member name="T:iFactr.Core.IMXViewExtensions">
            <summary>
            Contains extension methods for IMXView.
            </summary>
        </member>
        <member name="M:iFactr.Core.IMXViewExtensions.IsDisplaying(MonoCross.Navigation.IMXView)">
            <summary>
            Determines whether the given view is being displayed.
            </summary>
            <param name="view">The view to check for displaying.</param>
            <returns><c>true</c> if the view is currently presented; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.Core.PaneManager">
            <summary>
            Manages a collection of <see cref="T:iFactr.Core.IHistoryStack"/>s.
            </summary>
        </member>
        <member name="F:iFactr.Core.PaneManager.HistoryStacks">
            <summary>
            Gets the collection of history stacks.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> that maps a <see cref="T:iFactr.Core.iApp.AppNavigationContext"/> represented as an int to a <see cref="T:iFactr.Core.IHistoryStack"/>.
            </value>
            <remarks>To convert a key back to an <see cref="T:iFactr.Core.iApp.AppNavigationContext"/>, use <see cref="M:iFactr.Core.PaneManager.NavContextFromKey(System.Int32)"/>.</remarks>
        </member>
        <member name="P:iFactr.Core.PaneManager.CurrentTab">
            <summary>
            Gets or sets the state of the active tab displayed by the stack manager.
            </summary>
        </member>
        <member name="M:iFactr.Core.PaneManager.DisplayLayer(iFactr.Core.Layers.iLayer,MonoCross.Navigation.IMXView)">
            <summary>
            Displays the layer in the appropriate history stack.
            </summary>
            <param name="layer">The layer to display.</param>
            <param name="view">The view that is displaying the <paramref name="layer"/>.</param>
        </member>
        <member name="M:iFactr.Core.PaneManager.DisplayView(MonoCross.Navigation.IMXView)">
            <summary>
            Inserts the specified <see cref="T:MonoCross.Navigation.IMXView"/> object into an appropriate stack and renders it.
            </summary>
            <param name="view">The view to be inserted into a stack.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="view"/> is <c>null</c>.</exception>
        </member>
        <member name="M:iFactr.Core.PaneManager.FindStack(MonoCross.Navigation.IMXView)">
            <summary>
            Finds the stack to which the view belongs.
            </summary>
            <param name="view">The view used for querying the history stacks.</param>
            <returns>The history stack that this view exists in or prefers.</returns>
        </member>
        <member name="M:iFactr.Core.PaneManager.AddStack(iFactr.Core.IHistoryStack,iFactr.Core.iApp.AppNavigationContext)">
            <summary>
            Adds the stack to this pane manager.
            </summary>
            <param name="stack">The history stack to add to the manager.</param>
            <param name="context">The navigation context that describes the stack position.</param>
        </member>
        <member name="M:iFactr.Core.PaneManager.Clear">
            <summary>
            Removes all of the history stacks from all of the panes.
            </summary>
        </member>
        <member name="M:iFactr.Core.PaneManager.Clear(iFactr.UI.Pane)">
            <summary>
            Removes all of the history stacks from the specified <see cref="T:iFactr.UI.Pane"/>.
            </summary>
            <param name="pane">The pane from which to remove the history stacks.</param>
        </member>
        <member name="M:iFactr.Core.PaneManager.ShouldNavigate(iFactr.UI.Link,iFactr.UI.Pane,iFactr.UI.NavigationType)">
            <summary>
            Checks relevant stacks to see if any on-screen layers would prevent navigation.
            </summary>
            <param name="link">The link that is being navigated to.</param>
            <param name="pane">The pane of the layer that is being navigated away from.</param>
            <param name="type">The navigation event.</param>
            <returns><c>true</c> to continue navigation; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:iFactr.Core.PaneManager.IsSplitView">
            <summary>
            Gets whether the specified stack manager is for a split view.
            </summary>
            <returns>
              <c>true</c> if specified stack manager is for a split view; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:iFactr.Core.PaneManager.FromNavContext(iFactr.Core.Layers.iLayer.NavigationContext)">
            <summary>
            Gets a history stack instance by nav context.
            </summary>
            <param name="navContext">The nav context of the desired history stack.</param>
            <returns>A history stack matching the nav context.</returns>
        </member>
        <member name="M:iFactr.Core.PaneManager.FromNavContext(iFactr.UI.Pane)">
            <summary>
            Gets a history stack instance by pane.
            </summary>
            <param name="pane">The <see cref="T:iFactr.UI.Pane"/> to search for.</param>
            <returns>A history stack matching the nav context.</returns>
        </member>
        <member name="M:iFactr.Core.PaneManager.FromNavContext(iFactr.UI.Pane,System.Int32)">
            <summary>
            Gets a history stack instance by pane and tab.
            </summary>
            <param name="pane">The <see cref="T:iFactr.UI.Pane"/> to search for.</param>
            <param name="tab">The tab of a <see cref="F:iFactr.UI.Pane.Master"/> stack.</param>
            <returns>A history stack matching the nav context.</returns>
        </member>
        <member name="M:iFactr.Core.PaneManager.GetNavigatedURI(MonoCross.Navigation.IMXView)">
            <summary>
            Gets the URI of the controller that outputted the specified <see cref="T:MonoCross.Navigation.IMXView"/>.
            </summary>
            <param name="view">The <see cref="T:MonoCross.Navigation.IMXView"/> for which to retrieve the navigated URI.</param>
        </member>
        <member name="P:iFactr.Core.PaneManager.TopmostPane">
            <summary>
            Gets the navigation context of the highest-ordinal Pane
            </summary>
            <returns>An <see cref="T:iFactr.Core.Layers.iLayer.NavigationContext"/> with its OutputOnPane set to the topmost Pane with an active layer.</returns>
        </member>
        <member name="P:iFactr.Core.PaneManager.Instance">
            <summary>
            Gets the singleton manager instance.
            </summary>
        </member>
        <member name="M:iFactr.Core.PaneManager.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the history stacks.
            </summary>
        </member>
        <member name="T:iFactr.Core.StackExtensions">
            <summary>
            Static class containing history stack management methods.
            </summary>
        </member>
        <member name="M:iFactr.Core.StackExtensions.Contains(iFactr.Core.IHistoryStack,MonoCross.Navigation.IMXView)">
            <summary>
            Determines whether the specified <paramref name="view"/> is a member of the stack.
            </summary>
            <param name="historyStack">The stack to check.</param>
            <param name="view">The <see cref="T:MonoCross.Navigation.IMXView"/> to check for.</param>
            <returns><c>true</c> if the view exists in the history stack, or is being displayed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.Core.StackExtensions.FindPane(iFactr.Core.IHistoryStack)">
            <summary>
            Finds the <see cref="T:iFactr.UI.Pane"/> in which the stack is displayed.
            </summary>
            <param name="stack">The stack displayed in a pane.</param>
            <returns>The <see cref="T:iFactr.UI.Pane"/> in which the stack is displayed.</returns>
        </member>
        <member name="M:iFactr.Core.StackExtensions.CanGoBack(iFactr.Core.IHistoryStack)">
            <summary>
            Whether this stack can navigate back
            </summary>
        </member>
        <member name="M:iFactr.Core.StackExtensions.DisplayBackButton(iFactr.Core.IHistoryStack,iFactr.UI.Link)">
            <summary>
            Whether this stack can navigate back, given a back button
            </summary>
        </member>
        <member name="M:iFactr.Core.StackExtensions.HandleBackLink(iFactr.Core.IHistoryStack,iFactr.UI.Link,iFactr.UI.Pane)">
            <summary>
            Executes the appropriate logic for the specified <see cref="T:iFactr.UI.Link"/> object, treating it as a back button.
            </summary>
            <param name="stack">The stack that contains the view the link object is a part of.</param>
            <param name="backLink">The link object to be handled.</param>
            <param name="pane">The pane in which the view containing the back link resides.</param>
        </member>
        <member name="M:iFactr.Core.StackExtensions.DisplayView(iFactr.Core.IHistoryStack,MonoCross.Navigation.IMXView)">
            <summary>
            Displays the specified view in the stack.
            </summary>
            <param name="stack">The stack to display the view.</param>
            <param name="view">The view to be displayed.</param>
        </member>
        <member name="M:iFactr.Core.StackExtensions.DisplayView(iFactr.Core.IHistoryStack,MonoCross.Navigation.IMXView,System.Boolean)">
            <summary>
            Displays the specified view in the stack.
            </summary>
            <param name="stack">The stack to display the view.</param>
            <param name="view">The view to be displayed.</param>
            <param name="forceRoot"><c>true</c> to empty the history stack; otherwise <c>false</c></param>
        </member>
        <member name="M:iFactr.Core.StackExtensions.HasHistory(iFactr.Core.IHistoryStack)">
            <summary>
            Determines whether the specified stack has views in its history.
            </summary>
            <param name="stack">The stack to check.</param>
            <returns><c>true</c> if the <see cref="P:iFactr.Core.IHistoryStack.Views"/> collection contains more than one view; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.Core.Styles.DynamicImage">
            <summary>
            Represents a 9-patch image that is able to scale or tile the edges and center.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.DynamicImage.FileName">
            <summary>
            The file name of the image. File name only. Does not include any portion of the path.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.DynamicImage.ResizeMethod">
            <summary>
            The resize method.
            </summary>
        </member>
        <member name="M:iFactr.Core.Styles.DynamicImage.#ctor(System.String,iFactr.Core.Styles.DynamicResizeMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Styles.DynamicImage"/> struct.
            </summary>
            <param name="fileName">The file name of the image excluding any part of the path.</param>
            <param name="resizeMethod">The resize method.</param>
        </member>
        <member name="T:iFactr.Core.Styles.DynamicResizeMethod">
            <summary>
            The method in which a <see cref="T:iFactr.Core.Styles.DynamicImage"/> fills areas larger than the image.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.DynamicResizeMethod.Stretch">
            <summary>
            The edges and center are scaled to fill the available area.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.DynamicResizeMethod.Tile">
            <summary>
            The edges and center are tiled continuously until the available area is filled.
            </summary>
        </member>
        <member name="T:iFactr.Core.Styles.LabelStyle">
            <summary>
            Represents the styling of a label.
            </summary>
        </member>
        <member name="T:iFactr.Core.Styles.LabelStyle.Align">
            <summary>
            The alignment of a label.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.LabelStyle.Align.Center">
            <summary>
            The label is aligned to the center.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.LabelStyle.Align.Left">
            <summary>
            The label is aligned to the left.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.LabelStyle.Align.Right">
            <summary>
            The label is aligned to the right.
            </summary>
        </member>
        <member name="T:iFactr.Core.Styles.LabelStyle.Format">
            <summary>
            The formatting of a label.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.LabelStyle.Format.Normal">
            <summary>
            The label is displayed with non-bold and non-italic font.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.LabelStyle.Format.Bold">
            <summary>
            The label is displayed with a bold font.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.LabelStyle.Format.Italic">
            <summary>
            The label is displayed with an italic font.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.LabelStyle.Format.BoldItalic">
            <summary>
            The label is displayed with a bold and italic font.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.LabelStyle.HeaderLevel">
            <summary>
            Gets or sets how many levels deep this instance is in the header.
            </summary>
        </member>
        <member name="M:iFactr.Core.Styles.LabelStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Styles.LabelStyle"/> class.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.LabelStyle.WordWrap">
            <summary>
            Gets or sets whether to word-wrap the label text.
            </summary>
            <value><c>true</c> if the label text is to be word-wrapped; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iFactr.Core.Styles.LabelStyle.MaxLines">
            <summary>
            Gets or sets the maximum number of lines of text allowed to display.
            </summary>
            <value>The maximum number of lines of text as an <see cref="T:System.Int32"/>.</value>
        </member>
        <member name="P:iFactr.Core.Styles.LabelStyle.FontFamily">
            <summary>
            Gets or sets the font family of the text.
            </summary>
            <value>The font family of the text as a <see cref="T:System.String"/>.</value>
        </member>
        <member name="P:iFactr.Core.Styles.LabelStyle.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value>The size of the font.</value>
        </member>
        <member name="P:iFactr.Core.Styles.LabelStyle.TextAlign">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>The text alignment as an <see cref="T:iFactr.Core.Styles.LabelStyle.Align"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Styles.LabelStyle.TextFormat">
            <summary>
            Gets or sets the formatting of the text.
            </summary>
            <value>The formatting of the text as a <see cref="T:iFactr.Core.Styles.LabelStyle.Format"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Styles.LabelStyle.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Styles.Style">
            <summary>
            Represents a display style.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.ErrorTextColor">
            <summary>
            Gets or sets the color for error labels.
            </summary>
            <value>The color of the error labels.</value>
        </member>
        <member name="P:iFactr.Core.Styles.Style.HeaderColor">
            <summary>
            Gets or sets the color of the header.
            </summary>
            <value>The color of the header.</value>
        </member>
        <member name="P:iFactr.Core.Styles.Style.HeaderTextColor">
            <summary>
            Gets or sets the color of the text on the header.
            </summary>
            <value>The color of the header text.</value>
        </member>
        <member name="P:iFactr.Core.Styles.Style.SectionHeaderColor">
            <summary>
            Gets or sets the color of the section header.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.SectionHeaderTextColor">
            <summary>
            Gets or sets the color of the text on the section header.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.SelectionColor">
            <summary>
            Gets or sets the item selection color.
            </summary>
            <value>The item selection color.</value>
        </member>
        <member name="P:iFactr.Core.Styles.Style.LayerBackgroundColor">
            <summary>
            Gets or sets the color of the layer background.
            </summary>
            <value>The color of the layer background.</value>
        </member>
        <member name="P:iFactr.Core.Styles.Style.LayerItemBackgroundColor">
            <summary>
            Gets or sets the color of the background of each item on the layer.
            </summary>
            <value>The color of each item's background.</value>
        </member>
        <member name="P:iFactr.Core.Styles.Style.SeparatorColor">
            <summary>
            Gets or sets the color of the separator between each item on the layer.
            </summary>
            <value>The color of the separator.</value>
        </member>
        <member name="P:iFactr.Core.Styles.Style.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:iFactr.Core.Styles.Style.SubTextColor">
            <summary>
            Gets or sets the color of the subtext.
            </summary>
            <value>The color of the subtext.</value>
        </member>
        <member name="P:iFactr.Core.Styles.Style.SecondarySubTextColor">
            <summary>
            Gets or sets the color of the secondary subtext.
            </summary>
            <value>The color of the secondary subtext.</value>
        </member>
        <member name="P:iFactr.Core.Styles.Style.LayerItemAlpha">
            <summary>
            Gets or sets the background transparency of each item in the layer.
            </summary>
            <value> The item transparency as a <see cref="T:System.Byte"/>.</value>
        </member>
        <member name="P:iFactr.Core.Styles.Style.LayerBackgroundImage">
            <summary>
            Gets or sets the file path to the layer background image.
            </summary>
            <value>The layer background image as a <see cref="T:System.String"/>.</value>
        </member>
        <member name="P:iFactr.Core.Styles.Style.LayerDynamicMasterImage">
            <summary>
            Gets or sets the dynamic layer background image for when the layer is on the master pane.
            If the app is in small form factor, use this property.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.LayerDynamicDetailImage">
            <summary>
            Gets or sets the dynamic layer background image for when the layer is on the detail pane.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.LayerDynamicPopoverImage">
            <summary>
            Gets or sets the dynamic layer background image for when the layer is on the popover pane.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.DefaultLabelStyle">
            <summary>
            Gets or sets the default label style.
            </summary>
            <value>The default label style as a <see cref="T:iFactr.Core.Styles.LabelStyle"/>.</value>
        </member>
        <member name="P:iFactr.Core.Styles.Style.MasterTransitionAnimation">
            <summary>
            Gets or sets the animation to use when navigating between layers on the master pane.
            Not all animations are supported on every platform.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.DetailTransitionAnimation">
            <summary>
            Gets or sets the animation to use when navigating between layers on the detail pane.
            Not all animations are supported on every platform.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.PopoverTransitionAnimation">
            <summary>
            Gets or sets the animation to use when navigating between layers on the popover pane.
            Not all animations are supported on every platform.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.MasterTransitionDirection">
            <summary>
            Gets or sets the direction of the transition animation on the master pane.
            Not all directions will work with all animations.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.DetailTransitionDirection">
            <summary>
            Gets or sets the direction of the transition animation on the detail pane.
            Not all directions will work with all animations.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.PopoverTransitionDirection">
            <summary>
            Gets or sets the direction of the transition animation on the popover pane.
            Not all directions will work with all animations.
            </summary>
        </member>
        <member name="M:iFactr.Core.Styles.Style.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Styles.Style"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Styles.Style.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Styles.Style.Color">
            <summary>
            Represents a color value.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.Style.Color.A">
            <summary>
            The alpha component.  This field is readonly.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.Style.Color.R">
            <summary>
            The red component.  This field is readonly.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.Style.Color.G">
            <summary>
            The green component.  This field is readonly.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.Style.Color.B">
            <summary>
            The blue component.  This field is readonly.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.Style.Color.HexCode">
            <summary>
            The hexidecimal value that this instance equates to.  This field is readonly.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.Color.Black">
            <summary>
            Gets a black color.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.Color.Blue">
            <summary>
            Gets a blue color.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.Color.Brown">
            <summary>
            Gets a brown color.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.Color.Cyan">
            <summary>
            Gets a cyan color.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.Color.Gray">
            <summary>
            Gets a gray color.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.Color.Green">
            <summary>
            Gets a green color.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.Color.Orange">
            <summary>
            Gets an orange color.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.Color.Purple">
            <summary>
            Gets a purple color.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.Color.Red">
            <summary>
            Gets a red color.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.Color.Transparent">
            <summary>
            Gets a transparent color.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.Color.White">
            <summary>
            Gets a white color.
            </summary>
        </member>
        <member name="P:iFactr.Core.Styles.Style.Color.Yellow">
            <summary>
            Gets a yellow color.
            </summary>
        </member>
        <member name="M:iFactr.Core.Styles.Style.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Styles.Style.Color"/> struct using the aRGB values provided.
            </summary>
            <param name="alpha">The alpha component value.</param>
            <param name="red">The red component value.</param>
            <param name="green">The green component value.</param>
            <param name="blue">The blue component value.</param>
        </member>
        <member name="M:iFactr.Core.Styles.Style.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Styles.Style.Color"/> class using the RGB values provided.
            </summary>
            <param name="red">The red component value.</param>
            <param name="green">The green component value.</param>
            <param name="blue">The blue component value.</param>
        </member>
        <member name="M:iFactr.Core.Styles.Style.Color.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Styles.Style.Color"/> class using the hexidecimal code provided.
            </summary>
            <param name="hexCode">A <see cref="T:System.String"/> representing the Hex code value.</param>
        </member>
        <member name="M:iFactr.Core.Styles.Style.Color.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the objects are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.Core.Styles.Style.Color.Equals(iFactr.Core.Styles.Style.Color)">
            <summary>
            Indicates whether this instance and a specified <see cref="T:iFactr.Core.Styles.Style.Color"/> object are equal.
            </summary>
            <param name="color">Another object to compare to.</param>
            <returns><c>true</c> if the objects are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.Core.Styles.Style.Color.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:iFactr.Core.Styles.Style.Color.op_Equality(iFactr.Core.Styles.Style.Color,iFactr.Core.Styles.Style.Color)">
            <summary>
            Determines whether two <see cref="T:iFactr.Core.Styles.Style.Color"/> objects are considered equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><c>true</c> if the objects are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.Core.Styles.Style.Color.op_Inequality(iFactr.Core.Styles.Style.Color,iFactr.Core.Styles.Style.Color)">
            <summary>
            Determines whether two <see cref="T:iFactr.Core.Styles.Style.Color"/> objects are not considered equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><c>true</c> if the objects are not considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.Core.Styles.Transition">
            <summary>
            The transition animation type.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.Transition.Default">
            <summary>
            The default transition animation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.Transition.Curl">
            <summary>
            A curling animation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.Transition.Fade">
            <summary>
            A fading animation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.Transition.Flip">
            <summary>
            A flipping animation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.Transition.MoveIn">
            <summary>
            A move-in animation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.Transition.None">
            <summary>
            No animation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.Transition.Push">
            <summary>
            A pushing animation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.Transition.Reveal">
            <summary>
            A revealing animation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.Transition.Uncurl">
            <summary>
            An uncurling animation.
            </summary>
        </member>
        <member name="T:iFactr.Core.Styles.TransitionDirection">
            <summary>
            The direction of the transition animation.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.TransitionDirection.Down">
            <summary>
            The animation is directed downward.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.TransitionDirection.Left">
            <summary>
            The animation is directed to the left.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.TransitionDirection.Right">
            <summary>
            The animation is directed to the right.
            </summary>
        </member>
        <member name="F:iFactr.Core.Styles.TransitionDirection.Up">
            <summary>
            The animation is directed upward.
            </summary>
        </member>
        <member name="T:iFactr.Core.Targets.Config.ConfigDictionary">
            <summary>
            Represents a <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> that contains an application's configuration settings.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.Config.ConfigDictionary.Load">
            <summary>
            Loads the application's configuration settings.
            </summary>
        </member>
        <member name="T:iFactr.Core.Targets.Config.IConfig">
            <summary>
            Defines an application's configuration settings.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.Config.IConfig.Load">
            <summary>
            Loads the application's configuration settings.
            </summary>
        </member>
        <member name="T:iFactr.Core.Targets.ITargetFactory">
            <summary>
            Defines a bindings factory.
            </summary>
            <remarks>
            This interface is implemented in the target bindings by the factory to provide runtime values for properties used by an iFactr application.
            </remarks>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.LargeFormFactor">
            <summary>
            Gets whether the factory is running on a large form-factor device.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.NetworkGetMethod">
            <summary>
            Gets or sets the restrictions to impose on network GET methods.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.NetworkPostMethod">
            <summary>
            Gets or sets the restrictions to impose on network POST methods.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.Style">
            <summary>
            Gets the factory style.  If no application style is set, this style is used.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.Platform">
            <summary>
            Gets the platform that the factory is running on.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.Target">
            <summary>
            Gets the target that the factory is running on.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.ApplicationPath">
            <summary>
            Gets the path for application assets.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.SessionDataPath">
            <summary>
            Gets the session-scoped path for application data.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.SessionDataRoot">
            <summary>
            Gets the session-scoped root path for application data.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.SessionDataAppend">
            <summary>
            Gets the session-scoped appended path for application data.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.DataPath">
            <summary>
            Gets the path for application data.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.TempPath">
            <summary>
            Gets the path for temporary application data.  The contents of this path is emptied on application startup.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.DeviceId">
            <summary>
            Gets a unique identifier for the device running the application.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.Config">
            <summary>
            Gets the application's configuration settings.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.Settings">
            <summary>
            Gets the application's settings.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.Session">
            <summary>
            Gets the application's session settings.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.Logger">
            <summary>
            Gets the application's logging utility.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.File">
            <summary>
            Gets the application's file system interface.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.Thread">
            <summary>
            Gets the application's threading utility.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.Network">
            <summary>
            Gets the application's networking utility.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.Encryption">
            <summary>
            Gets the application's data encryptor.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.ITargetFactory.Compositor">
            <summary>
            Gets the application's image compositor.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.ITargetFactory.OutputLayerResponse(MonoCross.NetworkResponse)">
            <summary>
            Outputs a layer from the specified network response.
            </summary>
            <param name="response">The network response from which to output a layer.</param>
        </member>
        <member name="T:iFactr.Core.Targets.Settings.BasicSettingsDictionary">
            <summary>
            Stores and retrieves a user settings file.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.Settings.BasicSettingsDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Targets.Settings.BasicSettingsDictionary"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.Settings.BasicSettingsDictionary.Load">
            <summary>
            Loads the user settings from disk.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.Settings.BasicSettingsDictionary.Store">
            <summary>
            Saves the application's settings to disk.
            </summary>
        </member>
        <member name="T:iFactr.Core.Targets.Settings.ISettings">
            <summary>
            Defines an application's settings.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.Settings.ISettings.Load">
            <summary>
            Loads an application's settings.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.Settings.ISettings.Store">
            <summary>
            Saves an application's settings to disk.
            </summary>
        </member>
        <member name="T:iFactr.Core.Targets.Settings.SettingsDictionary">
            <summary>
            Represents an application's settings.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.Settings.SettingsDictionary.Load">
            <summary>
            Loads the application's settings.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.Settings.SettingsDictionary.Store">
            <summary>
            Saves the application's settings to disk.
            </summary>
        </member>
        <member name="T:iFactr.Core.Targets.NavigationDelegate">
            <summary>
            Represents the method that will handle navigation events.
            </summary>
            <param name="source">The history entry that triggered the navigation event.</param>
            <param name="link">The link containing information about the navigation taking place.</param>
            <param name="navigationType">The type of navigation that is occurring.</param>
            <returns><c>true</c> if navigation should continue; otherwise <c>false</c></returns>
        </member>
        <member name="T:iFactr.Core.Targets.TargetFactory">
            <summary>
            Represents the base class of a bindings factory.  This class is abstract.
            </summary>
        </member>
        <member name="E:iFactr.Core.Targets.TargetFactory.ViewOutputting">
            <summary>
            Occurs when an <see cref="T:MonoCross.Navigation.IMXView"/> instance is about to be outputted.
            </summary>
        </member>
        <member name="E:iFactr.Core.Targets.TargetFactory.ViewOutputted">
            <summary>
            Occurs after an <see cref="T:MonoCross.Navigation.IMXView"/> instance has been outputted.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.Converter">
            <summary>
            Gets or sets the <see cref="P:iFactr.Core.Targets.TargetFactory.Converter"/> instance that is responsible for
            generating cells from <see cref="T:iFactr.Core.Layers.iItem"/> and <see cref="T:iFactr.Core.Forms.Field"/> objects.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.Instructor">
            <summary>
            Gets or sets the <see cref="P:iFactr.Core.Targets.TargetFactory.Instructor"/> instance that is responsible for executing
            specialized logic for certain UI elements depending on the target platform.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.LoadTimer">
            <summary>
            Gets or sets an instance of the timer that is used for determining when to display the load indicator.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.DefaultLoadIndicatorDelay">
            <summary>
            Gets or sets the default delay, in milliseconds, before the load indicator is displayed.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.BeginBlockingUserInput">
            <summary>
            Signals the application to begin ignoring any new input from the user.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.StopBlockingUserInput">
            <summary>
            Signals the application to begin accepting user input again.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.OutputController(MonoCross.Navigation.IMXController,System.String,System.String)">
            <summary>
            Executes the rendering logic for the view of the specified <see cref="T:MonoCross.Navigation.IMXController"/> instance before painting it on the screen.
            </summary>
            <param name="controller">The controller to output.</param>
            <param name="perspective">The perspective that is mapped to the view that will be rendered.</param>
            <param name="navigatedUri">A <see cref="T:System.String"/> that represents the uri used to navigate to the controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="controller"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when there is no view mapped to the <paramref name="perspective"/>.</exception>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.CreateObject``1(System.Object[])">
            <summary>
            Creates an instance of type <typeparamref name="T"/> using the specified parameters.
            The type must have been registered using <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/> for it to be created.
            </summary>
            <typeparam name="T">The type of the object to be created.</typeparam>
            <param name="parameters">Any parameters to pass along to the constructor of the created object.</param>
            <returns>The newly created object.</returns>
            <exception cref="T:System.ArgumentException">Thrown when type <typeparamref name="T"/> is not an interface type.</exception>
            <exception cref="T:System.MissingMemberException">Thrown when an appropriate constructor is not found for type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.CreateObject(System.Type,System.Object[])">
            <summary>
            Creates an instance of the specified interface type using the specified parameters.
            The type must have been registered using <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/> for it to be created.
            </summary>
            <param name="interfaceType">The interface type of the object to be created.</param>
            <param name="parameters">Any parameters to pass along to the constructor of the created object.</param>
            <returns>The newly created object.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="interfaceType"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="interfaceType"/> is <c>null</c>.</exception>
            <exception cref="T:System.MissingMemberException">Thrown when an appropriate constructor is not found for the object of the specified <paramref name="interfaceType"/>.</exception>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.OnGetCustomItem(iFactr.Core.Layers.ICustomItem,iFactr.Core.Layers.iLayer,iFactr.UI.IListView,System.Object)">
            <summary>
            Called when an <see cref="T:iFactr.Core.Layers.ICustomItem"/> instance is ready to be rendered and a native object is needed for insertion into the view.
            </summary>
            <param name="item">The item that is ready to be rendered.</param>
            <param name="layer">The layer instance associated with the item, or <c>null</c> if the item is not associated with a layer.</param>
            <param name="view">The view that will contain the item.</param>
            <param name="recycledCell">An already instantiated cell that is ready for reuse, or <c>null</c> if no cell has been recycled.</param>
            <returns>The object that will be inserted into the view.</returns>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.GetNativeObject(System.Object,System.String,System.Type[])">
            <summary>
            Returns the platform-specific object that the specified object represents.
            </summary>
            <param name="obj">The object for which to return the platform-specific counterpart.</param>
            <param name="objectName">The name of the object being passed in.</param>
            <param name="nativeTypes">The types that an object must be for it to be considered a valid native counterpart.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.GetPair(System.Object)">
            <summary>
            Gets the abstracted object from an <see cref="T:iFactr.UI.IPairable"/>.
            </summary>
            <param name="pair">The object for which to return the abstract counterpart.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.OnOutputLayer(iFactr.Core.Layers.iLayer)">
            <summary>
            Called when an <see cref="T:iFactr.Core.Layers.iLayer"/> instance is ready to be outputted.  Override this method in a subclass
            in order to handle layer types that cannot be handled by the available abstract objects.
            </summary>
            <param name="layer">The layer to be outputted.</param>
            <returns><c>true</c> if layer output was handled and the factory should not attempt to output it as a controller; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.OnControllerLoadBegin(MonoCross.Navigation.IMXController,MonoCross.Navigation.IMXView)">
            <summary>
            Called when an <see cref="T:MonoCross.Navigation.IMXController"/> instance is about to be loaded.
            </summary>
            <param name="controller">The controller that is about to be loaded.</param>
            <param name="fromView">The view that initiated that navigation to the controller.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.OnControllerLoadComplete(MonoCross.Navigation.IMXView,MonoCross.Navigation.IMXController,System.String,System.String)">
            <summary>
            Called when an <see cref="T:MonoCross.Navigation.IMXController"/> instance has finished loading.
            </summary>
            <param name="fromView">The view that initiated the navigation to the controller.</param>
            <param name="controller">The controller that has finished loading.</param>
            <param name="perspective">The view perspective that was returned from the controller.</param>
            <param name="navigatedUri">A <see cref="T:System.String"/> that represents the uri used to navigate to the controller.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.OnControllerLoadFailed(MonoCross.Navigation.IMXController,System.Exception)">
            <summary>
            Called when an error occurs during the loading of an <see cref="T:MonoCross.Navigation.IMXController"/> instance.
            </summary>
            <param name="controller">The controller that failed to load.</param>
            <param name="ex">The exception that caused loading to fail.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.OnBeginBlockingUserInput">
            <summary>
            Called when the application should begin ignoring any new input from the user.
            This method should be overridden in the platform factory.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.OnStopBlockingUserInput">
            <summary>
            Called when the application should begin accepting user input again.
            This method should be overridden in the platform factory.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.OnOutputView(MonoCross.Navigation.IMXView)">
            <summary>
            Called when an <see cref="T:MonoCross.Navigation.IMXView"/> is ready to be outputted.
            </summary>
            <param name="view">The view to be outputted.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.OnShowLoadIndicator(System.String)">
            <summary>
            Called when the loading indicator should be displayed.
            </summary>
            <param name="title">The text to displayed with the loading indicator.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.OnShowImmediateLoadIndicator">
            <summary>
            Called when the loading sequence has begun.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.OnHideLoadIndicator">
            <summary>
            Called when the loading indicator should be hidden.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.LogUnhandledException(System.Exception)">
            <summary>
            Logs an unhandled exception with a fatal message using the factory's logger.
            </summary>
            <param name="e">The exception that was unhandled.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.ActivateLoadTimer">
            <summary>
            Activates the timer for the load indicator.  The load indicator will be displayed with a default title after the default timeout.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.ActivateLoadTimer(System.String)">
            <summary>
            Activates the timer for the load indicator.  The load indicator will be displayed after the default timeout.
            </summary>
            <param name="title">The title to display on the load indicator.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.ActivateLoadTimer(System.String,System.Double)">
            <summary>
            Activates the timer for the load indicator.  Once the timer has elapsed, the load indicator will be displayed.
            </summary>
            <param name="title">The title to display on the load indicator.</param>
            <param name="delay">The amount of time, in milliseconds, to wait before showing the load indicator.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.HandleNetworkResponse(MonoCross.NetworkResponse)">
            <summary>
            Invokes the <see cref="E:MonoCross.Utilities.Device.OnNetworkResponse"/> event using the specified network response.
            </summary>
            <param name="networkResponse">The network response from a previous request.</param>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.LastActivityDate">
            <summary>
            Gets the date and time of the last action that occurred.
            </summary>
            <value>The last action date.</value>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Targets.TargetFactory"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.Initialize(iFactr.Core.Targets.TargetFactory)">
            <summary>
            Initializes the singleton factory instance.
            </summary>
            <param name="newInstance">The singleton factory instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="newInstance"/> is <c>null</c>.</exception>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.Initialize(iFactr.Core.Targets.TargetFactory,iFactr.Core.iApp)">
            <summary>
            Initializes the singleton factory instance with the specified <see cref="T:iFactr.Core.iApp"/> instance.
            </summary>
            <param name="newInstance">The singleton factory instance.</param>
            <param name="app">The <see cref="T:iFactr.Core.iApp"/> instance to initialize the factory with.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="newInstance"/> is <c>null</c>.</exception>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.IsInitialized">
            <summary>
            Gets whether the singleton factory instance has been initialized.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.Style">
            <summary>
            Gets or sets the factory style.  This style differs between platforms
            and is used when an application style has not been set.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.TheApp">
            <summary>
            Gets or sets the iFactr application on the factory.
            </summary>
            <value>The application as an <see cref="T:iFactr.Core.iApp"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.ShouldNavigateFromLayer">
            <summary>
            Gets or sets the delegate to be executed when a layer is being navigated away from.
            </summary>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.OutputLayer(iFactr.Core.Layers.iLayer)">
            <summary>
            Renders the specified <see cref="T:iFactr.Core.Layers.iLayer"/> instance on the screen.
            </summary>
            <param name="layer">A <see cref="T:iFactr.Core.Layers.iLayer"/> representing the Layer value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="layer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.OutputLayer(iFactr.Core.Layers.iLayer,System.String)">
            <summary>
            Renders the specified <see cref="T:iFactr.Core.Layers.iLayer"/> instance on the screen.
            </summary>
            <param name="layer">A <see cref="T:iFactr.Core.Layers.iLayer"/> representing the Layer value.</param>
            <param name="navigatedUri">A <see cref="T:System.String"/> that represents the uri used to navigate to the layer.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="layer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.OutputLayerResponse(MonoCross.NetworkResponse)">
            <summary>
            Outputs a layer from the specified network response.
            </summary>
            <param name="response">The network response from which to output a layer.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.LoadLayer(iFactr.Core.Layers.iLayer,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the specified layer with the specified parameters.
            </summary>
            <param name="navLayer">The <see cref="T:iFactr.Core.Layers.iLayer"/> instance to load.</param>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing the parameters to pass to the layer's Load method.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.LoadLayer(MonoCross.Navigation.IMXView,iFactr.Core.Layers.iLayer,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the specified layer with the specified parameters.
            </summary>
            <param name="fromView">The <see cref="T:MonoCross.Navigation.IMXView"/> instance from which the navigation was initiated.</param>
            <param name="navLayer">The <see cref="T:iFactr.Core.Layers.iLayer"/> instance to load.</param>
            <param name="navigatedUri">A <see cref="T:System.String"/> that represents the uri used to navigate to the layer.</param>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing the parameters to pass to the layer's Load method.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.OnOrientationChanged(iFactr.Core.iApp.Orientation)">
            <summary>
            Called when the device changes orientation.
            </summary>
            <param name="orientation">The new device orientation.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.GetDisplayScale">
            <summary>
            Gets a value for scaling calculations on absolute pixels.
            </summary>
            <returns>A value for scaling a pixel value into a display-independent pixel.</returns>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.Redirect(System.String)">
            <summary>
            Cancels loading of the current controller and navigates to the specified url.
            </summary>
            <param name="url">The url of the controller to navigate to.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.RetrieveImage(System.String)">
            <summary>
            Returns the path of the file that is associated with the specified ID.
            </summary>
            <param name="id">The ID of the file to get the path of.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.SetNotification(iFactr.Core.INotification)">
            <summary>
            Sends the specified notification to the device's notification system.
            </summary>
            <param name="notification">The notification to send.</param>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.ShouldNavigate(iFactr.Core.Controls.Link,iFactr.UI.Pane,System.Action)">
            <summary>
            Called when a layer is being navigated away from.
            </summary>
            <param name="link">The link that is being navigated to.</param>
            <param name="pane">The pane of the layer that is being navigated away from.</param>
            <param name="handler">The action to invoke if navigation should continue.</param>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.ApplicationPath">
            <summary>
            Gets the path for application assets.
            </summary>
            <value>The application path as a <see cref="T:System.String"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.DataPath">
            <summary>
            Gets the path for application data.
            </summary>
            <value>The data path as a <see cref="T:System.String"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.DeviceId">
            <summary>
            Gets a unique identifier for the device running the application.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.LargeFormFactor">
            <summary>
            Gets whether the factory is running on a large form-factor device.
            </summary>
            <value><c>true</c> if the device is large form factor; otherwise <c>false</c>.</value>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.NetworkGetMethod">
            <summary>
            Gets or sets the restrictions to impose on network GET methods.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.NetworkPostMethod">
            <summary>
            Gets or sets the restrictions to impose on network POST methods.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.SessionDataPath">
            <summary>
            Gets the session-scoped path for application data.
            </summary>
            <value>The data path as a <see cref="T:System.String"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.SessionDataRoot">
            <summary>
            Gets the session-scoped root path for application data.
            </summary>
            <value>The data path as a <see cref="T:System.String"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.SessionDataAppend">
            <summary>
            Gets or sets the session-scoped appended path for application data.
            </summary>
            <value>The data path as a <see cref="T:System.String"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.TempPath">
            <summary>
            Gets the path for temporary application data.  The contents of this path are removed on application startup.
            </summary>
            <value>The temp path as a <see cref="T:System.String"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.Logger">
            <summary>
            Gets the application's logging utility.
            </summary>
            <remarks>The default ILog implementation is the NullLogger</remarks>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.File">
            <summary>
            Gets the application's file system interface.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.Encryption">
            <summary>
            Gets the application's data encryptor.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.Compositor">
            <summary>
            Gets the application's image compositor.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.Thread">
            <summary>
            Gets the application's threading utility.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.Network">
            <summary>
            Gets the application's networking utility.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.Session">
            <summary>
            Gets the application's session settings.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.Settings">
            <summary>
            Gets the application's settings.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.Config">
            <summary>
            Gets the application's configuration settings.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.Platform">
            <summary>
            Gets the platform that the factory is running on.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.Target">
            <summary>
            Gets the target that the factory is running on.
            </summary>
        </member>
        <member name="P:iFactr.Core.Targets.TargetFactory.LanguageCode">
            <summary>
            Gets or sets the language code to use for localization.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is <c>null</c> or an empty string.</exception>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.GetResourceString(System.String)">
            <summary>
            Returns a localized string with the specified name from a string resource file.
            If no appropriate string is found, null is returned.
            </summary>
            <param name="name">The name of the localized string to return.</param>
            <seealso href="http://support.ifactr.com/kb/utilities/localization"/>
        </member>
        <member name="M:iFactr.Core.Targets.TargetFactory.GetLineHeight(iFactr.UI.Font)">
            <summary>
            Measures the amount of space that a single line of text will take up when it is rendered with the specified font.
            </summary>
            <param name="font">The <see cref="T:iFactr.UI.Font"/> with which to measure a line of text.</param>
            <returns>The render height of the string.</returns>
        </member>
        <member name="T:iFactr.Core.Native.NativeFactory">
            <summary>
            Represents a binding factory for native targets.  This class is abstract.
            <para></para>
            </summary>
            <remarks>
            <para><img src="Diagrams\NativeFactory.cd"/></para></remarks>
        </member>
        <member name="M:iFactr.Core.Native.NativeFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Native.NativeFactory"/> class.
            </summary>
        </member>
        <member name="P:iFactr.Core.Native.NativeFactory.TempPath">
            <summary>
            Gets the path for temporary application data.  The contents of this path are emptied on application startup.
            </summary>
            <value>The temporary data path as a <see cref="T:System.String"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.Native.NativeFactory.Config">
            <summary>
            Gets the application configuration settings.
            </summary>
        </member>
        <member name="F:iFactr.Core.Native.NativeFactory._config">
            <summary>
            The application configuration settings.
            </summary>
        </member>
        <member name="F:iFactr.Core.Native.NativeFactory._compositor">
            <summary>
            The application's image compositor.
            </summary>
        </member>
        <member name="P:iFactr.Core.Native.NativeFactory.Settings">
            <summary>
            Gets the current application settings.
            </summary>
        </member>
        <member name="F:iFactr.Core.Native.NativeFactory._settings">
            <summary>
            The current application settings.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.CompositeLayout">
            <summary>
            The layout of a large form-factor composite layer.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.CompositeLayout.OneColumn">
            <summary>
            The composite layer is to be displayed in a single column.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.CompositeLayout.TwoColumns">
            <summary>
            The composite layer is to be displayed in two columns.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.LayerLayout">
            <summary>
            Available layer layout options.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.LayerLayout.Rounded">
            <summary>
            The layer's content has rounded corners. Not all platforms support this.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.LayerLayout.EdgetoEdge">
            <summary>
            The layer's content fills the screen from edge to edge.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.ContentItem">
            <summary>
            Represents a navigation element with a fixed height and multiple lines of text and subtext.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.ContentItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ContentItem"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.ContentItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ContentItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.ContentItem.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ContentItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="M:iFactr.Core.Layers.ContentItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ContentItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.ContentItem.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ContentItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="T:iFactr.Core.Layers.ICustomItem">
            <summary>
            Defines a custom <see cref="T:iFactr.Core.Layers.iItem"/> or <see cref="T:iFactr.Core.Forms.Field"/> class.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.MessageItem">
            <summary>
            Represents a navigation element with a fixed height and several labels ideal for displaying messages.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.MessageItem.MessageText">
            <summary>
            Gets or sets a two-line message text that is displayed underneath the subtext.
            </summary>
            <value>The message text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.MessageItem.DateText">
            <summary>
            Gets or sets the text displayed next to the primary text.  If the primary text is too long, this text may be truncated.
            This text is ideal for displaying date information.
            </summary>
            <value>The date text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Layers.MessageItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.MessageItem"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.MessageItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.MessageItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.MessageItem.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.MessageItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="M:iFactr.Core.Layers.MessageItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.MessageItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.MessageItem.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.MessageItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="M:iFactr.Core.Layers.MessageItem.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.MessageItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
            <param name="dateText">A <see cref="T:System.String"/> representing the Date text value.</param>
            <param name="messageText">A <see cref="T:System.String"/> representing the Message text value.</param>
        </member>
        <member name="T:iFactr.Core.Layers.MultiLineSubtextItem">
            <summary>
            Represents a navigation element with variable height, a single line of text, and multiple lines of subtext.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.MultiLineSubtextItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.MultiLineSubtextItem"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.MultiLineSubtextItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.MultiLineSubtextItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.MultiLineSubtextItem.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.MultiLineSubtextItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="T:iFactr.Core.Layers.PhotoItem">
            <summary>
            Represents a navigation element that displays an image.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.PhotoItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.PhotoItem"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.PhotoItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.PhotoItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.PhotoItem.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.PhotoItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="M:iFactr.Core.Layers.PhotoItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.PhotoItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.PhotoItem.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.PhotoItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="T:iFactr.Core.Layers.RightSubtextItem">
            <summary>
            Represents a navigation element with a fixed height and subtext that is right-aligned.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.RightSubtextItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.RightSubtextItem"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.RightSubtextItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.RightSubtextItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.RightSubtextItem.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.RightSubtextItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="T:iFactr.Core.Layers.ShopItem">
            <summary>
            Represents a navigation element with a fixed height and
            labels for displaying information about a retail product.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.ShopItem.Toptext">
            <summary>
            Gets or sets the text above the primary text.  This is ideal for displaying information such as the product owner.
            </summary>
            <value>The top text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.ShopItem.StarRating">
            <summary>
            Gets or sets an optional value between -1 and 5, rounded to the nearest half,
            that determines how many stars will be filled in.
            A value below 0 means the star rating will not be displayed.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.ShopItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ShopItem"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.ShopItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ShopItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.ShopItem.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ShopItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="M:iFactr.Core.Layers.ShopItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ShopItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.ShopItem.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ShopItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="M:iFactr.Core.Layers.ShopItem.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ShopItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
            <param name="topText">A <see cref="T:System.String"/> representing the Top text value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.ShopItem.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ShopItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
            <param name="topText">A <see cref="T:System.String"/> representing the Top text value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="T:iFactr.Core.Layers.SubtextBelowAndBesideItem">
            <summary>
            Represents a navigation element with a fixed height and two sets of subtext, one below the primary text and one beside it.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.SubtextBelowAndBesideItem.BesideText">
            <summary>
            Gets or sets the text to display beside the primary text.
            </summary>
            <value>The text beside the primary text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Layers.SubtextBelowAndBesideItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.SubtextBelowAndBesideItem"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.SubtextBelowAndBesideItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.SubtextBelowAndBesideItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.SubtextBelowAndBesideItem.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.SubtextBelowAndBesideItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="M:iFactr.Core.Layers.SubtextBelowAndBesideItem.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.SubtextBelowAndBesideItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
            <param name="besideText">A <see cref="T:System.String"/> representing the Beside text value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.SubtextBelowAndBesideItem.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.SubtextBelowAndBesideItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
            <param name="besideText">A <see cref="T:System.String"/> representing the Beside text value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="T:iFactr.Core.Layers.SubtextItem">
            <summary>
            Represents a navigation element with a fixed height and subtext that is underneath the primary text.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.SubtextItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.SubtextItem"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.SubtextItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.SubtextItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.SubtextItem.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.SubtextItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="T:iFactr.Core.Layers.VariableContentItem">
            <summary>
            Represents a navigation element with a variable height and multiple lines of text and subtext.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.VariableContentItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.VariableContentItem"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.VariableContentItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.VariableContentItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.VariableContentItem.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.VariableContentItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="M:iFactr.Core.Layers.VariableContentItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.VariableContentItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.VariableContentItem.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.VariableContentItem"/> class.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the Link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the Text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the Subtext value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="T:iFactr.Core.Layers.iItem">
            <summary>
            Represents a navigation element within an <see cref="T:iFactr.Core.Layers.iList"/> or <see cref="T:iFactr.Core.Layers.iMenu"/>.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iItem.Text">
            <summary>
            Gets or sets the primary display text for this instance.
            </summary>
            <value>The text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iItem.Subtext">
            <summary>
            Gets or sets the secondary display text for this instance.
            </summary>
            <value>The subtext as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iItem.Icon">
            <summary>
            Gets or sets an icon to display next to the text for this instance.
            </summary>
            <value>The icon as an <see cref="P:iFactr.Core.Layers.iItem.Icon"/>.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iItem.Link">
            <summary>
            Gets or sets the link to navigate to when this instance is selected.
            </summary>
            <value>The link as a <see cref="P:iFactr.Core.Layers.iItem.Link"/>.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iItem.Button">
            <summary>
            Gets or sets a secondary link, generally displayed as a button, that this instance can alternatively navigate to.
            </summary>
            <value>The button as a <see cref="P:iFactr.Core.Layers.iItem.Button"/>.</value>
        </member>
        <member name="M:iFactr.Core.Layers.iItem.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iItem"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iItem.#ctor(iFactr.Core.Controls.Link,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iItem"/> class using the link and text provided.
            </summary>
            <param name="link">A <see cref="P:iFactr.Core.Layers.iItem.Link"/> representing the link to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iItem.#ctor(iFactr.Core.Controls.Link,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iItem"/> class using the link, text, and async value provided.
            </summary>
            <param name="link">A <see cref="P:iFactr.Core.Layers.iItem.Link"/> representing the link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iItem"/> class using the link address and text provided.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iItem.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iItem"/> class using the link address, text, and async value provided.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iItem"/> class using the link address, text, and subtext provided.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the subtext value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iItem.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iItem"/> class using the link address, text, sub text, and async value provided.
            </summary>
            <param name="linkAddress">A <see cref="T:System.String"/> representing the link address to navigate to when selected.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text value.</param>
            <param name="subText">A <see cref="T:System.String"/> representing the subtext value.</param>
            <param name="async">If <c>true</c>, sets the link rev value to Async.</param>
        </member>
        <member name="T:iFactr.Core.Layers.IHtmlText">
            <summary>
            Defines a control that accepts HTML strings.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.IHtmlText.Text">
            <summary>
            Gets or sets a string of HTML.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.IHtmlText.Items">
            <summary>
            Gets or sets a collection of HTML-building items.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.HtmlTextExtensions">
            <summary>
            Represents methods for appending HTML strings to an HTML control.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.Append(iFactr.Core.Layers.IHtmlText,System.String)">
            <summary>
            Appends the specified text.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text to append.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.AppendLine(iFactr.Core.Layers.IHtmlText)">
            <summary>
            Appends a line break.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.AppendLine(iFactr.Core.Layers.IHtmlText,System.String)">
            <summary>
            Appends the specified text, followed by a line break.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text to append.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.AppendBold(iFactr.Core.Layers.IHtmlText,System.String)">
            <summary>
            Appends the specified text with bold formatting.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text to append.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.AppendBoldLine(iFactr.Core.Layers.IHtmlText,System.String)">
            <summary>
            Appends the specified text with bold formatting, followed by a line break.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text to append.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.AppendItalic(iFactr.Core.Layers.IHtmlText,System.String)">
            <summary>
            Appends the specified text with italic formatting.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text to append.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.AppendItalicLine(iFactr.Core.Layers.IHtmlText,System.String)">
            <summary>
            Appends the specified text with italic formatting, followed by a line break.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text to append.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.AppendBoldItalic(iFactr.Core.Layers.IHtmlText,System.String)">
            <summary>
            Appends the specified text with bold italic formatting.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text to append.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.AppendBoldItalicLine(iFactr.Core.Layers.IHtmlText,System.String)">
            <summary>
            Appends the specified text with bold italic formatting, followed by a line break.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text to append.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.AppendHorizontalRule(iFactr.Core.Layers.IHtmlText)">
            <summary>
            Appends a horizontal rule.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.AppendHeading(iFactr.Core.Layers.IHtmlText,System.String)">
            <summary>
            Appends a heading with the specified text.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text to append.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.AppendSubHeading(iFactr.Core.Layers.IHtmlText,System.String)">
            <summary>
            Appends a sub heading with the specified text.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text to append.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.AppendSecondarySubHeading(iFactr.Core.Layers.IHtmlText,System.String)">
            <summary>
            Appends a secondary sub heading with the specified text.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text to append.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.InsertImage(iFactr.Core.Layers.IHtmlText,System.String,System.String,System.String)">
            <summary>
            Inserts an inlined image.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="imageSource">A <see cref="T:System.String"/> representing the image source value.</param>
            <param name="maxHeight">The maximum height of the image.</param>
            <param name="maxWidth">The maximum width of the image.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.InsertImage(iFactr.Core.Layers.IHtmlText,System.String)">
            <summary>
            Inserts an inlined image.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="imageSource">A <see cref="T:System.String"/> representing the image source value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.InsertImage(iFactr.Core.Layers.IHtmlText,System.String,System.String,System.String,System.String)">
            <summary>
            Inserts an inlined image.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="imageSource">A <see cref="T:System.String"/> representing the image source value.</param>
            <param name="alignment">A <see cref="T:System.String"/> representing the image's alignment.</param>
            <param name="maxHeight">The maximum height of the image.</param>
            <param name="maxWidth">The maximum width of the image.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.InsertImage(iFactr.Core.Layers.IHtmlText,System.String,System.String)">
            <summary>
            Inserts an inlined image.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="imageSource">A <see cref="T:System.String"/> representing the image source value.</param>
            <param name="alignment">A <see cref="T:System.String"/> representing the image's alignment.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.InsertImageLink(iFactr.Core.Layers.IHtmlText,System.String,System.String)">
            <summary>
            Inserts an inlined image with a link attached to it.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="imageSource">A <see cref="T:System.String"/> representing the image source value.</param>
            <param name="url">A <see cref="T:System.String"/> representing the URL to navigate to when the image is selected.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.InsertImageFloatLeft(iFactr.Core.Layers.IHtmlText,System.String,System.String,System.String)">
            <summary>
            Inserts an image floating to the left.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="imageSource">A <see cref="T:System.String"/> representing the image source value.</param>
            <param name="maxHeight">The maximum height of the image.</param>
            <param name="maxWidth">The maximum width of the image.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.InsertImageFloatLeft(iFactr.Core.Layers.IHtmlText,System.String)">
            <summary>
            Inserts an image floating to the left.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="imageSource">A <see cref="T:System.String"/> representing the image source value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.InsertImageFloatRight(iFactr.Core.Layers.IHtmlText,System.String,System.String,System.String)">
            <summary>
            Inserts an image floating to the right.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="imageSource">A <see cref="T:System.String"/> representing the image source value.</param>
            <param name="maxHeight">The maximum height of the image.</param>
            <param name="maxWidth">The maximum width of the image.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.InsertImageFloatRight(iFactr.Core.Layers.IHtmlText,System.String)">
            <summary>
            Inserts an image floating to the right.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="imageSource">A <see cref="T:System.String"/> representing the image source value.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.AppendLink(iFactr.Core.Layers.IHtmlText,iFactr.UI.Link)">
            <summary>
            Appends an inlined link.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="link">A <see cref="T:iFactr.UI.Link"/> representing the link to append.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.AppendEmail(iFactr.Core.Layers.IHtmlText,System.String)">
            <summary>
            Appends an inlined email (mailto:) link.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="email">A <see cref="T:System.String"/> representing the email address to create the link for.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.AppendTelephone(iFactr.Core.Layers.IHtmlText,System.String)">
            <summary>
            Appends an inlined telephone (tel:) link.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="telephone">A <see cref="T:System.String"/> representing the telephone number to create the link for.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.AppendLabeledTextLine(iFactr.Core.Layers.IHtmlText,System.String,System.String)">
            <summary>
            Appends the specified label with bold formatting and a colon, followed by the text with normal formatting, followed by a line break.
            </summary>
            <param name="htmlText">An <see cref="T:iFactr.Core.Layers.IHtmlText"/> representing the HTML control.</param>
            <param name="label">A <see cref="T:System.String"/> representing the label to append with bold formatting.</param>
            <param name="text">A <see cref="T:System.String"/> representing the text to append with normal formatting.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HtmlTextExtensions.VirtualPath(System.String)">
            <summary>
            Converts the specified path into a virtual directory path and returns the result.
            </summary>
            <param name="path">The path to convert to a virtual directory path.</param>
            <returns>The virtual directory path.</returns>
        </member>
        <member name="T:iFactr.Core.Layers.Map">
            <summary>
            Represents a geographical map on an <see cref="T:iFactr.Core.Layers.iLayer"/>.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.Map.Location">
            <summary>
            Gets or sets the initial start location.
            </summary>
            <value>The location as a <see cref="T:iFactr.Core.Layers.Map.GeoCoords"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.Layers.Map.Annotations">
            <summary>
            Gets or sets the annotations of multiple points to be marked on the map.
            </summary>
            <value>The annotations as a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:iFactr.Core.Layers.Map.GeoCoords"/>.</value>
        </member>
        <member name="P:iFactr.Core.Layers.Map.Type">
            <summary>
            Gets or sets the type of map.
            </summary>
            <value>The type of the map as a <see cref="T:iFactr.Core.Layers.Map.Types"/> value.</value>
        </member>
        <member name="T:iFactr.Core.Layers.Map.Types">
            <summary>
            The available types of map.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.Map.Types.Map">
            <summary>
            A map with only basic components such as roads and landmarks.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.Map.Types.Satellite">
            <summary>
            A map that is laid out with satellite imagery.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.Map.Types.Hybrid">
            <summary>
            A map with basic components overlaid on top of satellite imagery.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.Map.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Map"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.Map.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Map"/> class.
            </summary>
            <param name="lat">The latitude coordinates.</param>
            <param name="lng">The longitude coordinates.</param>
        </member>
        <member name="M:iFactr.Core.Layers.Map.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Map"/> class.
            </summary>
            <param name="lat">The latitude coordinates.</param>
            <param name="lng">The longitude coordinates.</param>
        </member>
        <member name="T:iFactr.Core.Layers.Map.GeoCoords">
            <summary>
            Represents a point with latitudinal and longitudinal coordinates.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.Map.GeoCoords.Lat">
            <summary>
            The latitude coordinates.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.Map.GeoCoords.Long">
            <summary>
            The longitude coordinates.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.Map.GeoCoords.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Map.GeoCoords"/> struct.
            </summary>
            <param name="lat">The latitude coordinates.</param>
            <param name="lng">The longitude coordinates.</param>
        </member>
        <member name="M:iFactr.Core.Layers.Map.GeoCoords.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Map.GeoCoords"/> struct.
            </summary>
            <param name="lat">The latitude coordinates.</param>
            <param name="lng">The longitude coordinates.</param>
        </member>
        <member name="T:iFactr.Core.Layers.SearchList">
            <summary>
            Represents a list of <see cref="T:iFactr.Core.Layers.iItem"/>s on an <see cref="T:iFactr.Core.Layers.iLayer"/> that is searchable.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.SearchList.ItemsSource">
            <summary>
            The original Items.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.SearchList.SearchText">
            <summary>
            Gets or sets an optional string to prepopulate the search bar with.
            A search will automatically be performed on this string when this instance is displayed.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.SearchList.AutoFocus">
            <summary>
            Gets or sets whether the search bar should automatically receive focus when displayed.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.SearchList.AutoFocusOnEmptyList">
            <summary>
            Gets or sets whether the search bar should automatically receive focus if the list is empty.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.SearchList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.SearchList"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.SearchList.PerformSearch(System.String,System.String)">
            <summary>
            Performs a search of the contents of the list using the term provided and a navigation URI for linking.
            </summary>
            <param name="navigationUri">A <see cref="T:System.String"/> representing the navigation URI value.</param>
            <param name="searchTerm">A <see cref="T:System.String"/> representing the term that is being searched.</param>
        </member>
        <member name="T:iFactr.Core.Layers.iBlock">
            <summary>
            Represents a container for rich text or HTML information on an <see cref="T:iFactr.Core.Layers.iLayer"/>.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iBlock"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iBlock"/> class.
            </summary>
            <param name="header">The header text to display.</param>
        </member>
        <member name="P:iFactr.Core.Layers.iBlock.Name">
            <summary>
            Gets or sets the name of this instance.
            </summary>
            <value>The block name as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iBlock.Text">
            <summary>
            Gets or sets the rich text or HTML to be rendered.
            </summary>
            <value>The text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iBlock.FullSize">
            <summary>
            Gets or sets whether this instance should expand to the far edge of the pane its residing in,
            regardless of the size of its content.
            </summary>
            <value><c>true</c> if this instance is to be displayed full-size; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iBlock.Items">
            <summary>
            Gets or sets a collection of <see cref="T:iFactr.Core.Controls.IBlockPanelItem"/>s to populate this instance with.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iBlock.HtmlSource">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iBlock.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.iBlock.CloneOverride">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="T:iFactr.Core.Layers.iCollection`1">
            <summary>
            Represents a base class for layer items that serve as collections, including <see cref="T:iFactr.Core.Forms.Fieldset"/>s, <see cref="T:iFactr.Core.Layers.iList"/>s, and <see cref="T:iFactr.Core.Layers.iMenu"/>s.  This class is abstract.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iCollection`1.Name">
            <summary>
            Gets or sets the name of this instance.
            </summary>
            <value>The name as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iCollection`1.Text">
            <summary>
            Gets or sets the header text of this instance.
            </summary>
            <value>The text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iCollection`1.Items">
            <summary>
            Gets or sets a collection of <typeparamref name="T"/> to render as a group on the layer.
            </summary>
            <value>
            The items as an <see cref="T:iFactr.UI.ItemsCollection`1"/> instance.
            </value>
        </member>
        <member name="P:iFactr.Core.Layers.iCollection`1.Count">
            <summary>
            Gets the number of items in the Items collection.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iCollection`1.IsReadOnly">
            <summary>
            Gets whether the Items collection is readonly.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index of the Items collection.
            </summary>
            <param name="index">The index of the Items collection.</param>
        </member>
        <member name="T:iFactr.Core.Layers.iCollection`1.SelectEventHandler">
            <summary>
            Represents the method that will handle any selection event.
            </summary>
        </member>
        <member name="E:iFactr.Core.Layers.iCollection`1.OnItemSelection">
            <summary>
            Occurs when an item is selected.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iCollection`1.HasSelectEventHandler">
            <summary>
            Gets a value indicating whether this instance has a selection event handler.
            </summary>
            <value>
            <c>true</c> if this instance has a selection event handler; otherwise <c>false</c>.
            </value>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iCollection"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.Add(`0)">
            <summary>
            Adds an element of type <typeparamref name="T"/> to the Items collection.
            </summary>
            <param name="item">The element instance to add.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of <typeparamref name="T"/> to the Items collection.
            </summary>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.Clear">
            <summary>
            Removes all items from the Items collection.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.Contains(`0)">
            <summary>
            Returns whether the Items collection contains the given item.
            </summary>
            <param name="item">The item to check for.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items of the Items collection to the given array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index of the Items collection at which to begin copying.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the first occurrence of the given item.
            </summary>
            <param name="item">The item to get the index of.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element of type <typeparamref name="T"/> into the Items collection at the specified index.
            </summary>
            <param name="index">The index at which the element should be inserted.</param>
            <param name="item">The element to insert.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a collection of elements into the Items collection at the specified index.
            </summary>
            <param name="index">The index at which the elements in the collection should be inserted.</param>
            <param name="items">The elements to insert.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.Remove(`0)">
            <summary>
            Removes an element from the Items collection.
            </summary>
            <param name="item">The element to remove.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the Items collection.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items from the Items collection.
            </summary>
            <param name="index">The starting index of the range of items to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator for the Items collections.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the Items collections.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.ItemSelected(`0)">
            <summary>
            Selects the specified item.
            </summary>
            <param name="item">The item to select.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.iCollection`1.CloneOverride">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="T:iFactr.Core.Layers.iCollection">
            <summary>
            Represents a base class for layer items that serve as <see cref="T:iFactr.Core.Layers.iItem" /> collections, including <see cref="T:iFactr.Core.Layers.iList"/>s and <see cref="T:iFactr.Core.Layers.iMenu"/>s. This class is abstract.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.iLayerItem">
            <summary>
            Represents the base implementation of an iLayer item.  This class is abstract.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iLayerItem.Header">
            <summary>
            Gets or sets the header text.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iLayerItem.Footer">
            <summary>
            Gets or sets the footer text.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iLayerItem.GetLayerStyle(iFactr.Core.Styles.Style)">
            <summary>
            Returns a string representation of the specified style's background color.
            </summary>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> containing the background color to return a string representation of.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iLayerItem.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.iLayerItem.CloneOverride">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.iLayerItem.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the <c>IXmlSerializable</c> interface,
            you should return <c>null</c> (<c>Nothing</c> in Visual Basic) from this method, and instead, if specifying 
            a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.iLayerItem.ReadXml``1(System.Xml.XmlReader,System.Collections.Generic.IList{``0})">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <typeparam name="T">The type of elements in the <paramref name="items"/> collection.</typeparam>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
            <param name="items">A collection of <typeparamref name="T"/> to populate.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iLayerItem.WriteXml``1(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <typeparam name="T">The type of elements in the <paramref name="items"/> collection.</typeparam>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
            <param name="items">A collection of <typeparamref name="T"/> to write.</param>
        </member>
        <member name="T:iFactr.Core.Layers.iList">
            <summary>
            Represents a list of <see cref="T:iFactr.Core.Layers.iItem"/>s on an <see cref="T:iFactr.Core.Layers.iLayer"/>.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.iList.StyleTypes">
            <summary>
            The available list style types.
            </summary>
            <remarks>
            This enumeration is scheduled for deprecation in iFactr version 2.0.
            </remarks>
        </member>
        <member name="F:iFactr.Core.Layers.iList.StyleTypes.Simple">
            <summary>
            Simple formatting.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.iList.StyleTypes.SimpleWrap">
            <summary>
            Simple formatting w/word wrap of text.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.iList.StyleTypes.SubtextBelow">
            <summary>
            Forces subtext to be displayed below text.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.iList.StyleTypes.SubtextBeside">
            <summary>
            Forces subtext to be displayed beside text.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.iList.StyleTypes.Content">
            <summary>
            Content formatting.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.iList.StyleTypes.HeaderContent">
            <summary>
            Header content formatting.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.iList.StyleTypes.HeaderWrapContent">
            <summary>
            Header content formatting w/word wrap of text.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.iList.StyleTypes.Store">
            <summary>
            Store item formatting.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iList.DisplayStyle">
            <summary>
            Gets or sets the display style.
            </summary>
            <value>The display style as a <see cref="T:iFactr.Core.Layers.iList.StyleTypes"/> instance.</value>
        </member>
        <member name="M:iFactr.Core.Layers.iList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iList"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iList"/> class.
            </summary>
            <param name="header">The header text to display.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iList.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.iMenu">
            <summary>
            Represents a menu of <see cref="T:iFactr.Core.Layers.iItem"/>s on an <see cref="T:iFactr.Core.Layers.iLayer"/>.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iMenu.ID">
            <summary>
            Gets or sets the menu ID.
            </summary>
            <value>The ID as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iMenu.Style">
            <summary>
            Gets or sets the menu style.
            </summary>
            <value>The style as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Layers.iMenu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iMenu"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iMenu.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iMenu"/> class.
            </summary>
            <param name="header">The header text to display.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iMenu.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.iPagedList">
            <summary>
            Represents a paginated list of <see cref="T:iFactr.Core.Layers.iItem"/>s on an <see cref="T:iFactr.Core.Layers.iLayer"/>.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iPagedList.PageSize">
            <summary>
            Gets or sets the maximum number of items to allow on a single page.
            </summary>
            <value>The page size as a <see cref="T:System.Int32"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iPagedList.PagedLayerID">
            <summary>
            Gets or sets a value that is used by bindings to cache pages for pagination support.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iPagedList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iPagedList"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iPagedList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iPagedList"/> class.
            </summary>
            <param name="name">The name of this instance.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iPagedList.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iPagedList"/> class.
            </summary>
            <param name="name">The name of this instance.</param>
            <param name="pageSize">The maximum number of items to allow on a single page.</param>
        </member>
        <member name="T:iFactr.Core.Layers.iPanel">
            <summary>
            Represents a container for rich text or HTML information on an <see cref="T:iFactr.Core.Layers.iLayer"/>.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iPanel"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iPanel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iPanel"/> class.
            </summary>
            <param name="header">The header text to display.</param>
        </member>
        <member name="P:iFactr.Core.Layers.iPanel.Title">
            <summary>
            Gets or sets the header text.
            </summary>
            <value>The header text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iPanel.Text">
            <summary>
            Gets or sets the rich text or HTML to be rendered.
            </summary>
            <value>The text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iPanel.Style">
            <summary>
            Gets or sets the style of this instance.
            </summary>
            <value>The style as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iPanel.Image">
            <summary>
            Gets or sets an image to place within this instance.
            </summary>
            <value>The image as a <see cref="T:iFactr.Core.Controls.Icon"/>.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iPanel.FullSize">
            <summary>
            Gets or sets whether this instance should expand to the far edge of the pane its residing in,
            regardless of the size of its content.
            </summary>
            <value><c>true</c> if this instance is to be displayed full-size; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iPanel.Items">
            <summary>
            Gets or sets a collection of <see cref="T:iFactr.Core.Controls.IBlockPanelItem"/>s to populate this instance with.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iPanel.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.iPanel.CloneOverride">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="T:iFactr.Core.Layers.Gesture">
            <summary>
            Represents a mechanism for accepting keyboard input through keystrokes.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.Gesture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Gesture"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.Gesture.#ctor(iFactr.Core.Layers.Keystroke)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Gesture"/> class.
            </summary>
            <param name="stroke1">The first keystroke to add.</param>
        </member>
        <member name="M:iFactr.Core.Layers.Gesture.#ctor(iFactr.Core.Layers.Keystroke,iFactr.Core.Layers.Keystroke)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Gesture"/> class.
            </summary>
            <param name="stroke1">The first keystroke to add.</param>
            <param name="stroke2">The second keystroke to add.</param>
        </member>
        <member name="M:iFactr.Core.Layers.Gesture.op_Equality(iFactr.Core.Layers.Gesture,iFactr.Core.Layers.Gesture)">
            <summary>
            Tests for equality between two <see cref="T:iFactr.Core.Layers.Gesture"/> instances.
            </summary>
            <param name="gesture1">The first gesture to test.</param>
            <param name="gesture2">The second gesture to test.</param>
            <returns><c>true</c> if the gestures are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.Gesture.op_Inequality(iFactr.Core.Layers.Gesture,iFactr.Core.Layers.Gesture)">
            <summary>
            Tests for inequality between two <see cref="T:iFactr.Core.Layers.Gesture"/> instances.
            </summary>
            <param name="gesture1">The first gesture to test.</param>
            <param name="gesture2">The second gesture to test.</param>
            <returns><c>true</c> if the gestures are not equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.Gesture.Equals(System.Object)">
            <summary>
            Determines if the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to test for equality.</param>
            <returns><c>true</c> if the object is equal to this instance; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.Gesture.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.Keystroke">
            <summary>
            Represents a combination of keyboard keys that can be pressed simultaneously to invoke an action.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.Keystroke.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Keystroke"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.Keystroke.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Keystroke"/> class.
            </summary>
            <param name="key1">An <see cref="T:System.Int32"/> representing the keyboard key that must be pressed.</param>
        </member>
        <member name="M:iFactr.Core.Layers.Keystroke.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Keystroke"/> class.
            </summary>
            <param name="key1">An <see cref="T:System.Int32"/> representing the first keyboard key that must be pressed.</param>
            <param name="key2">An <see cref="T:System.Int32"/> representing the second keyboard key that must be pressed.</param>
        </member>
        <member name="M:iFactr.Core.Layers.Keystroke.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Keystroke"/> class.
            </summary>
            <param name="key1">An <see cref="T:System.Int32"/> representing the first keyboard key that must be pressed.</param>
            <param name="key2">An <see cref="T:System.Int32"/> representing the second keyboard key that must be pressed.</param>
            <param name="key3">An <see cref="T:System.Int32"/> representing the third keyboard key that must be pressed.</param>
        </member>
        <member name="M:iFactr.Core.Layers.Keystroke.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Keystroke"/> class.
            </summary>
            <param name="key1">An <see cref="T:System.Int32"/> representing the first keyboard key that must be pressed.</param>
            <param name="key2">An <see cref="T:System.Int32"/> representing the second keyboard key that must be pressed.</param>
            <param name="key3">An <see cref="T:System.Int32"/> representing the third keyboard key that must be pressed.</param>
            <param name="key4">An <see cref="T:System.Int32"/> representing the fourth keyboard key that must be pressed.</param>
        </member>
        <member name="M:iFactr.Core.Layers.Keystroke.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Keystroke"/> class.
            </summary>
            <param name="keys">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Int32"/> representing the keyboard keys that must be pressed.</param>
        </member>
        <member name="M:iFactr.Core.Layers.Keystroke.op_Equality(iFactr.Core.Layers.Keystroke,iFactr.Core.Layers.Keystroke)">
            <summary>
            Tests for equality between two <see cref="T:iFactr.Core.Layers.Keystroke"/> instances.
            </summary>
            <param name="stroke1">The first keystroke to test.</param>
            <param name="stroke2">The second keystroke to test.</param>
            <returns><c>true</c> if the keystrokes are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.Keystroke.op_Inequality(iFactr.Core.Layers.Keystroke,iFactr.Core.Layers.Keystroke)">
            <summary>
            Tests for inequality between two <see cref="T:iFactr.Core.Layers.Keystroke"/> instances.
            </summary>
            <param name="stroke1">The first keystroke to test.</param>
            <param name="stroke2">The second keystroke to test.</param>
            <returns><c>true</c> if the keystrokes are not equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.Keystroke.Equals(System.Object)">
            <summary>
            Determines if the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to test for equality.</param>
            <returns><c>true</c> if the object is equal to this instance; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.Keystroke.GetHashCode">
            <summary>
            Returns the hash code of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.Shortcuts">
            <summary>
            Represents a collection of keyboard shortcuts that initiate navigations when the appropriate keys are pressed.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.Shortcuts.Add(iFactr.Core.Layers.Keystroke,iFactr.Core.Controls.Link)">
            <summary>
            Adds a keystroke and a link to the collection of shortcuts.
            </summary>
            <param name="key">The keys to press to initiate the navigation.</param>
            <param name="value">The link to navigate to when the keys are pressed.</param>
        </member>
        <member name="T:iFactr.Core.Layers.Browser">
            <summary>
            Represents a layer for displaying local or web-based content.
            </summary>
            <remarks>
            Browser layers are used to navigate to and display external content from within the application.  
            </remarks>
        </member>
        <member name="P:iFactr.Core.Layers.Browser.Url">
            <summary>
            Gets or sets the URL to navigate to.
            </summary>
            <value>The URL as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Layers.Browser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Browser"/> class using the navigation URL provided.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.Browser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Browser"/> class using the navigation URL provided.
            </summary>
            <param name="url">A <see cref="T:System.String"/> representing the URL to navigate to.</param>
        </member>
        <member name="T:iFactr.Core.Layers.ContentLayer">
            <summary>
            Represents a layer that is specialized in displaying multimedia content.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.ContentLayer.ContentUri">
            <summary>Gets or sets the <see cref="T:System.Uri"/> of the content to display.</summary>
            <value>The <see cref="T:System.Uri"/> of the content to display.</value>
            <remarks>The <see cref="P:iFactr.Core.Layers.ContentLayer.ContentType"/> property comes from this value.</remarks>
        </member>
        <member name="T:iFactr.Core.Layers.ContentLayer.Content">
            <summary>
            Available type of multimedia content.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.ContentLayer.Content.Unknown">
            <summary>
            The content is of an unknown type.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.ContentLayer.Content.PDF">
            <summary>
            The content is in the Portable Document Format.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.ContentLayer.Content.Video">
            <summary>
            The content is a video.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.ContentLayer.ContentType">
            <summary>
            Gets the <see cref="T:iFactr.Core.Layers.ContentLayer.Content"/> type of this instance.
            </summary>
            <value>The content type as a <see cref="T:iFactr.Core.Layers.ContentLayer.Content"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Layers.ContentLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ContentLayer"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.ContentLayer.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.IDetailLayer">
            <summary>
            Defines a layer that is displayed in the detail pane of a large form-factor device.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.FormLayer">
            <summary>
            Represents a layer that contains form fields for accepting user input.  This class is abstract.
            </summary>
            <remarks>
            the <c>FormLayer </c>class is comprised of form items, or fields, that are used to capture user-provided information. Form Layers provide the basic input views for an iFactr application, and are accessed through the navigation map as any other layer, but a form layer has an action property that specifies the endpoint for submission of form values. Form layers must provide for adequate processing, (save and/or cancel), and may provide validation of fields before processing to an external endpoint. 
            <para> </para>
            <para><b>Using Forms</b></para>
            <para>The iFactr Framework supports user-provided input through the use of Form
            Layers. Form Layers differ from Navigation Layers in a few key areas: </para>
            <para> </para>
            <list type="bullet">
            <item>
            <description>Forms are composed of sets of input (fieldsets), rather than layer
            items</description></item>
            <item>
            <description>Forms cannot contain navigation-layer items, (lists, menus, panels,
            and blocks). </description></item>
            <item>
            <description>A form layer includes an Action property, that defines the
            navigation endpoint, (i.e. Layer), on which the form is processed.
            </description></item>
            <item>
            <description>The form layer fields are included in the parameter dictionary of
            the layer defined on the Action property. </description></item>
            <item>
            <description>Form layer fields can be carried forward in a muti-layer form
            workflow by setting the ActionParameters property on the form.
            </description></item></list>
            <para> </para>
            <para> </para>
            <para><b>Parts of a Form</b> </para>
            <para>iFactr Form Layers are composed of three parts, which form a logical
            structure and enable rich layouts accepting multiple input data types. The three
            parts of a form are: </para>
            <para> </para>
            <list type="bullet">
            <item>
            <description><i>The Form Layer</i> - (represented by the <c>FormLayer </c>class); this container represents the layer itself, and contains the ActionButton property, and Action Parameters dictionary. All form fields are rolled-up from this container and submitted to the Action Layer as a whole. </description></item>
            <item>
            <description><i>One or more Fieldsets</i> - (represented by the Fieldset class);
            a fieldset is a logical grouping of form fields, and has a legend property that
            will display text as a header to the group. A form can contain multiple
            fieldsets allowing you to organize your form however you desire.
            </description></item>
            <item>
            <description><i>One or more Form Fields</i> - (represented by the Field abstract
            class + concrete field types); Fields are the information-gathering controls on
            your form. iFactr currently supports the following Form Fields:
            </description></item></list>
            <para> o <c>BoolField</c> - a dual-state switch field, (i.e. True/False or On/Off) </para>
            <para> o <c>TextField</c> - a single-line of text </para>
            <para> o <c>NumericField</c> - a single line numeric value </para>
            <para> o <c>SelectListField</c> - a select list of pre-defined values </para>
            <para> o <c>MultiLineTextField</c> - multiple lines of text </para>
            <para> o <c>DateField</c> - a date/time value </para>
            <para> o <c>SliderField</c> - a variable slider field, (e.g. volume control)</para>
            <para> o <c>BarcodeField</c> - a barcode scanning field (translates to numeric) </para>
            <para> o <c>ImagePickerField</c> - a cover-flow image picker control </para>
            <para> </para>
            <para><b>Adding Forms to an Application</b> </para>
            <para>Let's suppose we want to add a simple survey form to our application. We
            will need to create a new Survey layer and add an iForm instance in the OnLoad()
            method. Currently the iForm and Fieldset classes use the .NET/C# extended
            constructor syntax to provide for maximum flexibility when constructing your
            Form Layers. Fieldsets and fields can be built following the form-flow desired
            by setting the various iForm properties within the extended constructor
            initializers. </para>
            <para> </para>
            <para>The base iForm constructor takes the name of your form. This name needs to
            be unique across all forms in your application, so name it carefully. </para>
            <para> </para>
            <para></para>
            <code lang="C#">      new iForm(&quot;SystemInfo&quot;){ . .
            .</code>
            <para> </para>
            <para> </para>
            <para>Next, you'll add one or more Fieldset instances to your form. You may
            optionally give the fieldset a name by setting the Legend property.</para>
            <para> </para>
            <code lang="C#">      Fieldsets = { new Fieldset()
                  {
                      Legend = &quot;Project Info&quot;,
                       . . .  </code>
            <para> </para>
            <para>Now you're ready to add some fields. Simply set the Fields property on the
            form with new instances of the field types you want to add to the form. </para>
            <para> </para>
            <code lang="C#">      Fields = {
                            new SelectListField() {
                                Name = &quot;Technology.Language&quot;,
                                Items = new List&lt;SelectListFieldItem&gt;()
            
                                {
                                    new SelectListFieldItem(&quot;C# .NET),
            
                                    new SelectListFieldItem(&quot;COBOL),
                                    new SelectListFieldItem(&quot;Java J2EE),
            
                                    new SelectListFieldItem(&quot;Ruby on Rails),
            
                                    new SelectListFieldItem(&quot;Other),
                                },
                                Label = &quot;Language:&quot;,
                           },
                           . . .   </code>
            <para> </para>
            <para>The ActionButtons collection is where you will define your save/submit button,
            as well as an optional cancel button. Every form must have a save/submit button
            to enable saving of all form field values to the application. The cancel button
            is optional; if you choose not to define a cancel button, the usual back button
            will be displayed and serve the same function. Unlike some iPhone applications,
            the back button in an iFactr application does not save the form values to enable
            cross-platform support. An explicit cancel button provides</para>
            <para>clarity for the user, and is the recommended approach.</para>
            <para> </para>
            <code lang="C#">      ActionButtons = new List&lt;Button&gt; {
                                              new Button(&quot;Submit&quot;) {
                                                  Action = ActionType.Submit; },
                                              new Button(&quot;Cancel&quot;) {
                                                  Action = ActionType.Cancel; }
            
                                             },
                                             . . .  </code>
            <para> </para>
            <para>Next, you need to set the Action property of your form. The Action
            property must be set to the navigation map endpoint of the Layer on which you
            want to process the form. Action = &quot;Surveys&quot;, Finally you can
            optionally set the ActionParameters property of your form to the parameters
            dictionary passed-in to your layer. This will ensure the parameters collection
            is carried forward to the Layer defined on the Action property, and are
            subsequently available as you progress through the workflow. This technique is
            used to enable multiple-form workflows with a single form-post to a backend
            service when the entire workflow is complete. ActionParameters = parameters
            </para>
            </remarks>
        </member>
        <member name="P:iFactr.Core.Layers.FormLayer.CompositeFormAction">
            <summary>
            Gets or sets the address to the submission endpoint of a composite layer set.
            This is only used on large form-factor targets.
            </summary>
            <value>The composite form action as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.FormLayer.Layout">
            <summary>
            Gets or sets the layout of the layer.
            </summary>
            <value>
            The layout as a <see cref="T:iFactr.Core.Forms.FormLayout"/> value.
            </value>
        </member>
        <member name="P:iFactr.Core.Layers.FormLayer.ActionButton">
            <summary>
            Gets or sets the action button that will submit the form.
            </summary>
            <value>
            The action button as a <see cref="T:iFactr.Core.Controls.SubmitButton"/> instance.
            </value>
        </member>
        <member name="P:iFactr.Core.Layers.FormLayer.Fieldsets">
            <summary>
            Gets or sets a collection of <see cref="T:iFactr.Core.Forms.Fieldset"/>s that contain the fields to render on the layer.
            </summary>
            <value>
            The collection of <see cref="T:iFactr.Core.Forms.Fieldset"/>s as an <see cref="T:iFactr.UI.ItemsCollection`1"/> instance.
            </value>
        </member>
        <member name="M:iFactr.Core.Layers.FormLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.FormLayer"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.FormLayer.Clear">
            <summary>
            Removes all UI elements and validation errors from the layer.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.IMasterLayer">
            <summary>
            Defines a layer that is displayed in the master pane of a large form-factor device.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.IPopoverLayer">
            <summary>
            Defines a layer that is displayed in a modal popover window on a large form-factor device.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.IPopoverLayer.IsFullscreen">
            <summary>
            Gets or sets whether to display the layer in a fullscreen modal window.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.Layer">
            <summary>
            Represents the base implementation of an iFactr navigation layer.  This class is abstract.
            </summary>
            <remarks>
            A <b>Layer</b> is comprised of navigation items, (lists and menus), and items
            used for display of information, (blocks and panels). A Navigation Layer's
            primary purpose is to provide information and workflow options within your
            application. 
            <para> </para>
            <para><b>Designing iFactr Layers</b> </para>
            <para>Designing your layers should follow a disciplined process of
            de-constructing your application domain entities into defined workflows that can
            be easily translated across target platforms. For example, in a simple order
            entry system you will likely need to model the concept of an Order with multiple
            Order Line-items. A clean de-construction of these concepts would likely result
            in the design of at least three iFactr Layers: </para>
            <para> </para>
            <list type="bullet">
            <item>
            <description>An Order list layer, which displays a list of orders.
            </description></item>
            <item>
            <description>An Order detail layer, which describes the contents of the order
            including display, and addition of Order Line-items. </description></item>
            <item>
            <description>A new Order form, which captures information for a new order.
            </description></item></list>
            <para> </para>
            <para>Each of these layers represents a discrete piece of functionality which
            can be accessed and run independently depending on the workflow specified in
            your application requirements. Creation of a new order may be requested from the
            main menu, or navigation tabs at the top-level of your application, but it may
            also be accessed from your application's product list. Both of these workflows
            can be easily supported by re-combining existing layers in your application's
            Navigation Map. </para>
            <para> </para>
            <para><b>Adding Layers to the Navigation Map</b> </para>
            <para>By carefully constructing your Navigation Map to model your application's
            many workflows, you can support even the most complex use cases using the simple
            functionality represented in your application Layers. Each Layer in your
            application can have multiple endpoints defined in your Navigation Map. These
            endpoints will reflect the workflow for each use case defined in your
            application requirements to maximize re-use of existing layer functionality
            wherever possible </para>
            <para> </para>
            <para>Now let's consider another likely scenario where we want to create a new
            order for an existing customer. We want to re-use the existing OrderDetails
            layer, since it contains all of the order information we want to interact with.
            So I'll add the following endpoint to my Navigation Map: </para>
            <para> </para>
            <para><c>NavigationMap.Add(&quot;Orders/Add/{Customer}&quot;, orderDetails);</c> </para>
            <para> </para>
            <para>Now when I request my layer, I'll be passing the Customer ID of the
            customer for whom I want to create a new order. So a URI of
            &quot;Orders/Add/9876&quot; passed to my application will load the same
            OrderDetails layer as before, but this time I will have a different parameter in
            my parameters dictionary: Customer=9876. </para>
            <para> </para>
            <para>I can then apply the appropriate logic to create and save a new Order for
            the customer: </para>
            <para> </para>
            <code lang="C#">     class OrderDetails : iLayer
                 {
                     public override void Load(Dictionary&lt;string, string&gt; parameters)
                     {
                        string Id = null;
            
                        if (parameters.ContainsKey(&quot;Id&quot;))
                                Id = parameters[&quot;Id&quot;];
            
                        if (Id != null)
                        {
                            Data.Order order =</code>
            <para> </para>
            <code lang="C#">
            Data.Providers.ProviderMap.Orders.PendingOrders.Where(item =&gt;
                                            item.OrderId.ToString().Substring(1, 5) ==
            Id).FirstOrDefault();
                        }
            
                        if (Id == null &amp;&amp;
            parameters.ContainsKey(&quot;Customer&quot;))
                        {
                                 string CustId = parameters[&quot;Customer&quot;];
            
                                 Data.Order newOrder = new Data.Order();
                                 newOrder.Customer =
            
            Data.Providers.ProviderMap.Customers.CacheList.Where(customer =&gt;
                                        customer.ID.Trim() == CustId).FirstOrDefault();
            
                                 Id = newOrder.OrderId.ToString().Substring(1,5);
            
            
            Data.Providers.ProviderMap.Orders.PendingOrders.Add(newOrder);
                                 Data.Providers.ProviderMap.Orders.SavePendingOrders();
                           </code>
            <para> </para>
            <code lang="C#">            }
                        .
                        .
                        .
                    }
                 }</code>
            <para> </para>
            <para> </para>
            <para>To add additional endpoints, simply follow your additional usage scenarios
            logical flow. </para>
            <para> </para>
            <para>To add an item to an existing order: </para>
            <para> </para>
            <para> <c>NavigationMap.Add(&quot;Orders/{Id}/NewItem/{Product}&quot;, orderDetails);  </c></para>
            <para> </para>
            <para>To create a new order, and add an item: </para>
            <para> </para>
            <para> <c> NavigationMap.Add(&quot;Orders/New/{Customer}/{Product}&quot;, orderDetails); </c> </para>
            <para> </para>
            <para>Simply add logic to your Layer to handle each scenario according to the
            array of parameters passed when the layer is loaded. </para>
            <para> </para>
            <para> </para>
            <para><b>The Layer Parameters Dictionary</b> </para>
            <para>The iFactr framework automatically processes all parameters in the navigation URI and delivers them to the <c>Layer.OnLoad()</c> method for processing. Parameters are passed as a dictionary of strings, with a string for a key. These values are derived from the navigation URI of the Layer request, and the corresponding URI in your application's navigation map. </para>
            <para> </para>
            <para>The purpose of the Layer parameters dictionary is to provide the necessary
            context for layer processing. Object identifiers and other metadata should be
            parameterized in your navigation map, and substituted at runtime for individual
            use cases. </para>
            <para> </para>
            <para>he iFactr Framework uses this navigation-centric approach to establish
            multiple workflows. The Navigation Map is defined on your base application, and
            contains all references to your application Layers. Using our hypothetical
            order-entry system, we will add a reference in our navigation map for our
            OrderList layer as follows: </para>
            <para> </para>
            <code lang="C#">     iLayer orders = new OrderList();
                 NavigationMap.Add(&quot;Orders&quot;, orders);</code>
            <para> </para>
            <para>This provides our base entry-point to the <c>OrderList</c> layer. Now whenever the URI <c>&quot;Orders&quot;</c> is passed to the iFactr navigation framework, the <c>OrderList</c> layer will be processed and display the list of orders. </para>
            <para> </para>
            <para>Now let's suppose I want to view the details of an individual order. I
            will add an endpoint as follows to my Navigation Map: </para>
            <para> </para>
            <code lang="C#">     iLayer orderDetails = new OrderDetails();
                 NavigationMap.Add(&quot;Orders/{Id}&quot;, orderDetails);</code>
            <para> </para>
            <para> </para>
            <para>This establishes the default entry-point for an individual order. This URI
            template uses the squiggly bracket syntax to indicate a substituted value, (in
            this case, the Order ID), in the navigation URI. At the same time, I will create
            my list items on my layer to substitute the Order ID for the {} parameter in the
            navigation map URI: </para>
            <para> </para>
            <code lang="C#">    class OrderList : iLayer
                {
                    public override void Load(Dictionary&lt;string, string&gt; parameters)
                    {
                        .
                        .
                        .
                        foreach (Data.Order order in
                                 Data.Providers.ProviderMap.Orders.PendingOrders)
                        {
                            plist.Items.Add(new iItem(&quot;Orders/&quot; +
                                                  order.OrderId.ToString(),
                                                  order.Customer.Name.ToTitleCase(),
                                                  string.Format(&quot;Items:{0}&quot;,
                                                  order.Items.Count.ToString()),true));
                        }
                        .
                        .
                        .
                    }
                }</code>
            <para> </para>
            <para>The result is a list with individual endpoints, (i.e. <c>&quot;Orders/1234&quot;</c>, <c>&quot;Orders/5678&quot;</c>, etc.), for each item on my list. </para>
            <para> </para>
            <para>At runtime, the navigation framework will parse this URI to extract the individual Order ID and place it in the layer parameters dictionary for processing. So a URI of <c>&quot;Orders/1234&quot;</c> passed to the <c>iApp.Navigate()</c> method will load the <c>OrderDetails</c> layer, passing a single parameter: <c>Id=1234</c>. </para>
            <para> </para>
            <para>I can now use this parameter to retrieve the order details for display:
            </para>
            <para> </para>
            <code lang="C#">   class OrderDetails : iLayer
               {
                    public override void Load(Dictionary&lt;string, string&gt; parameters)
                    {
                          string Id = null;
            
                          if (parameters.ContainsKey(&quot;Id&quot;))
                                 Id = parameters[&quot;Id&quot;];
            
                          if (Id != null)
                          {
                                Data.Order order =
            
                                Data.Providers.ProviderMap.Orders.PendingOrders.Where(item
            =&gt;
                                         item.OrderId.ToString().Substring(1, 5) ==
                                                                 Id).FirstOrDefault();
                          }
                        .
                        .
                        .
                    }
                }</code>
            <para> </para>
            <para> </para>
            <para> </para>
            <para><b>Proper Use of the Parameters Dictionary</b> </para>
            <para>The Layer parameter dictionary's purpose is to provide only the metadata
            necessary to process your layers according to your business workflows as defined
            in the navigation map. The parameters dictionary is created and managed by the
            iFactr framework; as such any parameters added outside of the scope of the URI
            templates in the navigation map are not guaranteed to be present in your layer
            processing. <b><i>It should not be used to pass business domain objects, or
            other information gathered and processed in application code.</i></b></para>
            <para> </para>
            </remarks>
        </member>
        <member name="T:iFactr.Core.Layers.LoginLayer">
            <summary>
            Represents a layer that accepts credentials and performs authentication logic.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.LoginLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.LoginLayer"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.LoginLayer.Load(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The base implementation will create the UI with username and password fields
            and disable the back button.
            </summary>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing any parameters.</param>
            <remarks>
            It is not advised to override this method to build custom UI.  If this method
            is overridden to provide some additional logic processing, it is necessary
            to call base.Load() in the override.
            </remarks>
        </member>
        <member name="M:iFactr.Core.Layers.LoginLayer.LogIn(System.String,System.String)">
            <summary>
            Performs authentication logic and returns whether logging in was successful.
            </summary>
            <param name="username">The username to check.</param>
            <param name="password">The password paired with the username.</param>
            <returns><c>true</c> if login succeeded; otherwise <c>false</c>.</returns>
            <remarks>If you return false in this method, you may find it useful to set ErrorTitle and/or ErrorText.</remarks>
        </member>
        <member name="P:iFactr.Core.Layers.LoginLayer.LoginLink">
            <summary>
            Gets or sets the link to navigate to on a successful login.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.LoginLayer.NavigateOnLoginLink">
            <summary>
            Gets or sets the link to navigate to on a successful login.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.LoginLayer.NavigateOnLogin">
            <summary>
            Gets or sets the URI to navigate to on a successful login.
            </summary>
            <remarks>Store the implementation of this on iApp.Session, or a similar globally-accessible data store.</remarks>
        </member>
        <member name="P:iFactr.Core.Layers.LoginLayer.NavigateOnLoginParams">
            <summary>
            Gets or sets any parameters to include on a successful login.
            </summary>
            <remarks>Store the implementation of this on iApp.Session, or a similar globally-accessible data store.</remarks>
        </member>
        <member name="P:iFactr.Core.Layers.LoginLayer.ErrorText">
            <summary>
            Gets or sets the text to display if authentication failed.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.LoginLayer.ErrorTitle">
            <summary>
            Gets or sets the title of the layer if there is an authentication error.
            </summary>
            <value>
            The layer title in the event of a failed login.
            </value>
        </member>
        <member name="P:iFactr.Core.Layers.LoginLayer.DefaultUsername">
            <summary>
            Gets or sets the text that pre-populates the username field.
            </summary>
            <value>The default username.</value>
        </member>
        <member name="P:iFactr.Core.Layers.LoginLayer.UsernameLabel">
            <summary>
            Gets or sets the label of the username field.
            </summary>
            <value>
            The label of the username field.
            </value>
        </member>
        <member name="P:iFactr.Core.Layers.LoginLayer.PasswordLabel">
            <summary>
            Gets or sets the label of the password field.
            </summary>
            <value>
            The label of the password field.
            </value>
        </member>
        <member name="P:iFactr.Core.Layers.LoginLayer.BrandImage">
            <summary>
            Gets or sets the <see cref="T:iFactr.Core.Controls.Icon"/> to display above the login controls.
            </summary>
            <value>
            The <see cref="T:iFactr.Core.Controls.Icon"/> to display.
            </value>
        </member>
        <member name="T:iFactr.Core.Layers.NavigationTabs">
            <summary>
            Represents a layer containing <see cref="T:iFactr.Core.Layers.Tab"/> objects for display within a Tabs pane.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.NavigationTabs.TabItems">
            <summary>
            Gets a collection of <see cref="T:iFactr.Core.Layers.Tab"/> objects.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.NavigationTabs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.NavigationTabs"/> class.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.NavigationTabs.List">
            <summary>
            Gets an <see cref="T:iFactr.Core.Layers.iList"/> representation of this layer's <see cref="T:iFactr.Core.Layers.Tab"/>s.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.NavigationTabs.Clear">
            <summary>
            Removes all UI elements and validation errors from the layer.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.NavigationTabs.NavigationTabItems">
            <summary>
            Represents a collection of <see cref="T:iFactr.Core.Layers.Tab"/> objects.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.NavigationTabs.NavigationTabItems.Add(System.String,System.String)">
            <summary>
             Adds a navigation tab item using the title and navigation URL provided.
            </summary>
            <param name="title">A <see cref="T:System.String"/> representing the title of the tab.</param>
            <param name="navigationUrl">A <see cref="T:System.String"/> representing the URL to navigate to when the tab is first selected.</param>
        </member>
        <member name="M:iFactr.Core.Layers.NavigationTabs.NavigationTabItems.Add(System.String,System.String,System.Boolean)">
            <summary>
            Adds a navigation tab item using the title and navigation URL provided.
            </summary>
            <param name="title">A <see cref="T:System.String"/> representing the title of the tab.</param>
            <param name="navigationUrl">A <see cref="T:System.String"/> representing the URL to navigate to when the tab is first selected.</param>
            <param name='refreshOnFocus'>Whether the tab should navigate to the navigationUrl every time it is selected.</param>
        </member>
        <member name="M:iFactr.Core.Layers.NavigationTabs.NavigationTabItems.Add(System.String,System.String,System.String)">
            <summary>
             Adds a navigation tab item using the title, navigation URL, and icon provided.
            </summary>
            <param name="title">A <see cref="T:System.String"/> representing the title of the tab.</param>
            <param name="navigationUrl">A <see cref="T:System.String"/> representing the URL to navigate to when the tab is first selected.</param>
            <param name="icon">A <see cref="T:System.String"/> representing the path of the icon to use for the tab.</param>
        </member>
        <member name="M:iFactr.Core.Layers.NavigationTabs.NavigationTabItems.Add(System.String,System.String,System.String,System.Boolean)">
            <summary>
             Adds a navigation tab item using the title, navigation URL, and icon provided.
            </summary>
            <param name="title">A <see cref="T:System.String"/> representing the title of the tab.</param>
            <param name="navigationUrl">A <see cref="T:System.String"/> representing the URL to navigate to when the tab is first selected.</param>
            <param name="icon">A <see cref="T:System.String"/> representing the path of the icon to use for the tab.</param>
            <param name='refreshOnFocus'>Whether the tab should navigate to the navigationUrl every time it is selected.</param>
        </member>
        <member name="M:iFactr.Core.Layers.NavigationTabs.NavigationTabItems.Add(System.String,System.String,System.String,System.String)">
            <summary>
             Adds a navigation tab item using the title, navigation URL, icon, and badge text provided.
            </summary>
            <param name="title">A <see cref="T:System.String"/> representing the title of the tab.</param>
            <param name="navigationUrl">A <see cref="T:System.String"/> representing the URL to navigate to when the tab is first selected.</param>
            <param name="icon">A <see cref="T:System.String"/> representing the path of the icon to use for the tab.</param>
            <param name="badge">A <see cref="T:System.String"/> representing the text to display in the tab's badge.</param>
        </member>
        <member name="M:iFactr.Core.Layers.NavigationTabs.NavigationTabItems.Add(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
             Adds a navigation tab item using the title, navigation URL, icon, and badge text provided.
            </summary>
            <param name="title">A <see cref="T:System.String"/> representing the title of the tab.</param>
            <param name="navigationUrl">A <see cref="T:System.String"/> representing the URL to navigate to when the tab is first selected.</param>
            <param name="icon">A <see cref="T:System.String"/> representing the path of the icon to use for the tab.</param>
            <param name="badge">A <see cref="T:System.String"/> representing the text to display in the tab's badge.</param>
            <param name='refreshOnFocus'>Whether the tab should navigate to the navigationUrl every time it is selected.</param>
        </member>
        <member name="T:iFactr.Core.Layers.ScanLayer">
            <summary>
            Represents a base layer for retrieving barcode values from a scanning device.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.ScanLayer.Callback">
            <summary>
            Gets or sets the link to the callback URI.
            </summary>
            <value>The callback <see cref="T:iFactr.Core.Controls.Link"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.Layers.ScanLayer.ActionButton">
            <summary>
            Gets or sets the action button to display.
            </summary>
            <value>The action button as a <see cref="T:iFactr.Core.Controls.Link"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.Layers.ScanLayer.DisplayText">
            <summary>
            Gets or sets the text that is displayed to the user while the layer is on the screen
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.ScanLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ScanLayer"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.ScanLayer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ScanLayer"/> class.
            </summary>
            <param name="uri">The URI that is navigated to when the action button is hit.</param>
        </member>
        <member name="M:iFactr.Core.Layers.ScanLayer.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ScanLayer"/> class.
            </summary>
            <param name="scanningText">The text that is displayed to the user while the layer is on the screen.</param>
            <param name="actionButtonText">The text that is displayed on the layer's single action button.</param>
            <param name="uri">The URI that is navigated to when the action button is hit.</param>
        </member>
        <member name="M:iFactr.Core.Layers.ScanLayer.ScannedBarcode(System.String)">
            <summary>
            Formats a scanned barcode.
            </summary>
            <param name="barcode">The raw barcode string.</param>
            <returns>A <see cref="T:System.String"/> containing formatted barcode data.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.ScanLayer.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.ScanLayer.CloneOverride">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="F:iFactr.Core.Layers.ScanLayer.BarcodeKey">
            <summary>
            The key that is used in the parameters collection when passing barcode values that have been scanned.
            </summary>
        </member>
        <member name="F:iFactr.Core.Layers.ScanLayer.BarcodeSeparatorChar">
            <summary>
            The string that separates the barcode values in the parameters collection.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.HIDScanLayer">
            <summary>
            Represents a layer for retrieving barcode values from a scanning device.
            This layer is only designed for scanners that emulate keyboard input.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.HIDScanLayer.DisplayText">
            <summary>
            Gets or sets the text that is displayed to the user while the layer is on the screen
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.HIDScanLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.HIDScanLayer"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.HIDScanLayer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.HIDScanLayer"/> class.
            </summary>
            <param name="uri">The URI that is navigated to when the action button is hit.</param>
        </member>
        <member name="M:iFactr.Core.Layers.HIDScanLayer.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.HIDScanLayer"/> class.
            </summary>
            <param name="scanningText">The text that is displayed to the user while the layer is on the screen.</param>
            <param name="actionButtonText">The text that is displayed on the layer's single action button.</param>
            <param name="uri">The URI that is navigated to when the action button is hit.</param>
        </member>
        <member name="T:iFactr.Core.Layers.CameraScanLayer">
            <summary>
            Represents a layer for retrieving barcode values from a scanning device.
            This layer is designed for scanners that use the camera.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.CameraScanLayer.DuplicateTimeout">
            <summary>
            Gets or set the delay before the last barcode scanned will be accepted again as a new scan.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.CameraScanLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.CameraScanLayer"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.CameraScanLayer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.CameraScanLayer"/> class.
            </summary>
            <param name="uri">The URI that is navigated to when the action button is hit.</param>
        </member>
        <member name="T:iFactr.Core.Layers.iLayer">
            <summary>
            Represents the base implementation for all iFactr layers.  This class is abstract.
            <para> </para>
            <para><img src="Diagrams\iLayer.cd"/></para>
            </summary>
            <remarks>
            <para><b>Layer Types </b> </para>
            <para>A Layer is the foundational construct for all iFactr applications. Each
            Layer represents a self-contained piece of application functionality. There are
            two layer types in an iFactr application. </para>
            <para> </para>
            <para>A <b>Layer </b>is comprised of navigation items, (lists and menus), and
            items used for display of information, (blocks and panels). A Navigation Layer's
            primary purpose is to provide information and workflow options within your
            application. </para>
            <para> </para>
            <para>A <b>FormLayer</b> is comprised of form items, or fields, that are used to
            capture user-provided information. Form Layers provide the basic input views for
            an iFactr application, and are accessed through the navigation map as any other
            layer, but a form layer has an action property that specifies the endpoint for
            submission of form values. Form layers must provide for adequate processing,
            (save and/or cancel), and may provide validation of fields before processing to
            an external endpoint. Form Layers are discussed in more detail below. </para>
            </remarks>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.ID">
            <summary>
            Gets a GUID for this instance when it is cloned.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.Name">
            <summary>
            Gets or sets the name of this instance.  Layer equality is determined by this property.
            Layers with the same name will occupy the same place in the history stack.
            </summary>
            <value>The layer name as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.Title">
            <summary>
            Gets or sets the title for this instance.
            </summary>
            <value>The layer title as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.MapUri">
            <summary>
            Gets or sets the URI that points to this instance within the NavigationMap.
            </summary>
            <value>The URI as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.ActionParameters">
            <summary>
            Gets or sets any parameters to pass along when this instance is submitted.
            </summary>
            <value>The parameters to pass through.</value>
            <remarks>Parameters in this collection are equivalent to hidden form fields.</remarks>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.ActionButtons">
            <summary>
            Gets or sets the action buttons for this instance.  These generally appear in the form of a popup menu, depending on the platform.
            </summary>
            <value>An <see cref="T:iFactr.UI.ItemsCollection`1"/> of <see cref="T:iFactr.Core.Controls.Button"/> objects.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.Items">
            <summary>
            Gets or sets the UI elements to render within this instance.
            </summary>
            <value>An <see cref="T:iFactr.UI.ItemsCollection`1"/> of <see cref="T:iFactr.Core.Layers.iLayerItem"/> objects.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.FocusedItem">
            <summary>
            Gets or sets the item to scroll to when the layer is presented.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.NavigationUri">
            <summary>
            Gets or sets the URI that was used to navigate to this instance.
            </summary>
            <value>The URI as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.Layout">
            <summary>
            Gets or sets the layout of this instance.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.IsScrollable">
            <summary>
            Gets or sets a value indicating whether this instance can scroll up and down.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.BackButton">
            <summary>
            Gets or sets a <see cref="T:iFactr.Core.Controls.Button"/> that will be used as the back button.  A value of null will use the default back button.
            </summary>
            <value>The back button as a <see cref="T:iFactr.Core.Controls.Button"/> instance.</value>
            <remarks>To hide the back button, set its action type to ActionType.None.</remarks>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.ShortcutGestures">
            <summary>
            Gets or sets the keyboard shortcuts for this instance.
            </summary>
            <value>The <see cref="T:iFactr.Core.Layers.Gesture"/>-indexed collection as a <see cref="T:System.Collections.Generic.Dictionary`2"/> instance. </value>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.CompositeActionButton">
            <summary>
            Gets or sets the action button to use when this instance is part of a composite layer set.
            The button is only used on large form-factor targets and defines the action button for the composite layer set.
            </summary>
            <value>The composite action button as a <see cref="T:iFactr.Core.Controls.Button"/>.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.CompositeLayerLink">
            <summary>
            Gets or sets the link to the next layer for composite layer layout on large form-factor targets.
            </summary>
            <value>The composite layer link as a <see cref="T:iFactr.UI.Link"/>.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.CompositeLayerLayout">
            <summary>
            Gets or sets the layout of the composite layer on large form-factor targets.
            </summary>
            <value>The composite layer layout as a <see cref="P:iFactr.Core.Layers.iLayer.CompositeLayerLayout"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.CompositeParent">
            <summary>
            Gets or sets the root composite layer on large form-factor targets.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.NavContext">
            <summary>
            Gets or sets the navigation context containing information about this instance's last navigation.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.DetailLink">
            <summary>
            Gets or sets the detail pane link for this instance.  When set and this instance is loaded in the master pane,
            this link will automatically be navigated to and the resultant layer will be displayed in the detail pane.
            </summary>
            <value>The detail pane link as a <see cref="T:iFactr.UI.Link"/>.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.LayerStyle">
            <summary>
            Gets or sets the style of this instance.  If this is not set, the application style will be used.
            </summary>
            <value>The layer style as a <see cref="T:iFactr.Core.Styles.Style"/> instance.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.PopoverPresentationStyle">
            <summary>
            Gets or sets the style in which the layer should be presented when rendered in a popover.
            </summary>
            <value>The popover mode as a <see cref="P:iFactr.Core.Layers.iLayer.PopoverPresentationStyle"/> instance.</value>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.iLayer"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.Load(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Loads this instance with the specified parameters.  This method is meant to be overridden and should be
             where the layer's UI elements are added.
            </summary>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing any parameters such as submitted field values.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.Load(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Loads this instance with the specified parameters.  This method is meant to be overridden and should be
             where the layer's UI elements are added.
            </summary>
            <param name="navigatedUri">A <see cref="T:System.String"/> that represents the uri used to navigate to the controller.</param>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing any parameters such as submitted field values.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.CloneOverride">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this instance.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.Select(iFactr.Core.Layers.iCollection{iFactr.Core.Layers.iItem},iFactr.Core.Layers.iItem)">
            <summary>
            Programmatically selects an <see cref="T:iFactr.Core.Layers.iItem"/>.
            </summary>
            <param name="collection">The collection to check for a SelectEventHandler.</param>
            <param name="item">The <see cref="T:iFactr.Core.Layers.iItem"/> that is to be selected.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.SetFieldValues(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets the value of each <see cref="T:iFactr.Core.Forms.Field"/> to the corresponding value within the specified collection.
            See remarks for more information.
            </summary>
            <param name="parameters">The values for some or all of the fields.</param>
            <remarks> If a key in the dictionary matches the Legend + '.' + Field.ID, then that
            KeyValuePair's value is converted to the appropriate type.  Format Exceptions
            will bubble up.  This does not need to be a 1-to-1 correlation of KeyValuePairs
            to Fields.  This method can be used to partially populate the fieldsets.</remarks>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.MonoCross#Navigation#IMXController#ModelType">
            <summary>
            The type of the model used by this controller.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.MonoCross#Navigation#IMXController#GetModel">
            <summary>
            Gets the model for the controller.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.MonoCross#Navigation#IMXController#Load(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads this instance with the specified parameters.
            </summary>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2" /> representing any parameters such as submitted values.</param>
            <returns></returns>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.MonoCross#Navigation#IMXController#Load(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads this instance with the specified parameters.
            </summary>
            <param name="navigatedUri">A <see cref="T:System.String"/> that represents the uri used to navigate to the controller.</param>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing any parameters such as submitted values.</param>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.Parameters">
            <summary>
            Gets or sets the parameters added to the controller.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.View">
            <summary>
            Gets the <see cref="T:MonoCross.Navigation.IMXView" /> that is loaded into the controller from a <see cref="T:MonoCross.Navigation.ViewPerspective" />.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.iLayer.LayerEventHandler">
            <summary>
            Represents the method that will handle layer events.
            </summary>
        </member>
        <member name="E:iFactr.Core.Layers.iLayer.OnLoadComplete">
            <summary>
            Occurs when the layer finishes loading.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.HasOnLoadCompleteDelegate">
            <summary>
            Gets a value indicating whether this instance has an OnLoadComplete delegate defined.
            </summary>
            <value><c>true</c> if this instance has an OnLoadComplete delegate defined; otherwise <c>false</c>.</value>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.LoadComplete">
            <summary>
            Called when this instance has finished loading.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.CancelLoad">
            <summary>
            Gets or sets whether to pass this instance to the bindings for rendering.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.CancelLoadAndNavigate(System.String)">
            <summary>
            Cancels loading of the current layer and navigates to the specified uri.
            </summary>
            <param name="uri">The uri of the layer to navigate to.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.CancelLoadAndNavigate(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Cancels loading of the current layer and navigates to the specified uri with the given parameters.
            </summary>
            <param name="uri">The uri of the layer to navigate to.</param>
            <param name="parameters">The parameters to pass along to the next layer.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.CancelLoadAndNavigate(iFactr.Core.Controls.Link)">
            <summary>
            Cancels loading of the current layer and performs a navigation using the specified Link.
            </summary>
            <param name="link">The <see cref="T:iFactr.Core.Controls.Link"/> to navigate to.</param>
        </member>
        <member name="E:iFactr.Core.Layers.iLayer.iLayerRefreshRequested">
            <summary>
            Occurs when a refresh of the layer is requested.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.RequestRefresh">
            <summary>
            Requests a refresh of this instance. 
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.LayerRefreshAvailable">
            <summary>
            Gets whether this instance can accept refresh requests. 
            </summary>
        </member>
        <member name="E:iFactr.Core.Layers.iLayer.FieldValuesRequested">
            <summary>
            Occurs when the layer gets its field values.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.GetFieldValues">
            <summary>
            Requests the current values of each <see cref="T:iFactr.Core.Forms.Field"/> on the layer.
            This does not validate the layer.  Call Validate to validate the returned parameters.
            This method will throw a NotImplementedException on web targets.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.IsValid">
            <summary>
            Gets whether each <see cref="T:iFactr.Core.Forms.Field"/> on the layer passes validation.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.ValidationErrors">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> of validation errors for all fields on the layer.
            Each field can have a list of broken validation rules.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.Validate(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Validates a set of parameters based on the validation rules of each <see cref="T:iFactr.Core.Forms.Field"/> on the layer.
            </summary>
            <param name="parameters">The parameters to validate.</param>
            <remarks>The parameter values are matched to <see cref="T:iFactr.Core.Forms.Field"/>s by the Key and Field.Name</remarks>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.ShouldNavigateFrom(iFactr.UI.Link,iFactr.UI.NavigationType)">
            <summary>
            Called when this instance is about to be removed from the history stack or placed underneath another layer.
            </summary>
            <returns><c>true</c> if the navigation should be allowed to proceed; otherwise <c>false</c>.</returns>
            <param name="link">The link containing information about the navigation taking place.</param>
            <param name='navigationType'>The type of navigation that caused the method to be called.</param>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.Unload">
            <summary>
            Called when this instance is unloaded from memory.  On native targets, this is called when the layer is popped from the history stack.
            On web targets,  this is called immediately after the layer is outputted.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.Clear">
            <summary>
            Removes all UI elements and validation errors from the layer.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.op_Equality(iFactr.Core.Layers.iLayer,iFactr.Core.Layers.iLayer)">
            <summary>
            Tests for equality between two <see cref="T:iFactr.Core.Layers.iLayer"/> instances.
            </summary>
            <param name="layer1">The first layer to test.</param>
            <param name="layer2">The second layer to test.</param>
            <returns><c>true</c> if the layers are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.op_Inequality(iFactr.Core.Layers.iLayer,iFactr.Core.Layers.iLayer)">
            <summary>
            Tests for inequality between two <see cref="T:iFactr.Core.Layers.iLayer"/> instances.
            </summary>
            <param name="layer1">The first layer to test.</param>
            <param name="layer2">The second layer to test.</param>
            <returns><c>true</c> if the layers are not equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.Equals(System.Object)">
            <summary>
            Determines if the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to test for equality.</param>
            <returns><c>true</c> if the object is equal to this instance; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.Core.Layers.iLayer.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Layers.iLayer.NavigationContext">
            <summary>
            Represents a layer navigation context containing information of the last navigation.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.NavigationContext.NavigatedUrl">
            <summary>
            Gets or sets the URL that was used to navigate to the layer.
            </summary>
            <value>The URL as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.NavigationContext.NavigatedActiveTab">
            <summary>
            Gets or sets the tab that was selected when the layer was navigated to.
            </summary>
            <value>The active tab as a <see cref="T:System.Int32"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.NavigationContext.NavigatedActivePane">
            <summary>
            Gets or sets the pane from which the navigation to the layer was initiated.
            </summary>
            <value>The active pane as a <see cref="T:iFactr.UI.Pane"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.NavigationContext.OutputOnPane">
            <summary>
            Gets or sets the pane that the layer was rendered on.
            </summary>
            <value>
            The pane as a <see cref="T:iFactr.UI.Pane"/> value.
            </value>
        </member>
        <member name="P:iFactr.Core.Layers.iLayer.NavigationContext.ClearPaneHistoryOnOutput">
            <summary>
            Gets or sets a value indicating whether to clear the large form-factor panel history when the layer is rendered.
            </summary>
            <value><c>true</c> if the large form-factor panel history is to be cleared; otherwise <c>false</c>.</value>
        </member>
        <member name="T:iFactr.Core.Layers.ValidationInfo">
            <summary>
            Represents broken validation rules for a <see cref="T:iFactr.Core.Forms.Field"/>.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.ValidationInfo.OriginalFieldValue">
            <summary>
            Gets a string representation of the original value of the field prior to validation.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.ValidationInfo.BrokenRulesPerField">
            <summary>
            Gets a list of validation rules that the value of the field has broken.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.ValidationInfo.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.ValidationInfo"/> class.
            </summary>
            <param name="originalFieldValue">A string representation of the original value of the field.</param>
            <param name="brokenRulesPerField">A list of validation rules that the value of the field has broken.</param>
        </member>
        <member name="M:iFactr.Core.Layers.ValidationInfo.GetFieldErrors">
            <summary>
            Gets the field errors stored in <see cref="P:iFactr.Core.Layers.ValidationInfo.BrokenRulesPerField"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the broken rules.</returns>
        </member>
        <member name="T:iFactr.Core.Layers.Tab">
            <summary>
            This class represents a tab.
            </summary>
        </member>
        <member name="P:iFactr.Core.Layers.Tab.RefreshOnFocus">
            <summary>
            Gets a value indicating whether this instance should
            perform a navigation to the root layer whenever it is selected.
            </summary>
            <value><c>true</c> if this tab refreshes on focus; otherwise <c>false</c>.</value>
        </member>
        <member name="P:iFactr.Core.Layers.Tab.Badge">
            <summary>
            Gets or sets the text of the badge displayed over the tab.
            If no text is set, the badge is not displayed.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.Tab.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Tab"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Layers.Tab.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Tab"/> class.
            </summary>
            <param name="title">The label to display on the tab.</param>
            <param name="navigationUrl">The URL to navigate to when the tab is selected for the first time.</param>
        </member>
        <member name="M:iFactr.Core.Layers.Tab.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Tab"/> class.
            </summary>
            <param name="title">The label to display on the tab.</param>
            <param name="navigationUrl">The URL to navigate to when the tab is selected for the first time.</param>
            <param name="refreshOnFocus">Whether to navigate to the navigationUrl every time the tab is selected.</param>
        </member>
        <member name="M:iFactr.Core.Layers.Tab.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Tab"/> class.
            </summary>
            <param name="title">The label to display on the tab.</param>
            <param name="navigationUrl">The URL to navigate to when the tab is selected for the first time.</param>
            <param name="icon">The path of the icon to use.</param>
        </member>
        <member name="M:iFactr.Core.Layers.Tab.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Tab"/> class.
            </summary>
            <param name="title">The label to display on the tab.</param>
            <param name="navigationUrl">The URL to navigate to when the tab is selected for the first time.</param>
            <param name="icon">The path of the icon to use.</param>
            <param name="refreshOnFocus">Whether to navigate to the navigationUrl every time the tab is selected.</param>
        </member>
        <member name="M:iFactr.Core.Layers.Tab.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Tab"/> class.
            </summary>
            <param name="title">The label to display on the tab.</param>
            <param name="navigationUrl">The URL to navigate to when the tab is selected for the first time.</param>
            <param name="icon">The path of the icon to use.</param>
            <param name="badge">The text to display in the badge.  If null, the badge will not display.</param>
        </member>
        <member name="M:iFactr.Core.Layers.Tab.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Layers.Tab"/> class.
            </summary>
            <param name="title">The label to display on the tab.</param>
            <param name="navigationUrl">The URL to navigate to when the tab is selected for the first time.</param>
            <param name="icon">The path of the icon to use.</param>
            <param name="badge">The text to display in the badge.  If null, the badge will not display.</param>
            <param name="refreshOnFocus">Whether to navigate to the navigationUrl every time the tab is selected.</param>
        </member>
        <member name="T:iFactr.Core.Layers.Tab.TabBadgeChangedDelegate">
            <summary>
            Represents the method that will handle badge changed events.
            </summary>
            <param name="value">The new value of the tab's badge text.</param>
        </member>
        <member name="E:iFactr.Core.Layers.Tab.TabBadgeChanged">
            <summary>
            Occurs when the tab badge is changed.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.AggregateFieldset">
            <summary>
            Represents a column of fieldsets to be used in a table of <see cref="T:iFactr.Core.Forms.Field"/>s.
            <remarks>The Header property of an <see cref="T:iFactr.Core.Forms.AggregateFieldset"/> refers to each column's header.</remarks>
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.AggregateFieldset.AggregateHeader">
            <summary>
            Gets or sets the text above the aggregated fieldsets.
            <remarks>Specifiying this property on an <see cref="T:iFactr.Core.Forms.AggregateFieldset"/> marks it as the first fieldset in a new table.</remarks>
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.BoolField">
            <summary>
            Represents a field with a boolean switch.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.BoolField.Value">
            <summary>
            Gets or sets the field value.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.BoolField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.BoolField"/> class with no submission ID.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.BoolField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.BoolField"/> class using the name provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID and Label values.</param>
        </member>
        <member name="M:iFactr.Core.Forms.BoolField.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.BoolField"/> class using the name provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
            /// <param name="label">A <see cref="T:System.String"/> representing the label value.</param>
        </member>
        <member name="M:iFactr.Core.Forms.BoolField.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.BoolField.ParseValue(System.String)">
            <summary>
            Parses the specified string value into a boolean.
            </summary>
            <param name="val">The string value to convert.</param>
            <returns><c>true</c> if the string equates to "on", "true", or "yes"; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.Core.Forms.ButtonField">
            <summary>
            Represents a field that initiates a navigation when selected.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.ButtonField.Link">
            <summary>
            Gets the link that this instance will navigate to when selected.
            </summary>
            <value>The link as a <see cref="T:iFactr.Core.Controls.Button"/>.</value>
        </member>
        <member name="P:iFactr.Core.Forms.ButtonField.Text">
            <summary>
            Gets or sets the label text to display.
            </summary>
            <value>The text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.ButtonField.Label">
            <summary>
            Gets or sets the label text to display.
            </summary>
            <value>The label as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.ButtonField.ConfirmationText">
            <summary>
            Gets or sets the text to be displayed in a confirmation dialog before navigating.
            </summary>
            <value>The confirmation text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.ButtonField.RevSetting">
            <summary>
            Gets or sets the rev setting for this instance.
            </summary>
            <value>The rev setting as a <see cref="T:iFactr.Core.Controls.Link.Rev"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.ButtonField.RequestType">
            <summary>
            Gets or sets the request type for this instance.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.ButtonField.Action">
            <summary>
            Gets or sets the action type for this instance.
            </summary>
            <value>The action as a <see cref="T:iFactr.Core.Controls.Button.ActionType"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Forms.ButtonField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.ButtonField"/> class using the ID provided.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.ButtonField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.ButtonField"/> class using the ID provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
        </member>
        <member name="M:iFactr.Core.Forms.ButtonField.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.ButtonField"/> class using the ID and address provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
            <param name="address">A <see cref="T:System.String"/> representing the URL address to navigate to.</param>
        </member>
        <member name="M:iFactr.Core.Forms.ButtonField.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.ButtonField.CloneOverride">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.DateField">
            <summary>
            Represents a field with a date and time picker.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.DateField.DateType">
            <summary>
            The available types of date picker.
            </summary>
        </member>
        <member name="F:iFactr.Core.Forms.DateField.DateType.Date">
            <summary>
            A picker with a date value only (month, day, year).
            </summary>
        </member>
        <member name="F:iFactr.Core.Forms.DateField.DateType.Time">
            <summary>
            A picker with a time value only (hour, minute).
            </summary>
        </member>
        <member name="F:iFactr.Core.Forms.DateField.DateType.DateTime">
            <summary>
            A picker with both date and time values.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.DateField.Type">
            <summary>
            Gets or sets the date type of this instance.
            </summary>
            <value>The date type as a <see cref="T:iFactr.Core.Forms.DateField.DateType"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.DateField.Value">
            <summary>
            Gets or sets the date and time values of this instance.
            </summary>
            <value>The date and time values as a <see cref="T:System.DateTime"/>.</value>
        </member>
        <member name="P:iFactr.Core.Forms.DateField.MinuteInterval">
            <summary>
            Gets or sets the minute interval of this instance.  The value must be a factor of 60.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.DateField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.DateField"/> class with no submission ID.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.DateField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.DateField"/> class using the ID provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
        </member>
        <member name="M:iFactr.Core.Forms.DateField.#ctor(System.String,iFactr.Core.Forms.DateField.DateType)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.DateField"/> class using the ID and date type provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
            <param name="type">A <see cref="T:iFactr.Core.Forms.DateField.DateType"/> representing the type of picker.</param>
        </member>
        <member name="M:iFactr.Core.Forms.DateField.#ctor(System.String,iFactr.Core.Forms.DateField.DateType,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.DateField"/> class using the ID, date type, and field value provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
            <param name="type">A <see cref="T:iFactr.Core.Forms.DateField.DateType"/> representing the type of picker.</param>
            <param name="dateTime">A <see cref="T:System.DateTime"/> representing the date and time.</param>
        </member>
        <member name="M:iFactr.Core.Forms.DateField.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.DrawingField">
            <summary>
            Represents a field with a canvas for drawing on.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.DrawingField.ImageUrl">
            <summary>
            Gets or sets the URL of an optional image to display on the canvas as part of the drawing.
            </summary>
            <value>The image URL as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.DrawingField.BackgroundImage">
            <summary>
            Gets or sets the URL of an optional image to display in the background of the canvas.
            </summary>
            <value>The image URL as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.DrawingField.DrawnImageId">
            <summary>
            Gets or sets the signed image identifier. Typically a GUID, but can be any string.
            </summary>
            <value>The signed image identifier as a <see cref="T:System.String"/> value.</value>
            <remarks>This property can be used to hydrate a drawing field with an existing drawing, separate from the background image.</remarks>
        </member>
        <member name="P:iFactr.Core.Forms.DrawingField.StrokeColor">
            <summary>
            Gets or sets the color of the stroke when drawing.
            </summary>
            <value>The stroke color as a <see cref="T:iFactr.UI.Color"/>.</value>
        </member>
        <member name="P:iFactr.Core.Forms.DrawingField.CompositeResult">
            <summary>
            Gets or sets whether to include the background image as part of the drawing when submitting.
            </summary>
            <value><c>true</c> to combine the drawing and background; otherwise <c>false</c>.</value>
        </member>
        <member name="P:iFactr.Core.Forms.DrawingField.DrawingFieldType">
            <summary>
            Gets or sets the drawing type of this instance.
            </summary>
            <value>The drawing type as a <see cref="T:iFactr.Core.Forms.DrawingType"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Forms.DrawingField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.DrawingField"/> class with no submission ID.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.DrawingField.#ctor(System.String,System.String,iFactr.Core.Forms.DrawingType,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.DrawingField"/> class using the ID provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
            <param name="label">A <see cref="T:System.String"/> representing the label value.</param>
            <param name="drawingFieldType">The drawing type as a <see cref="T:iFactr.Core.Forms.DrawingType"/> value.</param>
            <param name="backgroundImage">A <see cref="T:System.String"/> representing the URL to an optional background image.</param>
            <param name="compositeResult">Whether to include the background image as part of the drawing when submitting.</param>
        </member>
        <member name="M:iFactr.Core.Forms.DrawingField.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.DrawingType">
            <summary>
            The available layouts for <see cref="T:iFactr.Core.Forms.DrawingField"/>s.
            </summary>
        </member>
        <member name="F:iFactr.Core.Forms.DrawingType.Signature">
            <summary>
            Lays out a <see cref="T:iFactr.Core.Forms.DrawingField"/> for signature capture.
            </summary>
        </member>
        <member name="F:iFactr.Core.Forms.DrawingType.Canvas">
            <summary>
            Lays out a <see cref="T:iFactr.Core.Forms.DrawingField"/> for canvas painting.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.EmailField">
            <summary>
            Represents a text field for inputting email addresses.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.EmailField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.EmailField"/> class with no submission ID.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.EmailField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.EmailField"/> class using the ID provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID value.</param>
        </member>
        <member name="P:iFactr.Core.Forms.EmailField.KeyboardType">
            <summary>
            Gets the virtual keyboard type to use for this instance.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.EmailField.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.Field">
            <summary>
            Represents a base class for all field types.  This class is abstract.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.Field.ValidateDelegate">
            <summary>
            Represents the method that will handle validation of a field.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="errMsg">The error message to display if validation fails.</param>
            <param name="args">Any additional arguments.</param>
        </member>
        <member name="P:iFactr.Core.Forms.Field.Focus">
            <summary>
            Gets or sets whether this instance is in focus.
            </summary>
            <value><c>true</c> if in focus; otherwise <c>false</c>.</value>
        </member>
        <member name="P:iFactr.Core.Forms.Field.Label">
            <summary>
            Gets or sets the label text to display.
            </summary>
            <value>The label as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.Field.ID">
            <summary>
            Gets or sets the ID of this instance, which is used as the key when inserting values into a parameters dictionary.
            </summary>
            <value>The ID as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.Field.Placeholder">
            <summary>
            Gets or sets the placeholder text for this instance.
            </summary>
            <value>The placeholder text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.Field.Text">
            <summary>
            Gets or sets the value text for this instance.
            </summary>
            <value>The text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.Field.Validate">
            <summary>
            Gets or sets the delegate to invoke when performing validation.
            </summary>
            <seealso href="http://support.ifactr.com/kb/forms/using-iformlayer-validation"/>
        </member>
        <member name="M:iFactr.Core.Forms.Field.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.Field"/> class.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.Field.IsValid">
            <summary>
            Gets whether this instance has passed validation.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.Field.BrokenRules">
            <summary>
            Gets a collection of error messages corresponding to all of the broken validation rules attached to this instance.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.Field.ClearBrokenRules">
            <summary>
            Clears out any broken rules that this instance currently contains.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.Field.TextIsRequired(System.String,System.String)">
            <summary>
            A validation rule that will fail if the specified value is null or empty.
            </summary>
            <param name="value">The text to check.</param>
            <param name="errMsg">The error message to display if there is no text.</param>
        </member>
        <member name="M:iFactr.Core.Forms.Field.TextMaxLength(System.String,System.String,System.Object[])">
            <summary>
            A validation rule that will fail if the specified value is longer than the specified maximum.
            </summary>
            <param name="value">The text to check.</param>
            <param name="errMsg">The error message to display if the text is too long.</param>
            <param name="args">An <see cref="T:System.Int32"/> specifying the maximum length.</param>
        </member>
        <member name="M:iFactr.Core.Forms.Field.TextMinLength(System.String,System.String,System.Object[])">
            <summary>
            A validation rule that will fail if the specified value is shorter than the specified minimum.
            </summary>
            <param name="value">The text to check.</param>
            <param name="errMsg">The error message to display if the text is too short.</param>
            <param name="args">An <see cref="T:System.Int32"/> specifying the minimum length.</param>
        </member>
        <member name="M:iFactr.Core.Forms.Field.ValidEmail(System.String,System.String)">
            <summary>
            A validation rule that will fail if the specified value is not in the format of an email address.
            </summary>
            <param name="value">The text to check.</param>
            <param name="errMsg">The error message to display if the text is not a valid email address.</param>
        </member>
        <member name="M:iFactr.Core.Forms.Field.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:iFactr.Core.Forms.Field.CloneOverride">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="T:iFactr.Core.Forms.Fieldset">
            <summary>
            Represents a collection of <see cref="T:iFactr.Core.Forms.Field"/> objects within a layer.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.Fieldset.FieldsetLayout">
            <summary>
            The available fieldset layouts.
            </summary>
        </member>
        <member name="F:iFactr.Core.Forms.Fieldset.FieldsetLayout.List">
            <summary>
            The fieldset is to be rendered as a list, or equivalent.
            </summary>
        </member>
        <member name="F:iFactr.Core.Forms.Fieldset.FieldsetLayout.Simple">
            <summary>
            Simple in-line rendering based on relative position in the layer code.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.Fieldset.Layout">
            <summary>
            Gets or sets how this instance is laid out.
            </summary>
            <value>The fieldset layout as a <see cref="T:iFactr.Core.Forms.Fieldset.FieldsetLayout"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.Fieldset.Legend">
            <summary>
            Gets or sets the fieldset legend.
            </summary>
            <value>The fieldset legend as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.Fieldset.Fields">
            <summary>
            Gets or sets the items collection for this instance.
            </summary>
            <value>The fieldset items as an <see cref="T:iFactr.UI.ItemsCollection`1"/>.</value>
        </member>
        <member name="M:iFactr.Core.Forms.Fieldset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.Fieldset"/> class using a list layout.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.Fieldset.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.Fieldset"/> class using a list layout.
            </summary>
            <param name="header">The header text to display.</param>
        </member>
        <member name="M:iFactr.Core.Forms.Fieldset.BuildColumnFieldset(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{iFactr.Core.Forms.Field})">
            <summary>
            Builds a table of fields laid out in multiple rows and columns.
            Each row has a different <see cref="T:iFactr.Core.Forms.Field"/> control, and each column is a duplication of the first under a different header.
            </summary>
            <param name="header">The aggregated fieldset's header.</param>
            <param name="columns">The headers of each column.  The number of columns is determined by the number of column headers.</param>
            <param name="rows">The fields that make up each row.  The number of rows is determined by the number of fields.</param>
            <returns>A list of fieldsets that create an aggreagate fieldset.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if there is not at least one column.</exception>
        </member>
        <member name="M:iFactr.Core.Forms.Fieldset.BuildColumnFieldset(System.String,iFactr.Core.Forms.Fieldset.FieldsetLayout,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{iFactr.Core.Forms.Field})">
            <summary>
            Builds a table of fields laid out in multiple rows and columns.
            Each row has a different <see cref="T:iFactr.Core.Forms.Field"/> control, and each column is a duplication of the first under a different header.
            </summary>
            <param name="header">The aggregated fieldset's header.</param>
            <param name="layout">How the fieldset is laid out.</param>
            <param name="columns">The headers of each column.  The number of columns is determined by the number of column headers.</param>
            <param name="rows">The fields that make up each row.  The number of rows is determined by the number of fields.</param>
            <returns>A list of fieldsets that create an aggreagate fieldset.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if there is not at least one column.</exception>
        </member>
        <member name="T:iFactr.Core.Forms.ImagePickerField">
            <summary>
            Represents a field for selecting and displaying images.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.ImagePickerField.ImageUrl">
            <summary>
            Gets or sets the URL of the image to display.
            </summary>
            <value>The image URL as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Forms.ImagePickerField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.ImagePickerField"/> class with no submission ID.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.ImagePickerField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.ImagePickerField"/> class using the ID provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
        </member>
        <member name="M:iFactr.Core.Forms.ImagePickerField.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.KeyboardType">
            <summary>
            The types of soft keyboards.
            </summary>
        </member>
        <member name="F:iFactr.Core.Forms.KeyboardType.AlphaNumeric">
            <summary>
            Default alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:iFactr.Core.Forms.KeyboardType.PIN">
            <summary>
            A PIN-entry keyboard.
            </summary>
        </member>
        <member name="F:iFactr.Core.Forms.KeyboardType.Symbolic">
            <summary>
            A keyboard with numbers and symbols.
            </summary>
        </member>
        <member name="F:iFactr.Core.Forms.KeyboardType.Email">
            <summary>
            A keyboard for entering URLs and email addresses.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.LabelField">
            <summary>
            Represents a non-editable label.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.LabelField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.LabelField"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.LabelField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.LabelField"/> class using the ID provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID value.</param>
        </member>
        <member name="M:iFactr.Core.Forms.LabelField.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.MultiLineTextField">
            <summary>
            Represents a field for text input that allows multiple lines of text to be entered.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.MultiLineTextField.Rows">
            <summary>
            Gets or sets the number of rows of text to display at once.
            When the rows of text exceed this number, this instance will be scrollable.
            </summary>
            <value>The number of rows as an <see cref="T:System.Int32"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Forms.MultiLineTextField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.MultiLineTextField"/> class with no submission ID.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.MultiLineTextField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.MultiLineTextField"/> class using the ID provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
        </member>
        <member name="M:iFactr.Core.Forms.MultiLineTextField.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.MultiLineTextField"/> class using the ID provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
            <param name="rows">An <see cref="T:System.Int32"/> representing the number of rows of text.</param>
        </member>
        <member name="M:iFactr.Core.Forms.MultiLineTextField.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.NavigationField">
            <summary>
            Represents a field that initiates a navigation when selected.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.NavigationField.ConfirmationText">
            <summary>
            Gets or sets the text to be displayed in a confirmation dialog before navigating.
            </summary>
            <value>The confirmation text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.NavigationField.Text">
            <summary>
            Gets or sets the label text to display.
            </summary>
            <value>The text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.NavigationField.Label">
            <summary>
            Gets or sets the label text to display.
            </summary>
            <value>The label as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.NavigationField.Link">
            <summary>
            Gets the link that this instance will navigate to when selected.
            </summary>
            <value>The link as a <see cref="T:iFactr.Core.Controls.Button"/>.</value>
        </member>
        <member name="P:iFactr.Core.Forms.NavigationField.RevSetting">
            <summary>
            Gets or sets the rev setting for this instance.
            </summary>
            <value>The rev setting as a <see cref="T:iFactr.Core.Controls.Link.Rev"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.NavigationField.RequestType">
            <summary>
            Gets or sets the request type for this instance.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.NavigationField.Action">
            <summary>
            Gets or sets the action type for this instance.
            </summary>
            <value>The action as a <see cref="T:iFactr.Core.Controls.Button.ActionType"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Forms.NavigationField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.NavigationField"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.NavigationField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.NavigationField"/> class using the ID provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
        </member>
        <member name="M:iFactr.Core.Forms.NavigationField.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.NavigationField"/> class using the ID and address provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
            <param name="address">A <see cref="T:System.String"/> representing the URL address to navigate to.</param>
        </member>
        <member name="M:iFactr.Core.Forms.NavigationField.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:iFactr.Core.Forms.NavigationField.CloneOverride">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="T:iFactr.Core.Forms.NumericField">
            <summary>
            Represents a field for accepting numerical text input.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.NumericField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.NumericField"/> class with no submission ID.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.NumericField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.NumericField"/> class.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
        </member>
        <member name="M:iFactr.Core.Forms.NumericField.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.SelectListField">
            <summary>
            Represents a field with multiple options that can be selected.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.SelectListField.Items">
            <summary>
            Gets or sets a collection of <see cref="T:iFactr.Core.Forms.SelectListFieldItem"/>s to populate this instance with.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.SelectListField.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
            <value>The index of the selected item.</value>
        </member>
        <member name="P:iFactr.Core.Forms.SelectListField.SelectedItem">
            <summary>
            Gets or sets the selected <see cref="T:iFactr.Core.Forms.SelectListFieldItem"/>.
            </summary>
            <remarks>If this is set to be a value that isn't in the list of items, the first item in the list is chosen instead.</remarks>
        </member>
        <member name="P:iFactr.Core.Forms.SelectListField.SelectedKey">
            <summary>
            Gets or sets the key to the selected item.
            </summary>
            <remarks>If this is set to be a key that isn't in any item, the first item in the list is chosen instead.</remarks>
        </member>
        <member name="P:iFactr.Core.Forms.SelectListField.SelectedValue">
            <summary>
            Gets or sets the value of the selected item.
            </summary>
            <remarks>If this is set to be a value that isn't the Value of any item, the first item in the list is chosen instead.</remarks>
        </member>
        <member name="M:iFactr.Core.Forms.SelectListField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.SelectListField"/> class with no submission ID.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.SelectListField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.SelectListField"/> class.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
        </member>
        <member name="M:iFactr.Core.Forms.SelectListField.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.SelectListField"/> class.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
            <param name='items'>A group of strings representing the display text of each <see cref="T:iFactr.Core.Forms.SelectListFieldItem"/>.</param>
        </member>
        <member name="M:iFactr.Core.Forms.SelectListField.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.SelectListField"/> class.
            </summary>
            <param name="items">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> representing the Items value.</param>
        </member>
        <member name="M:iFactr.Core.Forms.SelectListField.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.SelectListField"/> class.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
            <param name='items'>A group of strings representing the display text of each <see cref="T:iFactr.Core.Forms.SelectListFieldItem"/>.</param>
        </member>
        <member name="M:iFactr.Core.Forms.SelectListField.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.SelectListField"/> class.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
            <param name='items'>A group of strings representing the key and display text of each <see cref="T:iFactr.Core.Forms.SelectListFieldItem"/>.</param>
        </member>
        <member name="M:iFactr.Core.Forms.SelectListField.SetItemsArray(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates <see cref="T:iFactr.Core.Forms.SelectListFieldItem"/>s from the specified strings and populates this instance with them.
            </summary>
            <param name="items">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the strings to create <see cref="T:iFactr.Core.Forms.SelectListFieldItem"/>s from.</param>
        </member>
        <member name="M:iFactr.Core.Forms.SelectListField.SetItemsArray(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Creates <see cref="T:iFactr.Core.Forms.SelectListFieldItem"/>s from the specified strings and populates this instance with them.
            </summary>
            <param name="items">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the keys and values to create <see cref="T:iFactr.Core.Forms.SelectListFieldItem"/>s from.</param>
        </member>
        <member name="M:iFactr.Core.Forms.SelectListField.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:iFactr.Core.Forms.SelectListField.CloneOverride">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="T:iFactr.Core.Forms.SelectListFieldItem">
            <summary>
            Represents a selectable item within a <see cref="T:iFactr.Core.Forms.SelectListField"/>.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.SelectListFieldItem.Key">
            <summary>
            Gets or sets the key for this instance.  This key can be used as an alternative to the displayed
            text when reading the value of a <see cref="T:iFactr.Core.Forms.SelectListField"/>.  To retrieve it from a parameters
            dictionary, use the field ID with ".Key" appended to the end.
            </summary>
            <value>The key as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.SelectListFieldItem.Value">
            <summary>
            Gets or sets the displayed text value for this instance.
            </summary>
            <value>The value as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Forms.SelectListFieldItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.SelectListFieldItem"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.SelectListFieldItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.SelectListFieldItem"/> class.
            </summary>
            <param name="value">A <see cref="T:System.String"/> representing the displayed text.</param>
        </member>
        <member name="M:iFactr.Core.Forms.SelectListFieldItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.SelectListFieldItem"/> class.
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the key.</param>
            <param name="value">A <see cref="T:System.String"/> representing the displayed text.</param>
        </member>
        <member name="M:iFactr.Core.Forms.SelectListFieldItem.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.SelectListFieldItem.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.SliderField">
            <summary>
            Represents a field with a slider control.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.SliderField.Value">
            <summary>
            Gets or sets the value of this instance.
            </summary>
            <value>The field value as a <see cref="T:System.Single"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.SliderField.Max">
            <summary>
            Maximum value of slider
            </summary>
            <value>The field value as a <see cref="T:System.Single"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.SliderField.Min">
            <summary>
            Minimum value of slider
            </summary>
            <value>The field value as a <see cref="T:System.Single"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.SliderField.StepSize">
            <summary>
            Sets increment size for slider
            </summary>
            <value>The field value as a <see cref="T:System.Single"/> value.</value>
        </member>
        <member name="M:iFactr.Core.Forms.SliderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.SliderField"/> class with no submission ID.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.SliderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.SliderField"/> class using the ID provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
        </member>
        <member name="M:iFactr.Core.Forms.SliderField.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.TextField">
            <summary>
            Represents a field for accepting text input.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.TextField.Expression">
            <summary>
            Gets or sets an optional Regex string for limiting what characters can be inputted.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.TextField.IsPassword">
            <summary>
            Gets or sets a value indicating whether this instance should mask its input.
            </summary>
            <value><c>true</c> if this instance should mask its input; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iFactr.Core.Forms.TextField.KeyboardType">
            <summary>
            Gets or sets the virtual keyboard type for this instance.
            </summary>
        </member>
        <member name="P:iFactr.Core.Forms.TextField.LabelStyle">
            <summary>
            Gets or sets the label style.
            </summary>
            <value>The label style as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.TextField.LabelSubtext">
            <summary>
            Gets or sets the label subtext value.
            </summary>
            <value>The label subtext as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.Core.Forms.TextField.TextCompletion">
            <summary>
            Gets or sets text completion behavior for this instance.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.TextField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.TextField"/> class with no submission ID.
            </summary>
        </member>
        <member name="M:iFactr.Core.Forms.TextField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Core.Forms.TextField"/> class using the ID provided.
            </summary>
            <param name="id">A <see cref="T:System.String"/> representing the ID.</param>
        </member>
        <member name="M:iFactr.Core.Forms.TextField.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="T:iFactr.Core.Forms.FormLayout">
            <summary>
            The available form layout values.
            </summary>
        </member>
        <member name="F:iFactr.Core.Forms.FormLayout.Simple">
            <summary>
            Simple in-line rendering based on relative position in the layer code.
            </summary>
        </member>
        <member name="F:iFactr.Core.Forms.FormLayout.Panel">
            <summary>
            Rendered within a panel or equivalent.
            </summary>
        </member>
        <member name="T:iFactr.Core.INotification">
            <summary>
            Defines an alert to the user that is displayed through the device's notification system.
            </summary>
        </member>
        <member name="P:iFactr.Core.INotification.Text">
            <summary>
            Gets or sets the primary text of the notification.
            </summary>
        </member>
        <member name="P:iFactr.Core.INotification.Subtext">
            <summary>
            Gets or sets the secondary text of the notification.
            </summary>
        </member>
        <member name="P:iFactr.Core.INotification.Icon">
            <summary>
            Gets or sets an icon to display with the notificiation.
            </summary>
        </member>
        <member name="P:iFactr.Core.INotification.BackgroundImageUrl">
            <summary>
            Gets or sets a URL to an image to use as the background of the notification.
            </summary>
        </member>
        <member name="P:iFactr.Core.INotification.Link">
            <summary>
            Gets or sets a link to navigate to when the notification has been selected.
            </summary>
        </member>
        <member name="T:iFactr.Core.Notification`1">
            <summary>
            Represents an alert to the user that is displayed through the device's notification system.
            </summary>
            <typeparam name="T">The type of the context that will be used to set the notification.</typeparam>
        </member>
        <member name="P:iFactr.Core.Notification`1.BackgroundImageUrl">
            <summary>
            Gets or sets a URL to an image to use as the background of the notification.
            </summary>
        </member>
        <member name="M:iFactr.Core.Notification`1.SetNotificationContext(`0)">
            <summary>
            Sets the notification using the specified context.
            </summary>
            <param name="context">The context with which to set the notification.</param>
        </member>
        <member name="T:iFactr.Integrations.Accelerometer">
            <summary>
            Represents a utility for providing real-time acceleration data.
            </summary>
        </member>
        <member name="E:iFactr.Integrations.Accelerometer.ValuesUpdated">
            <summary>
            Occurs when the X, Y, or Z value of the accelerometer changes.
            </summary>
        </member>
        <member name="P:iFactr.Integrations.Accelerometer.IsActive">
            <summary>
            Gets a value indicating whether the device's accelerometer is currently active.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.Accelerometer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Integrations.Compass"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.Accelerometer.Start">
            <summary>
            Begins listening for acceleration changes.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.Accelerometer.Stop">
            <summary>
            Stops listening for acceleration changes.
            </summary>
        </member>
        <member name="T:iFactr.Integrations.Compass">
            <summary>
            Represents a utility for accessing a device's compass.
            </summary>
        </member>
        <member name="E:iFactr.Integrations.Compass.HeadingUpdated">
            <summary>
            Occurs when the compass heading changes.
            </summary>
        </member>
        <member name="P:iFactr.Integrations.Compass.IsActive">
            <summary>
            Gets a value indicating whether the device's compass is currently active.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.Compass.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Integrations.Compass"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.Compass.Start">
            <summary>
            Begins tracking the compass heading of the device.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.Compass.Stop">
            <summary>
            Stops tracking the compass heading of the device.
            </summary>
        </member>
        <member name="T:iFactr.Integrations.GeoLocation">
            <summary>
            Represents a utility for retrieving the location of a device via longitude and latitude coordinates.
            </summary>
        </member>
        <member name="E:iFactr.Integrations.GeoLocation.LocationUpdated">
            <summary>
            Occurs when the location of the device changes.
            </summary>
        </member>
        <member name="P:iFactr.Integrations.GeoLocation.IsActive">
            <summary>
            Gets a value indicating whether the device's GPS is currently active.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.GeoLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Integrations.GeoLocation"/> class.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.GeoLocation.Start">
            <summary>
            Begins tracking the GPS coordinates of the device.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.GeoLocation.Stop">
            <summary>
            Stops tracking the GPS coordinates of the device.
            </summary>
        </member>
        <member name="T:iFactr.Integrations.IAccelerometer">
            <summary>
            Defines a utility for providing real-time acceleration data.
            </summary>
        </member>
        <member name="P:iFactr.Integrations.IAccelerometer.IsActive">
            <summary>
            Gets a value indicating whether the device's accelerometer is currently active.
            </summary>
        </member>
        <member name="E:iFactr.Integrations.IAccelerometer.ValuesUpdated">
            <summary>
            Occurs when the X, Y, or Z value of the accelerometer changes.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.IAccelerometer.Start">
            <summary>
            Begins listening for acceleration changes.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.IAccelerometer.Stop">
            <summary>
            Stops listening for acceleration changes.
            </summary>
        </member>
        <member name="T:iFactr.Integrations.AccelerometerData">
            <summary>
            Represents the X, Y, and Z values of an accelerometer.
            </summary>
        </member>
        <member name="F:iFactr.Integrations.AccelerometerData.X">
            <summary>
            The value of the X axis.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.Integrations.AccelerometerData.Y">
            <summary>
            The value of the Y axis.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.Integrations.AccelerometerData.Z">
            <summary>
            The value of the Z axis.  This field is read-only.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.AccelerometerData.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Integrations.AccelerometerData"/> structure.
            </summary>
            <param name="x">The value of the X axis.</param>
            <param name="y">The value of the Y axis.</param>
            <param name="z">The value of the Z axis.</param>
        </member>
        <member name="T:iFactr.Integrations.AccelerometerEventArgs">
            <summary>
            Provides data for the accelerometer's <see cref="E:ValuesUpdated"/> event.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.AccelerometerEventArgs.#ctor(iFactr.Integrations.AccelerometerData)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Integrations.AccelerometerEventArgs"/> class.
            </summary>
            <param name="data">The data for the event.</param>
        </member>
        <member name="P:iFactr.Integrations.AccelerometerEventArgs.Data">
            <summary>
            Gets the acceleration data for the event.
            </summary>
        </member>
        <member name="T:iFactr.Integrations.ICompass">
            <summary>
            Represents a utility for accessing a device's compass.
            </summary>
        </member>
        <member name="P:iFactr.Integrations.ICompass.IsActive">
            <summary>
            Gets a value indicating whether the device's compass is currently active.
            </summary>
        </member>
        <member name="E:iFactr.Integrations.ICompass.HeadingUpdated">
            <summary>
            Occurs when the compass heading changes.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.ICompass.Start">
            <summary>
            Begins tracking the compass heading of the device.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.ICompass.Stop">
            <summary>
            Stops tracking the compass heading of the device.
            </summary>
        </member>
        <member name="T:iFactr.Integrations.HeadingData">
            <summary>
            Represents a compass heading in degrees.
            </summary>
        </member>
        <member name="F:iFactr.Integrations.HeadingData.MagneticHeading">
            <summary>
            The magnetic heading in degrees.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.Integrations.HeadingData.TrueHeading">
            <summary>
            The true heading in degrees.  This field is read-only.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.HeadingData.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Integrations.HeadingData"/> structure.
            </summary>
            <param name="trueHeading">The true heading in degrees.</param>
            <param name="magneticHeading">The magnetic heading in degrees.</param>
        </member>
        <member name="T:iFactr.Integrations.HeadingEventArgs">
            <summary>
            Provides data for the compass's <see cref="E:HeadingUpdated"/> event.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.HeadingEventArgs.#ctor(iFactr.Integrations.HeadingData)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Integrations.HeadingEventArgs"/> class.
            </summary>
            <param name="data">The data for the event.</param>
        </member>
        <member name="P:iFactr.Integrations.HeadingEventArgs.Data">
            <summary>
            Gets the heading data for the event.
            </summary>
        </member>
        <member name="T:iFactr.Integrations.IGeoLocation">
            <summary>
            Defines a utility for retrieving the location of a device via longitude and latitude coordinates.
            </summary>
        </member>
        <member name="P:iFactr.Integrations.IGeoLocation.IsActive">
            <summary>
            Gets a value indicating whether the device's GPS is currently active.
            </summary>
        </member>
        <member name="E:iFactr.Integrations.IGeoLocation.LocationUpdated">
            <summary>
            Occurs when the location of the device changes.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.IGeoLocation.Start">
            <summary>
            Begins tracking the GPS coordinates of the device.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.IGeoLocation.Stop">
            <summary>
            Stops tracking the GPS coordinates of the device.
            </summary>
        </member>
        <member name="T:iFactr.Integrations.GeoLocationData">
            <summary>
            Represents a location based on longitude and latitude coordinates.
            </summary>
        </member>
        <member name="F:iFactr.Integrations.GeoLocationData.Latitude">
            <summary>
            The latitude coordinate.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.Integrations.GeoLocationData.Longitude">
            <summary>
            The longitude coordinate.  This field is read-only.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.GeoLocationData.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Integrations.GeoLocationData"/> structure.
            </summary>
            <param name="latitude">The latitude coordinate.</param>
            <param name="longitude">The longitude coordinate.</param>
        </member>
        <member name="T:iFactr.Integrations.GeoLocationEventArgs">
            <summary>
            Provides data for the geolocator's <see cref="E:LocationUpdated"/> event.
            </summary>
        </member>
        <member name="M:iFactr.Integrations.GeoLocationEventArgs.#ctor(iFactr.Integrations.GeoLocationData)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.Integrations.GeoLocationEventArgs"/> class.
            </summary>
            <param name="data">The data for the event.</param>
        </member>
        <member name="P:iFactr.Integrations.GeoLocationEventArgs.Data">
            <summary>
            Gets the location data for the event.
            </summary>
        </member>
        <member name="T:iFactr.UI.ItemsCollection`1">
            <summary>
            Represents a thread-safe collection of elements.
            </summary>
        </member>
        <member name="P:iFactr.UI.ItemsCollection`1.Capacity">
            <summary>
            Gets or sets the number of elements this instance can contain.
            </summary>
        </member>
        <member name="P:iFactr.UI.ItemsCollection`1.Count">
            <summary>
            Gets the number of elements contain in this instance.
            </summary>
        </member>
        <member name="P:iFactr.UI.ItemsCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection can be modified.
            </summary>
        </member>
        <member name="P:iFactr.UI.ItemsCollection`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection can be dynamically resized.
            </summary>
        </member>
        <member name="P:iFactr.UI.ItemsCollection`1.IsSynchronized">
            <summary>
            Gets a value indicating whether this instance is synchronized.
            </summary>
        </member>
        <member name="P:iFactr.UI.ItemsCollection`1.SyncRoot">
            <summary>
            Gets the sync root object used to maintain synchronization.
            </summary>
        </member>
        <member name="P:iFactr.UI.ItemsCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.ItemsCollection`1"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.ItemsCollection`1"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.ItemsCollection`1"/> class.
            </summary>
            <param name="collection">The collection containing the elements that will be copied into this collection.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.Add(`0)">
            <summary>
            Adds the specified item to the end of the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of this collection.
            </summary>
            <param name="collection">The collection containing the elements to add.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.BinarySearch(`0)">
            <summary>
            Searches the sorted collection for an element and returns the zero-based index of that element.
            </summary>
            <param name="item">The element for which to search.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the sorted collection for an element using the specified comparer and returns the zero-based index of that element.
            </summary>
            <param name="item">The element for which to search.</param>
            <param name="comparer">The comparer to use when comparing elements.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a range of elements in the sorted collection for an element using the specified comparer and returns the zero-based index of that element.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The element for which to search.</param>
            <param name="comparer">The comparer to use when comparing elements.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains the specified item.
            </summary>
            <param name="item">The item to check for.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.CopyTo(`0[])">
            <summary>
            Copies the entire collection to the specified array.
            </summary>
            <param name="array">The array to copy the collection to.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of this collection to an array, starting at the specified index.
            </summary>
            <param name="array">A one-dimensional, zero-based array that is the destination of the elements being copied.</param>
            <param name="arrayIndex">The zero-based index of <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements of this collection to an array, starting at a particular index of the target array.
            </summary>
            <param name="index">The zero-based index in the source collection at which copying begins.</param>
            <param name="array">A one-dimensional, zero-based array that is the destination of the elements being copied.</param>
            <param name="arrayIndex">The zero-based index of <paramref name="array"/> at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate over the collection.
            </summary>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the current collection.
            </summary>
            <param name="index">The zero-based index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the first occurrence of the specified item.
            </summary>
            <param name="item">The item to return the index of.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.IndexOf(`0,System.Int32)">
            <summary>
            Returns the index of the first occurrence of the specified item.
            </summary>
            <param name="item">The item to return the index of.</param>
            <param name="index">The index of where to begin searching for the item.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Returns the index of the first occurrence of the specified item within the specified range.
            </summary>
            <param name="item">The item to return the index of.</param>
            <param name="index">The index of where to begin searching for the item.</param>
            <param name="count">The number of elements to search.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified item into the collection at the specified position.
            </summary>
            <param name="index">The position to insert the item at.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the items of a collection into this collection starting at the specified position.
            </summary>
            <param name="index">The  zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection of items to insert.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.LastIndexOf(`0)">
            <summary>
            Returns the index of the last occurrence of the specified item.
            </summary>
            <param name="item">The item to return the index of.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Returns the index of the last occurrence of the specified item.
            </summary>
            <param name="item">The item to return the index of.</param>
            <param name="index">The index of where to begin searching for the item.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Returns the index of the last occurrence of the specified item within the specified range.
            </summary>
            <param name="item">The item to return the index of.</param>
            <param name="index">The index of where to begin searching for the item.</param>
            <param name="count">The number of elements to search.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified item.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The predicate delegate that specifies the element to search for.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified zero-based index.
            </summary>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes all elements within the specified range.
            </summary>
            <param name="index">The index at which to begin removing elements.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.Reverse">
            <summary>
            Reverses the order of the elements in the collection.
            </summary>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements within the specified range.
            </summary>
            <param name="index">The starting index of the range of elements to reverse.</param>
            <param name="count">The number of elements to reverse.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.Sort">
            <summary>
            Sorts the elements in the collection using the default comparer.
            </summary>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the collection using the specified comparison.
            </summary>
            <param name="comparison">The comparison to use when comparing elements.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the collection using the specified comparer.
            </summary>
            <param name="comparer">The comparer to use when comparing elements.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the collection using the specified comparer.
            </summary>
            <param name="index">The starting index of the range of elements to sort.</param>
            <param name="count">The number of elements to sort.</param>
            <param name="comparer">The comparer to use when comparing elements.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.ToArray">
            <summary>
            Copies the elements in the collection to a new array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.TrimExcess">
            <summary>
            Suggests that the capacity be reduced to the actual number of elements in the collection.
            </summary>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.Add(System.Object)">
            <summary>
            Adds the specified item to the end of the collection.
            </summary>
            <param name="value">The item to add.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.Contains(System.Object)">
            <summary>
            Determines whether the collection contains the specified item.
            </summary>
            <param name="value">The item to check for.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.IndexOf(System.Object)">
            <summary>
            Returns the index of the first occurrence of the specified item.
            </summary>
            <param name="value">The item to return the index of.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified item into the collection at the specified position.
            </summary>
            <param name="index">The position to insert the item at.</param>
            <param name="value">The item to insert.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.Remove(System.Object)">
            <summary>
            Removes the first occurrence of the specified item.
            </summary>
            <param name="value">The item to remove.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of this collection to an array, starting at the specified index.
            </summary>
            <param name="array">A one-dimensional, zero-based array that is the destination of the elements being copied.</param>
            <param name="index">The zero-based index of <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.op_Implicit(iFactr.UI.ItemsCollection{`0})~System.Collections.Generic.List{`0}">
            <summary>
            Implicitly converts an <see cref="T:iFactr.UI.ItemsCollection`1"/> to a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="collection">The collection to convert to a <see cref="T:System.Collections.Generic.List`1"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing the items from the given collection.</returns>
        </member>
        <member name="M:iFactr.UI.ItemsCollection`1.op_Implicit(System.Collections.Generic.List{`0})~iFactr.UI.ItemsCollection{`0}">
            <summary>
            Implicitly converts a <see cref="T:System.Collections.Generic.List`1"/> to an <see cref="T:iFactr.UI.ItemsCollection`1"/>.
            </summary>
            <param name="collection">The collection to convert to an <see cref="T:iFactr.UI.ItemsCollection`1"/>.</param>
            <returns>A <see cref="T:iFactr.UI.ItemsCollection`1"/> containing the items of the given collection.</returns>
        </member>
        <member name="T:iFactr.UI.Link">
            <summary>
            Represents a control that points to a URL address and can be navigated to.
            </summary>
        </member>
        <member name="P:iFactr.UI.Link.Address">
            <summary>
            Gets or sets the URL address that will be navigated to.
            </summary>
            <value>The URL address as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.UI.Link.ConfirmationText">
            <summary>
            Gets or sets the text to be displayed in a confirmation dialog before navigating.
            </summary>
            <value>The text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.UI.Link.ImagePath">
            <summary>
            Gets or sets the path to the image to be displayed.
            </summary>
            <value>The image as a <see cref="T:System.String"/>.</value>
        </member>
        <member name="P:iFactr.UI.Link.RequestType">
            <summary>
            Gets or sets the request type for this instance.
            </summary>
            <value>The request type as a <see cref="P:iFactr.UI.Link.RequestType"/> value.</value>
        </member>
        <member name="P:iFactr.UI.Link.Action">
            <summary>
            Gets or sets the action type of this instance.
            </summary>
        </member>
        <member name="P:iFactr.UI.Link.Text">
            <summary>
            Gets or sets the text to be displayed for this instance.
            </summary>
            <value>The text as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:iFactr.UI.Link.Parameters">
            <summary>
            Gets or sets an optional collection of parameters to pass through when navigating.
            </summary>
        </member>
        <member name="P:iFactr.UI.Link.LoadIndicatorDelay">
            <summary>
            Gets or sets the amount of time, in milliseconds, before the load indicator is displayed when navigating.
            Any value below 0 means the load indicator will not display.
            </summary>
        </member>
        <member name="P:iFactr.UI.Link.LoadIndicatorTitle">
            <summary>
            Gets or sets the title to display for the load indicator when navigating.
            </summary>
        </member>
        <member name="M:iFactr.UI.Link.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Link"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Link.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Link"/> class with the specified URL address.
            </summary>
            <param name="address">The URL address to navigate to.</param>
        </member>
        <member name="M:iFactr.UI.Link.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Link"/> class with the specified URL address and parameters.
            </summary>
            <param name="address">The URL address to navigate to.</param>
            <param name="parameters">The parameters to pass through when navigating.</param>
        </member>
        <member name="M:iFactr.UI.Link.#ctor(System.String,iFactr.UI.RequestType)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Link"/> class with the specified URL address.
            </summary>
            <param name="address">The URL address to navigate to.</param>
            <param name="requestType">The link's request type.</param>
        </member>
        <member name="M:iFactr.UI.Link.Clone">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="M:iFactr.UI.Link.CloneOverride">
            <summary>
            Creates a deep-copy clone of this instance.
            </summary>
        </member>
        <member name="M:iFactr.UI.Link.GetHtml">
            <summary>
            Returns an HTML representation of this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> representing this instance in HTML.</returns>
        </member>
        <member name="M:iFactr.UI.Link.op_Implicit(iFactr.UI.Link)~iFactr.Core.Controls.Link">
            <summary>
            Converts a <see cref="T:iFactr.UI.Link"/> to the older <see cref="T:iFactr.Core.Controls.Link"/>
            </summary>
            <param name="link">The link to convert.</param>
            <returns>The converted link.</returns>
        </member>
        <member name="M:iFactr.UI.Link.op_Implicit(iFactr.Core.Controls.Link)~iFactr.UI.Link">
            <summary>
            Converts a <see cref="T:iFactr.Core.Controls.Link"/> to the updated <see cref="T:iFactr.UI.Link"/>
            </summary>
            <param name="link">The link to convert.</param>
            <returns>The converted link.</returns>
        </member>
        <member name="T:iFactr.UI.ActionType">
            <summary>
            The available types of actions to perform.
            </summary>
        </member>
        <member name="F:iFactr.UI.ActionType.Undefined">
            <summary>
            An undefined or default action.
            </summary>
        </member>
        <member name="F:iFactr.UI.ActionType.Add">
            <summary>
            The action performs an addition or creation operation.
            </summary>
        </member>
        <member name="F:iFactr.UI.ActionType.Cancel">
            <summary>
            The action performs a cancellation operation.
            </summary>
        </member>
        <member name="F:iFactr.UI.ActionType.Edit">
            <summary>
            The action performs an edit operation.
            </summary>
        </member>
        <member name="F:iFactr.UI.ActionType.Delete">
            <summary>
            The action performs a deletion operation.
            </summary>
        </member>
        <member name="F:iFactr.UI.ActionType.More">
            <summary>
            The action performs an operation for displaying additional information.
            </summary>
        </member>
        <member name="F:iFactr.UI.ActionType.Submit">
            <summary>
            The action performs a form submission operation.
            </summary>
        </member>
        <member name="F:iFactr.UI.ActionType.None">
            <summary>
            No action is performed.
            </summary>
        </member>
        <member name="T:iFactr.UI.RequestType">
            <summary>
            The possible request types for a <see cref="T:iFactr.UI.Link"/>.
            </summary>
        </member>
        <member name="F:iFactr.UI.RequestType.Async">
            <summary>
            The link delivers asynchronous content.
            </summary>
        </member>
        <member name="F:iFactr.UI.RequestType.Media">
            <summary>
            The link delivers media content, (audio or video).
            </summary>
        </member>
        <member name="F:iFactr.UI.RequestType.ClearPaneHistory">
            <summary>
            The history of the output pane is cleared before displaying the navigated view.
            </summary>
        </member>
        <member name="F:iFactr.UI.RequestType.NewWindow">
            <summary>
            The link delivers content in a new window.
            </summary>
        </member>
        <member name="T:iFactr.UI.Alert">
            <summary>
            Represents a native dialog box for modally presenting a small amount of textual information.
            </summary>
        </member>
        <member name="E:iFactr.UI.Alert.Dismissed">
            <summary>
            Occurs when the dialog box is dismissed by the user.
            </summary>
        </member>
        <member name="P:iFactr.UI.Alert.CancelLink">
            <summary>
            Gets or sets the link to navigate to when the result of the alert is <see cref="F:iFactr.UI.AlertResult.Cancel"/>.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.Alert.Dismissed"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.Alert.OKLink">
            <summary>
            Gets or sets the link to navigate to when the result of the alert is <see cref="F:iFactr.UI.AlertResult.OK"/>.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.Alert.Dismissed"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.Alert.Message">
            <summary>
            Gets the message being displayed by the dialog box.
            </summary>
        </member>
        <member name="P:iFactr.UI.Alert.Title">
            <summary>
            Gets the title of the dialog box.
            </summary>
        </member>
        <member name="P:iFactr.UI.Alert.Buttons">
            <summary>
            Gets the button combination for the dialog box.
            </summary>
        </member>
        <member name="M:iFactr.UI.Alert.#ctor(System.String,System.String,iFactr.UI.AlertButtons)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Alert"/> class.
            </summary>
            <param name="message">The message to display with the alert.</param>
            <param name="title">The title of the alert.</param>
            <param name="buttons">The button combination for the alert.</param>
        </member>
        <member name="M:iFactr.UI.Alert.Show">
            <summary>
            Modally presents the dialog box.
            </summary>
        </member>
        <member name="T:iFactr.UI.IAlert">
            <summary>
            Defines a native dialog box for modally presenting a small amount of textual information.
            </summary>
        </member>
        <member name="P:iFactr.UI.IAlert.CancelLink">
            <summary>
            Gets or sets the link to navigate to when the result of the alert is <see cref="F:iFactr.UI.AlertResult.Cancel"/>.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.IAlert.Dismissed"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.IAlert.OKLink">
            <summary>
            Gets or sets the link to navigate to when the result of the alert is <see cref="F:iFactr.UI.AlertResult.OK"/>.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.IAlert.Dismissed"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.IAlert.Message">
            <summary>
            Gets the message being displayed by the dialog box.
            </summary>
        </member>
        <member name="P:iFactr.UI.IAlert.Title">
            <summary>
            Gets the title of the dialog box.
            </summary>
        </member>
        <member name="P:iFactr.UI.IAlert.Buttons">
            <summary>
            Gets the button combination for the dialog box.
            </summary>
        </member>
        <member name="E:iFactr.UI.IAlert.Dismissed">
            <summary>
            Occurs when the dialog box is dismissed by the user.
            </summary>
        </member>
        <member name="M:iFactr.UI.IAlert.Show">
            <summary>
            Modally presents the dialog box.
            </summary>
        </member>
        <member name="T:iFactr.UI.EventDelegateAttribute">
            <summary>
            Indicates that the handlers for the event are stored in a location other than the default.
            </summary>
        </member>
        <member name="P:iFactr.UI.EventDelegateAttribute.DelegateName">
            <summary>
            Gets the name of the delegate that contains the invocation list for the event.
            </summary>
        </member>
        <member name="M:iFactr.UI.EventDelegateAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.EventDelegateAttribute"/> class.
            </summary>
            <param name="delegateName">The name of the delegate that contains the invocation list for the event.</param>
        </member>
        <member name="T:iFactr.UI.NativeOnlyAttribute">
            <summary>
            Indicates that the API is not officially supported on web-based targets and may not function.
            </summary>
        </member>
        <member name="P:iFactr.UI.NativeOnlyAttribute.Url">
            <summary>
            Gets or sets a web URL that points to further information about the API that is decorated with this attribute.
            </summary>
        </member>
        <member name="M:iFactr.UI.NativeOnlyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.NativeOnlyAttribute"/> class.
            </summary>
            <param name="url">A web URL that points to further information about the API that is decorated with this attribute.</param>
        </member>
        <member name="T:iFactr.UI.PreferredPaneAttribute">
            <summary>
            Indicates that a view has a preference for which pane it will be displayed in.
            If the preferred pane is of an equal or higher ordinal value to the current top pane,
            the view will be displayed in the preferred pane; otherwise, it will be displayed in the top pane.
            </summary>
        </member>
        <member name="P:iFactr.UI.PreferredPaneAttribute.Pane">
            <summary>
            Gets the <see cref="T:iFactr.UI.Pane"/> that the view prefers to be displayed in.
            </summary>
        </member>
        <member name="M:iFactr.UI.PreferredPaneAttribute.#ctor(iFactr.UI.Pane)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.PreferredPaneAttribute"/> class.
            </summary>
            <param name="pane">The <see cref="T:iFactr.UI.Pane"/> that the view prefers to be displayed in.</param>
        </member>
        <member name="T:iFactr.UI.StackBehaviorAttribute">
            <summary>
            Indicates that a view has special behavioral properties to consider when it is pushed onto a history stack.
            </summary>
        </member>
        <member name="P:iFactr.UI.StackBehaviorAttribute.Options">
            <summary>
            Gets the behavioral properties that will be applied to the view.
            </summary>
        </member>
        <member name="M:iFactr.UI.StackBehaviorAttribute.#ctor(iFactr.UI.StackBehaviorOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.StackBehaviorAttribute"/> class.
            </summary>
            <param name="options">The behavioral properties to apply to the view.</param>
        </member>
        <member name="T:iFactr.UI.StackBehaviorOptions">
            <summary>
            Describes the available behavioral properties that can be applied to a view being pushed onto a history stack.
            </summary>
        </member>
        <member name="F:iFactr.UI.StackBehaviorOptions.Default">
            <summary>
            The view has no special behaviors to consider.
            </summary>
        </member>
        <member name="F:iFactr.UI.StackBehaviorOptions.ForceRoot">
            <summary>
            The view should only appear in the root of a stack, and it should only be replaced by other
            views that also have this option.  Views without this option should always be pushed above.
            </summary>
        </member>
        <member name="F:iFactr.UI.StackBehaviorOptions.HistoryShy">
            <summary>
            The view should not be considered a part of the stack's history; no back button should be provided to it.
            </summary>
        </member>
        <member name="T:iFactr.UI.Binding">
            <summary>
            Represents a connection between two properties.  When the value of one
            property changes, the value of the other is automatically updated.
            </summary>
        </member>
        <member name="P:iFactr.UI.Binding.Source">
            <summary>
            Gets or sets the object that contains the bound property specified by the <see cref="P:SourcePath"/>.
            If set to <c>null</c>, the target of the binding will act as the source.
            </summary>
        </member>
        <member name="P:iFactr.UI.Binding.SourcePath">
            <summary>
            Gets the property path for the source object.
            </summary>
        </member>
        <member name="P:iFactr.UI.Binding.TargetPath">
            <summary>
            Gets the property path for the target object.
            </summary>
        </member>
        <member name="P:iFactr.UI.Binding.ValueConverter">
            <summary>
            Gets or sets the converter to use when passing values between bound objects.
            </summary>
        </member>
        <member name="P:iFactr.UI.Binding.ValueConverterParameter">
            <summary>
            Gets or sets an optional parameter to pass to the value converter.
            </summary>
        </member>
        <member name="P:iFactr.UI.Binding.Mode">
            <summary>
            Gets or sets the direction in which values are passed.
            </summary>
        </member>
        <member name="P:iFactr.UI.Binding.Target">
            <summary>
            Gets or sets the target object for the binding.
            </summary>
        </member>
        <member name="M:iFactr.UI.Binding.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Binding"/> class.
            </summary>
            <param name="targetPath">A tokenized path that points to the target property to be bound.</param>
            <param name="sourcePath">A tokenized path that points to the source property to be bound.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="targetPath"/> is <c>null</c> -or- when the <paramref name="sourcePath"/> is <c>null</c>.</exception>
        </member>
        <member name="M:iFactr.UI.Binding.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:iFactr.UI.Binding.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:iFactr.UI.Binding"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
            hash table.</returns>
        </member>
        <member name="M:iFactr.UI.Binding.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:iFactr.UI.Binding"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:iFactr.UI.Binding"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:iFactr.UI.Binding"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.UI.Cell">
            <summary>
            Represents an entry in an <see cref="T:iFactr.UI.IListView"/> instance.  This class is abstract and is the base
            class for the <see cref="T:iFactr.UI.GridCell"/> and <see cref="T:iFactr.UI.RichContentCell"/> classes.
            </summary>
        </member>
        <member name="F:iFactr.UI.Cell.BackgroundColorProperty">
            <summary>
            The name of the <see cref="P:BackgroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Cell.MaxHeightProperty">
            <summary>
            The name of the <see cref="P:MaxHeight"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Cell.MinHeightProperty">
            <summary>
            The name of the <see cref="P:MinHeight"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="P:iFactr.UI.Cell.StandardCellHeight">
            <summary>
            Gets the height value for a typical cell on the target platform.
            </summary>
        </member>
        <member name="P:iFactr.UI.Cell.BackgroundColor">
            <summary>
            Gets or sets the background color of the cell.
            </summary>
        </member>
        <member name="P:iFactr.UI.Cell.MaxHeight">
            <summary>
            Gets or sets the maximum amount of vertical space that the cell is allowed to consume.
            </summary>
        </member>
        <member name="P:iFactr.UI.Cell.Metadata">
            <summary>
            Gets a collection for storing arbitrary data on the object.
            </summary>
        </member>
        <member name="P:iFactr.UI.Cell.MinHeight">
            <summary>
            Gets or sets the minimum amount of vertical space that the cell is allowed to consume.
            </summary>
        </member>
        <member name="P:iFactr.UI.Cell.Pair">
            <summary>
            Gets or sets the native object that is paired with the cell.  This can be set only once.
            </summary>
        </member>
        <member name="M:iFactr.UI.Cell.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Cell.Equals(iFactr.UI.ICell)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.ICell"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:iFactr.UI.ICell"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.ICell"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Cell.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:iFactr.UI.Cell"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="T:iFactr.UI.Column">
            <summary>
            Represents a vertical partition of space in an <see cref="T:iFactr.UI.IGridBase"/> object.
            </summary>
        </member>
        <member name="P:iFactr.UI.Column.AutoSized">
            <summary>
            Gets a <see cref="T:iFactr.UI.Column"/> that automatically sizes itself to fit its contents.
            </summary>
        </member>
        <member name="P:iFactr.UI.Column.OneStar">
            <summary>
            Gets a <see cref="T:iFactr.UI.Column"/> with a star unit type and a weight of 1.
            </summary>
        </member>
        <member name="F:iFactr.UI.Column.ActualWidth">
            <summary>
            The actual width of the column after layout, expressed in absolute units.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Column.Width">
            <summary>
            The width of the column, expressed in units specified by <see cref="F:iFactr.UI.Column.UnitType"/>.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Column.UnitType">
            <summary>
            The type of unit that the <see cref="F:iFactr.UI.Column.Width"/> value represents.  This field is read-only.
            </summary>
        </member>
        <member name="M:iFactr.UI.Column.#ctor(System.Double,iFactr.UI.LayoutUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Column"/> structure.
            </summary>
            <param name="width">The width of the column, expressed in units specified by <paramref name="unitType"/>.</param>
            <param name="unitType">The type of unit that the <paramref name="width"/> value represents.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="width"/> is less than 0.</exception>
        </member>
        <member name="M:iFactr.UI.Column.Equals(iFactr.UI.Column)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.Column"/> is equal to the current <see cref="T:iFactr.UI.Column"/>.
            </summary>
            <param name="column">The <see cref="T:iFactr.UI.Column"/> to compare with the current <see cref="T:iFactr.UI.Column"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.Column"/> is equal to the current
            <see cref="T:iFactr.UI.Column"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Column.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:iFactr.UI.Column"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:iFactr.UI.Column"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:iFactr.UI.Column"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Column.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:iFactr.UI.Column"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
            hash table.</returns>
        </member>
        <member name="M:iFactr.UI.Column.ToString">
            <summary>
            Returns a string representation of the current object.
            </summary>
        </member>
        <member name="M:iFactr.UI.Column.op_Equality(iFactr.UI.Column,iFactr.UI.Column)">
            <summary>
            Determines whether two <see cref="T:iFactr.UI.Column"/> objects are considered equal.
            </summary>
            <param name="value1">The first object to compare.</param>
            <param name="value2">The second object to compare.</param>
            <returns><c>true</c> if the objects are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Column.op_Inequality(iFactr.UI.Column,iFactr.UI.Column)">
            <summary>
            Determines whether two <see cref="T:iFactr.UI.Column"/> objects are not considered equal.
            </summary>
            <param name="value1">The first object to compare.</param>
            <param name="value2">The second object to compare.</param>
            <returns><c>true</c> if the objects are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Column.op_Addition(iFactr.UI.Column,System.Double)">
            <summary>
            Adds the specified <paramref name="amount"/> to the width of a <see cref="T:iFactr.UI.Column"/>.
            </summary>
            <param name="column">The column whose width is to be added to.</param>
            <param name="amount">The amount to add to the width of the column.</param>
            <returns>The result of adding the <paramref name="amount"/> to the column's width.</returns>
        </member>
        <member name="M:iFactr.UI.Column.op_Subtraction(iFactr.UI.Column,System.Double)">
            <summary>
            Subtracts the specified <paramref name="amount"/> from the width of a <see cref="T:iFactr.UI.Column"/>.
            </summary>
            <param name="column">The column whose width is to be subtracted from.</param>
            <param name="amount">The amount to subtract from the width of the column.</param>
            <returns>The result of subtracting the <paramref name="amount"/> from the column's width.</returns>
        </member>
        <member name="M:iFactr.UI.Column.op_Multiply(iFactr.UI.Column,System.Double)">
            <summary>
            Multiplies the width of a <see cref="T:iFactr.UI.Column"/> by the specified <paramref name="amount"/>.
            </summary>
            <param name="column">The column whose width is to be multiplied.</param>
            <param name="amount">The amount to multiply the width of the column.</param>
            <returns>The result of multiplying the column's width by the <paramref name="amount"/>.</returns>
        </member>
        <member name="M:iFactr.UI.Column.op_Division(iFactr.UI.Column,System.Double)">
            <summary>
            Divides the width of a <see cref="T:iFactr.UI.Column"/> by the specified <paramref name="amount"/>.
            </summary>
            <param name="column">The column whose width is to be divided.</param>
            <param name="amount">The amount to divide the width of the column.</param>
            <returns>The result of dividing the column's width by the <paramref name="amount"/>.</returns>
        </member>
        <member name="T:iFactr.UI.ColumnCollection">
            <summary>
            Represents a collection of <see cref="T:iFactr.UI.Column"/> objects.
            </summary>
        </member>
        <member name="M:iFactr.UI.ColumnCollection.Add(System.Double,iFactr.UI.LayoutUnitType)">
            <summary>
            Adds a <see cref="T:iFactr.UI.Column"/> object to the end of the collection.
            </summary>
            <param name="width">The width of the column, expressed in units specified by <paramref name="unitType"/>.</param>
            <param name="unitType">The type of unit that the <paramref name="width"/> value represents.</param>
        </member>
        <member name="M:iFactr.UI.ColumnCollection.Insert(System.Int32,System.Double,iFactr.UI.LayoutUnitType)">
            <summary>
            Inserts a <see cref="T:iFactr.UI.Column"/> object into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="width">The width of the column, expressed in units specified by <paramref name="unitType"/>.</param>
            <param name="unitType">The type of unit that the <paramref name="width"/> value represents.</param>
        </member>
        <member name="T:iFactr.UI.ContentCell">
            <summary>
            Represents a <see cref="T:iFactr.UI.GridCell"/> with predefined labels and a predefined image.
            </summary>
        </member>
        <member name="P:iFactr.UI.ContentCell.Image">
            <summary>
            Gets a predefined image control for the cell.
            </summary>
        </member>
        <member name="P:iFactr.UI.ContentCell.TextLabel">
            <summary>
            Gets a predefined label control for displaying the primary textual data in the cell.
            </summary>
        </member>
        <member name="P:iFactr.UI.ContentCell.SubtextLabel">
            <summary>
            Gets a predefined label control for displaying any secondary textual data in the cell.
            This label typically appears underneath the <see cref="P:TextLabel"/>.
            </summary>
        </member>
        <member name="P:iFactr.UI.ContentCell.ValueLabel">
            <summary>
            Gets a predefined label control for displaying data values.
            This label typically appears to the right of the <see cref="P:TextLabel"/>.
            </summary>
        </member>
        <member name="M:iFactr.UI.ContentCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.ContentCell"/> class.
            </summary>
        </member>
        <member name="T:iFactr.UI.CustomItemContainer">
            <summary>
            Represents a container for passing <see cref="T:iFactr.Core.Layers.ICustomItem"/> objects to the platform bindings for handling.
            This class is used by the framework and should not be used in application code.
            </summary>
        </member>
        <member name="P:iFactr.UI.CustomItemContainer.CustomItem">
            <summary>
            Gets the custom object that is being passed to the platform bindings.
            </summary>
        </member>
        <member name="P:iFactr.UI.CustomItemContainer.ItemType">
            <summary>
            Gets the type of entry the item will represent when inserted into an <see cref="T:iFactr.UI.IListView"/>.
            </summary>
        </member>
        <member name="M:iFactr.UI.CustomItemContainer.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.CustomItemContainer"/> class.
            </summary>
            <param name="item">The custom item to be wrapped.</param>
        </member>
        <member name="T:iFactr.UI.GridCell">
            <summary>
            Represents a cell that acts as a grid for laying out various UI elements.
            This is the most common type of cell.
            </summary>
        </member>
        <member name="F:iFactr.UI.GridCell.AccessoryLinkProperty">
            <summary>
            The name of the <see cref="P:AccessoryLink"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.GridCell.NavigationLinkProperty">
            <summary>
            The name of the <see cref="P:NavigationLink"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.GridCell.PaddingProperty">
            <summary>
            The name of the <see cref="P:Padding"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.GridCell.SelectionColorProperty">
            <summary>
            The name of the <see cref="P:SelectionColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.GridCell.SelectionStyleProperty">
            <summary>
            The name of the <see cref="P:SelectionStyle"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.GridCell.Selected">
            <summary>
            Occurs when the user selects the cell.
            </summary>
        </member>
        <member name="E:iFactr.UI.GridCell.AccessorySelected">
            <summary>
            Occurs when the user selects the accessory for the cell.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridCell.AccessoryLink">
            <summary>
            Gets or sets the link to navigate to when the cell's accessory has been selected by the user.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.GridCell.AccessorySelected"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridCell.Columns">
            <summary>
            Gets a collection of the columns that currently make up the cell.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridCell.Children">
            <summary>
            Gets a collection of the UI elements that currently reside within the cell.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridCell.NavigationLink">
            <summary>
            Gets or sets the link to navigate to when the cell has been selected by the user.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.GridCell.Selected"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridCell.Padding">
            <summary>
            Gets or sets the amount of spacing between the edges of the cell and the children within it.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridCell.Rows">
            <summary>
            Gets a collection of the rows that currently make up the cell.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridCell.SelectionColor">
            <summary>
            Gets or sets the color with which to highlight the cell when it is selected.
            This may not appear on all platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridCell.SelectionStyle">
            <summary>
            Gets or sets which visual elements to use to indicate that the cell is selectable or has been selected.
            </summary>
        </member>
        <member name="M:iFactr.UI.GridCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.GridCell"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.GridCell.AddChild(iFactr.UI.Controls.IElement)">
            <summary>
            Adds the specified <see cref="T:iFactr.UI.Controls.IElement"/> instance to the cell.
            </summary>
            <param name="element">The element to be added to the cell.</param>
        </member>
        <member name="M:iFactr.UI.GridCell.NullifyEvents">
            <summary>
            Resets the invocation list of all events within the class.
            </summary>
        </member>
        <member name="M:iFactr.UI.GridCell.RemoveChild(iFactr.UI.Controls.IElement)">
            <summary>
            Removes the specified <see cref="T:iFactr.UI.Controls.IElement"/> instance from the cell.
            </summary>
            <param name="element">The element to be removed from the cell.</param>
        </member>
        <member name="M:iFactr.UI.GridCell.Select">
            <summary>
            Programmatically selects the cell.
            </summary>
        </member>
        <member name="T:iFactr.UI.HeaderedControlCell">
            <summary>
            Represents a cell with a predefined header label coupled with one or more <see cref="T:iFactr.UI.Controls.IControl"/> objects.
            The header label and the controls are automatically laid out in a manner appropriate to the target platform.
            </summary>
        </member>
        <member name="F:iFactr.UI.HeaderedControlCell.AccessoryLinkProperty">
            <summary>
            The name of the <see cref="P:AccessoryLink"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.HeaderedControlCell.NavigationLinkProperty">
            <summary>
            The name of the <see cref="P:NavigationLink"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.HeaderedControlCell.SelectionColorProperty">
            <summary>
            The name of the <see cref="P:SelectionColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.HeaderedControlCell.SelectionStyleProperty">
            <summary>
            The name of the <see cref="P:SelectionStyle"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.HeaderedControlCell.Selected">
            <summary>
            Occurs when the user selects the cell.
            </summary>
        </member>
        <member name="E:iFactr.UI.HeaderedControlCell.AccessorySelected">
            <summary>
            Occurs when the user selects the accessory for the cell.
            </summary>
        </member>
        <member name="P:iFactr.UI.HeaderedControlCell.AccessoryLink">
            <summary>
            Gets or sets the link to navigate to when the cell's accessory has been selected by the user.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.HeaderedControlCell.AccessorySelected"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.HeaderedControlCell.Children">
            <summary>
            Gets a collection of the UI elements that currently reside within the cell.
            </summary>
        </member>
        <member name="P:iFactr.UI.HeaderedControlCell.Header">
            <summary>
            Gets the header label for the cell.
            </summary>
        </member>
        <member name="P:iFactr.UI.HeaderedControlCell.NavigationLink">
            <summary>
            Gets or sets the link to navigate to when the cell has been selected by the user.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.HeaderedControlCell.Selected"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.HeaderedControlCell.SelectionColor">
            <summary>
            Gets or sets the color with which to highlight the cell when it is selected.
            This may not appear on all platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.HeaderedControlCell.SelectionStyle">
            <summary>
            Gets or sets which visual elements to use to indicate that the cell is selectable or has been selected.
            </summary>
        </member>
        <member name="M:iFactr.UI.HeaderedControlCell.#ctor(System.String,iFactr.UI.Controls.IControl[])">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.HeaderedControlCell"/> class.
            </summary>
            <param name="headerText">The text to apply to the header label.</param>
            <param name="controls">The <see cref="T:iFactr.UI.Controls.IControl"/> objects to include with the header label.</param>
        </member>
        <member name="M:iFactr.UI.HeaderedControlCell.AddControl(iFactr.UI.Controls.IControl)">
            <summary>
            Adds the specified <see cref="T:iFactr.UI.Controls.IControl"/> instance to the cell.
            </summary>
            <param name="control">The control to be added to the cell.</param>
        </member>
        <member name="M:iFactr.UI.HeaderedControlCell.GetControl``1">
            <summary>
            Returns the first control found that is of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the control.</typeparam>
            <returns>The first control found of type <typeparamref name="T"/> -or-
            <c>null</c> if no control of the specified type was found.</returns>
        </member>
        <member name="M:iFactr.UI.HeaderedControlCell.GetControl``1(System.String)">
            <summary>
            Returns the first control found with the specified ID that is of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the control.</typeparam>
            <param name="id">The identifier of the control.</param>
            <returns>The first control found with the specified ID that is of type <typeparamref name="T"/> -or-
            <c>null</c> if no control was found.</returns>
        </member>
        <member name="M:iFactr.UI.HeaderedControlCell.NullifyEvents">
            <summary>
            Resets the invocation list of all events within the class.
            </summary>
        </member>
        <member name="M:iFactr.UI.HeaderedControlCell.RemoveControl(iFactr.UI.Controls.IControl)">
            <summary>
            Removes the specified <see cref="T:iFactr.UI.Controls.IControl"/> instance from the cell.
            </summary>
            <param name="control">The control to be removed from the cell.</param>
        </member>
        <member name="M:iFactr.UI.HeaderedControlCell.Select">
            <summary>
            Programmatically selects the cell.
            </summary>
        </member>
        <member name="T:iFactr.UI.ICell">
            <summary>
            Defines an entry in an <see cref="T:iFactr.UI.IListView"/> instance.  This is the base interface for
            the <see cref="T:iFactr.UI.IGridCell"/> and <see cref="T:iFactr.UI.IRichContentCell"/> interfaces.
            </summary>
        </member>
        <member name="P:iFactr.UI.ICell.BackgroundColor">
            <summary>
            Gets or sets the background color of the cell.
            </summary>
        </member>
        <member name="P:iFactr.UI.ICell.MaxHeight">
            <summary>
            Gets or sets the maximum amount of vertical space that the cell is allowed to consume.
            </summary>
        </member>
        <member name="P:iFactr.UI.ICell.Metadata">
            <summary>
            Gets a collection for storing arbitrary data on the object.
            </summary>
        </member>
        <member name="P:iFactr.UI.ICell.MinHeight">
            <summary>
            Gets or sets the minimum amount of vertical space that the cell is allowed to consume.
            </summary>
        </member>
        <member name="T:iFactr.UI.IGridCell">
            <summary>
            Defines a cell that acts as a grid for laying out various UI elements.
            This is the most common type of cell.
            </summary>
        </member>
        <member name="P:iFactr.UI.IGridCell.AccessoryLink">
            <summary>
            Gets or sets the link to navigate to when the cell's accessory has been selected by the user.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.IGridCell.AccessorySelected"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.IGridCell.NavigationLink">
            <summary>
            Gets or sets the link to navigate to when the cell has been selected by the user.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.IGridCell.Selected"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.IGridCell.SelectionColor">
            <summary>
            Gets or sets the color with which to highlight the cell when it is selected.
            This may not appear on all platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.IGridCell.SelectionStyle">
            <summary>
            Gets or sets which visual elements to use to indicate that the cell is selectable or has been selected.
            </summary>
        </member>
        <member name="E:iFactr.UI.IGridCell.Selected">
            <summary>
            Occurs when the user selects the cell.
            </summary>
        </member>
        <member name="E:iFactr.UI.IGridCell.AccessorySelected">
            <summary>
            Occurs when the user selects the accessory for the cell.
            </summary>
        </member>
        <member name="M:iFactr.UI.IGridCell.NullifyEvents">
            <summary>
            Resets the invocation list of all events within the class.
            </summary>
        </member>
        <member name="M:iFactr.UI.IGridCell.Select">
            <summary>
            Programmatically selects the cell.
            </summary>
        </member>
        <member name="T:iFactr.UI.IRichContentCell">
            <summary>
            Defines a cell that parses HTML or XML into rich content.  Since not all platforms support HTML rendering
            or XML rendering, it is advised to only use the various Append methods to create the content.
            </summary>
        </member>
        <member name="P:iFactr.UI.IRichContentCell.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the cell.
            </summary>
        </member>
        <member name="M:iFactr.UI.IRichContentCell.Load">
            <summary>
            Begins parsing the content in the Text property.
            </summary>
        </member>
        <member name="T:iFactr.UI.ISectionFooter">
            <summary>
            Defines a UI element that acts as a footer for a <see cref="T:iFactr.UI.Section"/>.
            </summary>
        </member>
        <member name="P:iFactr.UI.ISectionFooter.BackgroundColor">
            <summary>
            Gets or sets the background color of the footer.
            </summary>
        </member>
        <member name="P:iFactr.UI.ISectionFooter.ForegroundColor">
            <summary>
            Gets or sets the color of the foreground content of the footer.
            </summary>
        </member>
        <member name="P:iFactr.UI.ISectionFooter.Font">
            <summary>
            Gets or sets the font to be used when rendering the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.ISectionFooter.Text">
            <summary>
            Gets or sets the text that will be displayed on screen.
            </summary>
        </member>
        <member name="T:iFactr.UI.ISectionHeader">
            <summary>
            Defines a UI element that acts as a header for a <see cref="T:iFactr.UI.Section"/>.
            </summary>
        </member>
        <member name="P:iFactr.UI.ISectionHeader.BackgroundColor">
            <summary>
            Gets or sets the background color of the header.
            </summary>
        </member>
        <member name="P:iFactr.UI.ISectionHeader.ForegroundColor">
            <summary>
            Gets or sets the color of the foreground content of the header.
            </summary>
        </member>
        <member name="P:iFactr.UI.ISectionHeader.Font">
            <summary>
            Gets or sets the font to be used when rendering the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.ISectionHeader.Text">
            <summary>
            Gets or sets the text that will be displayed on screen.
            </summary>
        </member>
        <member name="T:iFactr.UI.RichContentCell">
            <summary>
            Represents a cell that parses HTML or XML into rich content.  Since not all platforms support HTML rendering
            or XML rendering, it is advised to only use the various Append methods to create the content.
            </summary>
        </member>
        <member name="F:iFactr.UI.RichContentCell.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.RichContentCell.TextProperty">
            <summary>
            The name of the <see cref="P:Text"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="P:iFactr.UI.RichContentCell.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the cell.
            </summary>
        </member>
        <member name="P:iFactr.UI.RichContentCell.Text">
            <summary>
            Gets or sets a string that represents the content within the cell in the form of HTML or XML.
            This string will be parsed when the <see cref="M:iFactr.UI.RichContentCell.Load"/> method is called to generate rich content.
            </summary>
        </member>
        <member name="M:iFactr.UI.RichContentCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.RichContentCell"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.RichContentCell.Load">
            <summary>
            Begins parsing the content in the <see cref="P:iFactr.UI.RichContentCell.Text"/> property.
            This method is called once automatically when the cell is added to the view.
            </summary>
        </member>
        <member name="T:iFactr.UI.Row">
            <summary>
            Represents a horizontal partition of space in an <see cref="T:iFactr.UI.IGridBase"/> object.
            </summary>
        </member>
        <member name="P:iFactr.UI.Row.AutoSized">
            <summary>
            Gets a <see cref="T:iFactr.UI.Row"/> that automatically sizes itself to fit its contents.
            </summary>
        </member>
        <member name="P:iFactr.UI.Row.OneStar">
            <summary>
            Gets a <see cref="T:iFactr.UI.Row"/> with a star unit type and a weight of 1.
            </summary>
        </member>
        <member name="F:iFactr.UI.Row.ActualHeight">
            <summary>
            The actual height of the row after layout, expressed in absolute units.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Row.Height">
            <summary>
            The height of the row, expressed in units specified by <see cref="F:iFactr.UI.Row.UnitType"/>.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Row.UnitType">
            <summary>
            The type of unit that the <see cref="F:iFactr.UI.Row.Height"/> value represents.  This field is read-only.
            </summary>
        </member>
        <member name="M:iFactr.UI.Row.#ctor(System.Double,iFactr.UI.LayoutUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Row"/> structure.
            </summary>
            <param name="height">The height of the row, expressed in units specified by <paramref name="unitType"/>.</param>
            <param name="unitType">The type of unit that the <paramref name="height"/> value represents.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="height"/> is less than zero.</exception>
        </member>
        <member name="M:iFactr.UI.Row.Equals(iFactr.UI.Row)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.Row"/> is equal to the current <see cref="T:iFactr.UI.Row"/>.
            </summary>
            <param name="row">The <see cref="T:iFactr.UI.Row"/> to compare with the current <see cref="T:iFactr.UI.Row"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.Row"/> is equal to the current
            <see cref="T:iFactr.UI.Row"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Row.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:iFactr.UI.Row"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:iFactr.UI.Row"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:iFactr.UI.Row"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Row.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:iFactr.UI.Row"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
            hash table.</returns>
        </member>
        <member name="M:iFactr.UI.Row.ToString">
            <summary>
            Returns a string representation of the current object.
            </summary>
        </member>
        <member name="M:iFactr.UI.Row.op_Equality(iFactr.UI.Row,iFactr.UI.Row)">
            <summary>
            Determines whether two <see cref="T:iFactr.UI.Row"/> objects are considered equal.
            </summary>
            <param name="value1">The first object to compare.</param>
            <param name="value2">The second object to compare.</param>
            <returns><c>true</c> if the objects are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Row.op_Inequality(iFactr.UI.Row,iFactr.UI.Row)">
            <summary>
            Determines whether two <see cref="T:iFactr.UI.Row"/> objects are not considered equal.
            </summary>
            <param name="value1">The first object to compare.</param>
            <param name="value2">The second object to compare.</param>
            <returns><c>true</c> if the objects are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Row.op_Addition(iFactr.UI.Row,System.Double)">
            <summary>
            Adds the specified <paramref name="amount"/> to the height of a <see cref="T:iFactr.UI.Row"/>.
            </summary>
            <param name="row">The row whose height is to be added to.</param>
            <param name="amount">The amount to add to the height of the row.</param>
            <returns>The result of adding the <paramref name="amount"/> to the row's height.</returns>
        </member>
        <member name="M:iFactr.UI.Row.op_Subtraction(iFactr.UI.Row,System.Double)">
            <summary>
            Subtracts the specified <paramref name="amount"/> from the height of a <see cref="T:iFactr.UI.Row"/>.
            </summary>
            <param name="row">The row whose height is to be subtracted from.</param>
            <param name="amount">The amount to subtract from the height of the row.</param>
            <returns>The result of subtracting the <paramref name="amount"/> from the row's height.</returns>
        </member>
        <member name="M:iFactr.UI.Row.op_Multiply(iFactr.UI.Row,System.Double)">
            <summary>
            Multiplies the height of a <see cref="T:iFactr.UI.Row"/> by the specified <paramref name="amount"/>.
            </summary>
            <param name="row">The row whose height is to be multiplied.</param>
            <param name="amount">The amount to multiply the height of the row.</param>
            <returns>The result of multiplying the row's height by the <paramref name="amount"/>.</returns>
        </member>
        <member name="M:iFactr.UI.Row.op_Division(iFactr.UI.Row,System.Double)">
            <summary>
            Divides the height of a <see cref="T:iFactr.UI.Row"/> by the specified <paramref name="amount"/>.
            </summary>
            <param name="row">The row whose height is to be divided.</param>
            <param name="amount">The amount to divide the height of the row.</param>
            <returns>The result of dividing the row's height by the <paramref name="amount"/>.</returns>
        </member>
        <member name="T:iFactr.UI.RowCollection">
            <summary>
            Represents a collection of <see cref="T:iFactr.UI.Row"/> objects.
            </summary>
        </member>
        <member name="M:iFactr.UI.RowCollection.Add(System.Double,iFactr.UI.LayoutUnitType)">
            <summary>
            Adds a <see cref="T:iFactr.UI.Row"/> object to the end of the collection.
            </summary>
            <param name="height">The height of the row, expressed in units specified by <paramref name="unitType"/>.</param>
            <param name="unitType">The type of unit that the <paramref name="height"/> value represents.</param>
        </member>
        <member name="M:iFactr.UI.RowCollection.Insert(System.Int32,System.Double,iFactr.UI.LayoutUnitType)">
            <summary>
            Inserts a <see cref="T:iFactr.UI.Row"/> object into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="height">The height of the row, expressed in units specified by <paramref name="unitType"/>.</param>
            <param name="unitType">The type of unit that the <paramref name="height"/> value represents.</param>
        </member>
        <member name="T:iFactr.UI.SectionCellDelegate">
            <summary>
            Represents the method that will retrieve an <see cref="T:iFactr.UI.ICell"/> instance when it is ready to be rendered on screen.
            </summary>
            <param name="index">The index at which the cell will be placed within the section.</param>
            <param name="recycledCell">An already instantiated cell that is ready for reuse, or <c>null</c> if no cell has been recycled.</param>
            <returns>The cell that will be rendered on screen.</returns>
        </member>
        <member name="T:iFactr.UI.SectionItemIdDelegate">
            <summary>
            Represents the method that will retrieve an identifier for determining which, if any, <see cref="T:iFactr.UI.ICell"/>
            instances can be reused for the item at the given position.
            </summary>
            <param name="index">The index at which the item will be placed in the section.</param>
            <returns>An identifier for determining which cells can be reused for the item at the given position.</returns>
        </member>
        <member name="T:iFactr.UI.Section">
            <summary>
            Represents a group of <see cref="T:iFactr.UI.ICell"/> objects within an <see cref="T:iFactr.UI.IListView"/> instance.
            </summary>
        </member>
        <member name="P:iFactr.UI.Section.Header">
            <summary>
            Gets or sets the header that displays on top of the section.
            </summary>
        </member>
        <member name="P:iFactr.UI.Section.Footer">
            <summary>
            Gets or sets the footer that displays on the bottom of the section.
            </summary>
        </member>
        <member name="P:iFactr.UI.Section.ItemCount">
            <summary>
            Gets or sets the total number of <see cref="T:iFactr.UI.ICell"/> objects that will go into the section.
            </summary>
        </member>
        <member name="P:iFactr.UI.Section.CellRequested">
            <summary>
            Invoked when a cell is ready to be rendered on the screen.  Return the <see cref="T:iFactr.UI.ICell"/>
            instance that should be placed at the given index within the section.
            </summary>
        </member>
        <member name="P:iFactr.UI.Section.ItemIdRequested">
            <summary>
            Invoked when a reuse identifier is needed for a cell.  Return the identifier that should be used
            to determine which cells may be reused for the item at the given index within the section.
            This is only invoked on platforms that support recycling.
            </summary>
        </member>
        <member name="M:iFactr.UI.Section.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Section"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Section.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Section"/> class.
            </summary>
            <param name="itemCount">The total number of <see cref="T:iFactr.UI.ICell"/> objects that will go into the section.</param>
        </member>
        <member name="M:iFactr.UI.Section.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Section"/> class.
            </summary>
            <param name="itemCount">The total number of <see cref="T:iFactr.UI.ICell"/> objects that will go into the section.</param>
            <param name="headerText">The text for the section header.</param>
        </member>
        <member name="M:iFactr.UI.Section.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Section"/> class.
            </summary>
            <param name="itemCount">The total number of <see cref="T:iFactr.UI.ICell"/> objects that will go into the section.</param>
            <param name="headerText">The text for the section header.</param>
            <param name="footerText">The text for the section footer.</param>
        </member>
        <member name="T:iFactr.UI.SectionCollection">
            <summary>
            Represents a collection of <see cref="T:iFactr.UI.Section"/> objects.
            </summary>
        </member>
        <member name="P:iFactr.UI.SectionCollection.Count">
            <summary>
            Gets the number of sections contained in the collection.
            </summary>
        </member>
        <member name="P:iFactr.UI.SectionCollection.System#Collections#Generic#ICollection{iFactr#UI#Section}#IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:iFactr.UI.SectionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the section at the specified index.
            </summary>
            <param name="index">The zero-based index of the section to get or set.</param>
        </member>
        <member name="M:iFactr.UI.SectionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.SectionCollection"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.SectionCollection.Add(System.Int32,System.String)">
            <summary>
            Adds a <see cref="T:iFactr.UI.Section"/> object to the end of the collection.  See Remarks.
            </summary>
            <param name="itemCount">The total number of <see cref="T:iFactr.UI.ICell"/> objects that will go into the section.</param>
            <param name="headerText">The text for the section header.</param>
            <remarks>It isn't necessary to explicitly add new sections to the collection.
            New sections will automatically be added when indexing the collection to ensure that the index is in range.</remarks>
        </member>
        <member name="M:iFactr.UI.SectionCollection.Add(System.Int32,System.String,System.String)">
            <summary>
            Adds a <see cref="T:iFactr.UI.Section"/> object to the end of the collection.  See Remarks.
            </summary>
            <param name="itemCount">The total number of <see cref="T:iFactr.UI.ICell"/> objects that will go into the section.</param>
            <param name="headerText">The text for the section header.</param>
            <param name="footerText">The text for the section footer.</param>
            <remarks>It isn't necessary to explicitly add new sections to the collection.
            New sections will automatically be added when indexing the collection to ensure that the index is in range.</remarks>
        </member>
        <member name="M:iFactr.UI.SectionCollection.Add(iFactr.UI.Section)">
            <summary>
            Adds a <see cref="T:iFactr.UI.Section"/> object to the end of the collection.  See Remarks.
            </summary>
            <param name="section">The section to add to the collection.</param>
            <remarks>It isn't necessary to explicitly add new sections to the collection.
            New sections will automatically be added when indexing the collection to ensure that the index is in range.</remarks>
        </member>
        <member name="M:iFactr.UI.SectionCollection.AddRange(System.Collections.Generic.IEnumerable{iFactr.UI.Section})">
            <summary>
            Adds a <see cref="T:iFactr.UI.Section"/> range to the end of the collection.  See Remarks.
            </summary>
            <param name="sections">The range of sections to add to the collection.</param>
            <remarks>It isn't necessary to explicitly add new sections to the collection.
            New sections will automatically be added when indexing the collection to ensure that the index is in range.</remarks>
        </member>
        <member name="M:iFactr.UI.SectionCollection.Insert(System.Int32,System.Int32,System.String)">
            <summary>
            Inserts a <see cref="T:iFactr.UI.Section"/> object into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="itemCount">The total number of <see cref="T:iFactr.UI.ICell"/> objects that will go into the section.</param>
            <param name="headerText">The text for the section header.</param>
        </member>
        <member name="M:iFactr.UI.SectionCollection.Insert(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Inserts a <see cref="T:iFactr.UI.Section"/> object into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="itemCount">The total number of <see cref="T:iFactr.UI.ICell"/> objects that will go into the section.</param>
            <param name="headerText">The text for the section header.</param>
            <param name="footerText">The text for the section footer.</param>
        </member>
        <member name="M:iFactr.UI.SectionCollection.Insert(System.Int32,iFactr.UI.Section)">
            <summary>
            Inserts a <see cref="T:iFactr.UI.Section"/> object into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="section">The section to be inserted into the collection.</param>
        </member>
        <member name="M:iFactr.UI.SectionCollection.IndexOf(iFactr.UI.Section)">
            <summary>
            Determines the index of a specific section in the collection.
            </summary>
            <param name="section">The section to locate in the collection.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:iFactr.UI.SectionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the section at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:iFactr.UI.SectionCollection.Clear">
            <summary>
            Removes all sections from the collection.
            </summary>
        </member>
        <member name="M:iFactr.UI.SectionCollection.Contains(iFactr.UI.Section)">
            <summary>
            Determines whether the collection contains a specific section.
            </summary>
            <param name="section">The section to locate in the collection.</param>
            <returns><c>true</c> if the section is found in the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.SectionCollection.CopyTo(iFactr.UI.Section[],System.Int32)">
            <summary>
            Copies the elements of the collection to an <see cref="T:System.Array"/>, starting at a particular index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements
            copied from the collection.  The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="array"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the number of elements in the source collection is
            greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
        </member>
        <member name="M:iFactr.UI.SectionCollection.Remove(iFactr.UI.Section)">
            <summary>
            Removes the first occurrence of a specific section from the collection.
            </summary>
            <param name="section">The section to remove from the collection.</param>
            <returns><c>true</c> if the section was successfully removed from the collection; otherwise, <c>false</c>.
            This method also returns <c>false</c> if the section was not found in the collection.</returns>
        </member>
        <member name="M:iFactr.UI.SectionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:iFactr.UI.SectionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="T:iFactr.UI.SectionFooter">
            <summary>
            Represents a UI element that acts as a footer for a <see cref="T:iFactr.UI.Section"/>.
            </summary>
        </member>
        <member name="F:iFactr.UI.SectionFooter.BackgroundColorProperty">
            <summary>
            The name of the <see cref="P:BackgroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.SectionFooter.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.SectionFooter.FontProperty">
            <summary>
            The name of the <see cref="P:Font"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.SectionFooter.TextProperty">
            <summary>
            The name of the <see cref="P:Text"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="P:iFactr.UI.SectionFooter.BackgroundColor">
            <summary>
            Gets or sets the background color of the footer.
            </summary>
        </member>
        <member name="P:iFactr.UI.SectionFooter.ForegroundColor">
            <summary>
            Gets or sets the color of the foreground content of the footer.
            </summary>
        </member>
        <member name="P:iFactr.UI.SectionFooter.Font">
            <summary>
            Gets or sets the font to be used when rendering the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.SectionFooter.Text">
            <summary>
            Gets or sets the text that will be displayed on screen.
            </summary>
        </member>
        <member name="P:iFactr.UI.SectionFooter.Pair">
            <summary>
            Gets or sets the native object that is paired with this instance.  This can be set only once.
            </summary>
        </member>
        <member name="M:iFactr.UI.SectionFooter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.SectionFooter"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.SectionFooter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.SectionFooter"/> class.
            </summary>
            <param name="text">The text to be displayed on the screen.</param>
        </member>
        <member name="M:iFactr.UI.SectionFooter.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.SectionFooter.Equals(iFactr.UI.ISectionFooter)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.ISectionFooter"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:iFactr.UI.ISectionFooter"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.ISectionFooter"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.SectionFooter.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:iFactr.UI.SectionFooter"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="T:iFactr.UI.SectionHeader">
            <summary>
            Represents a UI element that acts as a header for a <see cref="T:iFactr.UI.Section"/>.
            </summary>
        </member>
        <member name="F:iFactr.UI.SectionHeader.BackgroundColorProperty">
            <summary>
            The name of the <see cref="P:BackgroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.SectionHeader.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.SectionHeader.FontProperty">
            <summary>
            The name of the <see cref="P:Font"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.SectionHeader.TextProperty">
            <summary>
            The name of the <see cref="P:Text"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="P:iFactr.UI.SectionHeader.BackgroundColor">
            <summary>
            Gets or sets the background color of the header.
            </summary>
        </member>
        <member name="P:iFactr.UI.SectionHeader.ForegroundColor">
            <summary>
            Gets or sets the color of the foreground content of the header.
            </summary>
        </member>
        <member name="P:iFactr.UI.SectionHeader.Font">
            <summary>
            Gets or sets the font to be used when rendering the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.SectionHeader.Text">
            <summary>
            Gets or sets the text that will be displayed on screen.
            </summary>
        </member>
        <member name="P:iFactr.UI.SectionHeader.Pair">
            <summary>
            Gets or sets the native object that is paired with this instance.  This can be set only once.
            </summary>
        </member>
        <member name="M:iFactr.UI.SectionHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.SectionHeader"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.SectionHeader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.SectionHeader"/> class.
            </summary>
            <param name="text">The text to be displayed on the screen.</param>
        </member>
        <member name="M:iFactr.UI.SectionHeader.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.SectionHeader.Equals(iFactr.UI.ISectionHeader)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.ISectionHeader"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:iFactr.UI.ISectionHeader"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.ISectionHeader"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.SectionHeader.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:iFactr.UI.SectionHeader"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="T:iFactr.UI.TableCell">
            <summary>
            Represents a cell that lays its contents out in a table of rows and columns.
            The contents are automatically laid out in a manner appropriate to the target platform.
            </summary>
        </member>
        <member name="P:iFactr.UI.TableCell.TableHeader">
            <summary>
            Gets the header label for the table.
            </summary>
        </member>
        <member name="P:iFactr.UI.TableCell.RowHeaders">
            <summary>
            Gets the header labels for each row in the table.
            </summary>
        </member>
        <member name="P:iFactr.UI.TableCell.ColumnHeaders">
            <summary>
            Gets the header labels for each column in the table.
            </summary>
        </member>
        <member name="P:iFactr.UI.TableCell.RowCount">
            <summary>
            Gets the number of rows in the table.
            </summary>
        </member>
        <member name="P:iFactr.UI.TableCell.ColumnCount">
            <summary>
            Gets the number of columns in the table.
            </summary>
        </member>
        <member name="M:iFactr.UI.TableCell.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.TableCell"/> class.
            </summary>
            <param name="rowCount">The number of rows with which to initially set up the table.</param>
            <param name="columnCount">The number of columns with which to initially set up the table.</param>
        </member>
        <member name="M:iFactr.UI.TableCell.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.TableCell"/> class.
            </summary>
            <param name="rowHeaders">The strings to be used as headers for each row.  The number of rows will equal the number of strings provided.</param>
            <param name="columnHeaders">The strings to be used as headers for each column.  The number of columns will equal the number of strings provided.</param>
        </member>
        <member name="M:iFactr.UI.TableCell.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.TableCell"/> class.
            </summary>
            <param name="headerText">The text to display in the table header.</param>
            <param name="rowCount">The number of rows with which to initially set up the table.</param>
            <param name="columnCount">The number of columns with which to initially set up the table.</param>
        </member>
        <member name="M:iFactr.UI.TableCell.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.TableCell"/> class.
            </summary>
            <param name="headerText">The text to display in the table header.</param>
            <param name="rowHeaders">The strings to be used as headers for each row.  The number of rows will equal the number of strings provided.</param>
            <param name="columnHeaders">The strings to be used as headers for each column.  The number of columns will equal the number of strings provided.</param>
        </member>
        <member name="M:iFactr.UI.TableCell.GetControlsForColumn(System.Int32)">
            <summary>
            Returns the <see cref="T:iFactr.UI.Controls.IControl"/> instances that currently reside within the specified column.
            </summary>
            <param name="columnIndex">The zero-based index of the column in which to retrieve the controls.</param>
            <returns>An <see cref="T:System.Array"/> containing the controls currently within the column.</returns>
        </member>
        <member name="M:iFactr.UI.TableCell.SetControlsForColumn(System.Int32,iFactr.UI.Controls.IControl[])">
            <summary>
            Adds the specified <see cref="T:iFactr.UI.Controls.IControl"/> instances to the specified column, replacing any controls that were already in the column.
            </summary>
            <param name="columnIndex">The zero-based index of the column in which to place the controls.</param>
            <param name="controls">The controls to be placed in the column specified by <paramref name="columnIndex"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="columnIndex"/> is less than 0 -or-
            when <paramref name="columnIndex"/> is greater than or equal to the number of columns currently in the table.</exception>
        </member>
        <member name="M:iFactr.UI.TableCell.AddRows(System.Int32,System.String[])">
            <summary>
            Adds the specified number of rows to the bottom of the table.
            </summary>
            <param name="count">The number of rows to add to the bottom of the table.</param>
            <param name="headerTexts">Optional strings to apply to the header labels of the new rows.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="count"/> is less than 0.</exception>
        </member>
        <member name="M:iFactr.UI.TableCell.AddColumns(System.Int32,System.String[])">
            <summary>
            Adds the specified number of columns to the right side of the table.
            </summary>
            <param name="count">The number of columns to add to the right side of the table.</param>
            <param name="headerTexts">Optional strings to apply to the header labels of the new columns.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="count"/> is less than 0.</exception>
        </member>
        <member name="M:iFactr.UI.TableCell.RemoveRows(System.Int32)">
            <summary>
            Removes the specified number of rows from the bottom of the table.
            </summary>
            <param name="count">The number of rows to remove from the bottom of the table.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="count"/> is less than 0 -or-
            when <paramref name="count"/> is greater than the number of rows currently in the table.</exception>
        </member>
        <member name="M:iFactr.UI.TableCell.RemoveColumns(System.Int32)">
            <summary>
            Removes the specified number of columns from the right side of the table.
            </summary>
            <param name="count">The number of columns to remove from the right side of the table.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="count"/> is less than 0 -or-
            when <paramref name="count"/> is greater than the number of columns currently in the table.</exception>
        </member>
        <member name="T:iFactr.UI.Color">
            <summary>
            Represents a color value with red, green, blue, and alpha components.
            </summary>
        </member>
        <member name="F:iFactr.UI.Color.A">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="F:iFactr.UI.Color.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:iFactr.UI.Color.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:iFactr.UI.Color.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="P:iFactr.UI.Color.HexCode">
            <summary>
            Gets or sets the hexidecimal value that this instance equates to.
            </summary>
        </member>
        <member name="P:iFactr.UI.Color.IsDefaultColor">
            <summary>
            Gets a value indicating whether this instance represents a null color value (#00000000).
            Using a default color value to set a property on a UI element will reset that property to
            the current platform's default value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Color.Black">
            <summary>
            Gets a black color.
            </summary>
        </member>
        <member name="P:iFactr.UI.Color.Blue">
            <summary>
            Gets a blue color.
            </summary>
        </member>
        <member name="P:iFactr.UI.Color.Brown">
            <summary>
            Gets a brown color.
            </summary>
        </member>
        <member name="P:iFactr.UI.Color.Cyan">
            <summary>
            Gets a cyan color.
            </summary>
        </member>
        <member name="P:iFactr.UI.Color.Gray">
            <summary>
            Gets a gray color.
            </summary>
        </member>
        <member name="P:iFactr.UI.Color.Green">
            <summary>
            Gets a green color.
            </summary>
        </member>
        <member name="P:iFactr.UI.Color.Orange">
            <summary>
            Gets an orange color.
            </summary>
        </member>
        <member name="P:iFactr.UI.Color.Purple">
            <summary>
            Gets a purple color.
            </summary>
        </member>
        <member name="P:iFactr.UI.Color.Red">
            <summary>
            Gets a red color.
            </summary>
        </member>
        <member name="P:iFactr.UI.Color.Transparent">
            <summary>
            Gets a transparent color.
            </summary>
        </member>
        <member name="P:iFactr.UI.Color.White">
            <summary>
            Gets a white color.
            </summary>
        </member>
        <member name="P:iFactr.UI.Color.Yellow">
            <summary>
            Gets a yellow color.
            </summary>
        </member>
        <member name="M:iFactr.UI.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Color"/> structure using the ARGB values provided.
            </summary>
            <param name="alpha">The alpha component value.</param>
            <param name="red">The red component value.</param>
            <param name="green">The green component value.</param>
            <param name="blue">The blue component value.</param>
        </member>
        <member name="M:iFactr.UI.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Color"/> structure using the RGB values provided.
            </summary>
            <param name="red">The red component value.</param>
            <param name="green">The green component value.</param>
            <param name="blue">The blue component value.</param>
        </member>
        <member name="M:iFactr.UI.Color.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Color"/> structure using the hexidecimal code provided.
            </summary>
            <param name="hexCode">A <see cref="T:System.String"/> representing the Hex code value.</param>
        </member>
        <member name="M:iFactr.UI.Color.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:iFactr.UI.Color"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:iFactr.UI.Color"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:iFactr.UI.Color"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Color.Equals(iFactr.UI.Color)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.Color"/> is equal to the current <see cref="T:iFactr.UI.Color"/>.
            </summary>
            <param name="color">The <see cref="T:iFactr.UI.Color"/> to compare with the current <see cref="T:iFactr.UI.Color"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.Color"/> is equal to the current
            <see cref="T:iFactr.UI.Color"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Color.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:iFactr.UI.Color"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
            hash table.</returns>
        </member>
        <member name="M:iFactr.UI.Color.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:iFactr.UI.Color"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:iFactr.UI.Color"/>.</returns>
        </member>
        <member name="M:iFactr.UI.Color.op_Equality(iFactr.UI.Color,iFactr.UI.Color)">
            <summary>
            Determines whether two <see cref="T:iFactr.UI.Color"/> objects are considered equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><c>true</c> if the objects are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Color.op_Inequality(iFactr.UI.Color,iFactr.UI.Color)">
            <summary>
            Determines whether two <see cref="T:iFactr.UI.Color"/> objects are not considered equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><c>true</c> if the objects are not considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Color.op_Implicit(iFactr.Core.Styles.Style.Color)~iFactr.UI.Color">
            <summary>
            Implicitly converts the specified <see cref="T:iFactr.Core.Styles.Style.Color"/> object into a <see cref="T:iFactr.UI.Color"/> object.
            </summary>
            <param name="color">The object to be converted.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:iFactr.UI.Color.op_Implicit(iFactr.UI.Color)~iFactr.Core.Styles.Style.Color">
            <summary>
            Implicitly converts the specified <see cref="T:iFactr.UI.Color"/> object into a <see cref="T:iFactr.Core.Styles.Style.Color"/> object.
            </summary>
            <param name="color">The object to be converted.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="T:iFactr.UI.Controls.Button">
            <summary>
            Represents a UI element that can perform application-defined behavior when the user clicks or taps on it.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Button.BackgroundColorProperty">
            <summary>
            The name of the <see cref="P:BackgroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Button.FontProperty">
            <summary>
            The name of the <see cref="P:Font"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Button.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Button.ImageProperty">
            <summary>
            The name of the <see cref="P:Image"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Button.NavigationLinkProperty">
            <summary>
            The name of the <see cref="P:NavigationLink"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Button.TitleProperty">
            <summary>
            The name of the <see cref="P:Title"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.Button.Clicked">
            <summary>
            Occurs when the user clicks or taps on the button.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Button.BackgroundColor">
            <summary>
            Gets or sets the background color of the button.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Button.Font">
            <summary>
            Gets or sets the font to be used when rendering the button's title.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Button.ForegroundColor">
            <summary>
            Gets or sets the color of the button's foreground content.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Button.Image">
            <summary>
            Gets or sets an image to display with the button.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Button.NavigationLink">
            <summary>
            Gets or sets the link to navigate to when the button is selected.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.Controls.Button.Clicked"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Button.Title">
            <summary>
            Gets or sets the title of the button.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.Button.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.Button"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.Button.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.Button"/> class.
            </summary>
            <param name="title">The title to display with the button.</param>
        </member>
        <member name="T:iFactr.UI.Controls.Control">
            <summary>
            Represents a UI element that holds a value and can be interacted with by the user.  This class is abstract.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Control.IsEnabledProperty">
            <summary>
            The name of the <see cref="P:IsEnabled"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Control.StringValueProperty">
            <summary>
            The name of the <see cref="P:StringValue"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Control.SubmitKeyProperty">
            <summary>
            The name of the <see cref="P:SubmitKey"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.Control.Validating">
            <summary>
            Occurs when the control is being validated.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Control.IsEnabled">
            <summary>
            Gets or sets a value indicating whether or not the user can interact with this control.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Control.StringValue">
            <summary>
            Gets the string representation of the control's current value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Control.SubmitKey">
            <summary>
            Gets or sets the key to use when submitting control values.
            If a key is not set, the control will not be submitted.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.Control.NullifyEvents">
            <summary>
            Resets the invocation list of all events within the class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.Control.Validate(System.String[]@)">
            <summary>
            Fires the <see cref="E:iFactr.UI.Controls.Control.Validating"/> event and returns a value indicating whether or not validation has passed.
            </summary>
            <param name="errors">When the method returns, an array of validation errors that have occurred.</param>
            <returns><c>true</c> if validation has passed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.UI.Controls.DatePicker">
            <summary>
            Represents a UI element that lets the user select from a range of date values.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.DatePicker.BackgroundColorProperty">
            <summary>
            The name of the <see cref="P:BackgroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.DatePicker.FontProperty">
            <summary>
            The name of the <see cref="P:Font"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.DatePicker.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.DatePicker.DateProperty">
            <summary>
            The name of the <see cref="P:Date"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.DatePicker.DateFormatProperty">
            <summary>
            The name of the <see cref="P:DateFormat"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.DatePicker.DateChanged">
            <summary>
            Occurs when the picker's selected date has changed.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.DatePicker.BackgroundColor">
            <summary>
            Gets or sets the background color of the picker.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.DatePicker.Font">
            <summary>
            Gets or sets the font to be used when rendering the picker's value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.DatePicker.ForegroundColor">
            <summary>
            Gets or sets the color of the picker's foreground content.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.DatePicker.Date">
            <summary>
            Gets or sets the selected date for the picker.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.DatePicker.DateFormat">
            <summary>
            Gets or sets a string that describes the format in which the picker's value should be presented.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.DatePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.DatePicker"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.DatePicker.#ctor(System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.DatePicker"/> class.
            </summary>
            <param name="value">The initial selected value.</param>
        </member>
        <member name="M:iFactr.UI.Controls.DatePicker.ShowPicker">
            <summary>
            Programmatically presents the picker to the user.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.Image">
            <summary>
            Represents a UI element for displaying an image from a file.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Image.FilePathProperty">
            <summary>
            The name of the <see cref="P:FilePath"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Image.DimensionsProperty">
            <summary>
            The name of the <see cref="P:Dimensions"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Image.StretchProperty">
            <summary>
            The name of the <see cref="P:Stretch"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.Image.Clicked">
            <summary>
            Occurs when the user clicks or taps on the image.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.Image.Loaded">
            <summary>
            Occurs when the data for the image has been loaded into memory.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Image.FilePath">
            <summary>
            Gets or sets the full path of the file for the image that is being rendered.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Image.Dimensions">
            <summary>
            Gets the width and height of the image.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Image.Stretch">
            <summary>
            Gets or sets how the image should be stretched to fill the space that is available to it.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.Image.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.Image"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.Image.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.Image"/> class.
            </summary>
            <param name="filePath">The full path of the file for the image.</param>
        </member>
        <member name="M:iFactr.UI.Controls.Image.#ctor(System.String,iFactr.UI.ImageCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.Image"/> class.
            </summary>
            <param name="filePath">The full path of the file for the image.</param>
            <param name="options">Additional options to apply to the image during creation.</param>
        </member>
        <member name="M:iFactr.UI.Controls.Image.#ctor(MonoCross.IImageData)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.Image"/> class.
            </summary>
            <param name="imageData">The in-memory data of the image.  This data will not be cached automatically
            and must be added to the cache manually if caching is desired.</param>
        </member>
        <member name="M:iFactr.UI.Controls.Image.GetImageData">
            <summary>
            Returns the data of the image that is being displayed by this control.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.IButton">
            <summary>
            Defines a UI element that can perform application-defined behavior when the user clicks or taps on it.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IButton.BackgroundColor">
            <summary>
            Gets or sets the background color of the button.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IButton.Font">
            <summary>
            Gets or sets the font to be used when rendering the button's title.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IButton.ForegroundColor">
            <summary>
            Gets or sets the color of the button's foreground content.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IButton.Image">
            <summary>
            Gets or sets an image to display with the button.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IButton.NavigationLink">
            <summary>
            Gets or sets the link to navigate to when the button is selected.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.Controls.IButton.Clicked"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IButton.Title">
            <summary>
            Gets or sets the title of the button.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.IButton.Clicked">
            <summary>
            Occurs when the user clicks or taps on the button.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.IControl">
            <summary>
            Defines a UI element that holds a value and can be interacted with by the user.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IControl.IsEnabled">
            <summary>
            Gets or sets a value indicating whether or not the user can interact with this control.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IControl.StringValue">
            <summary>
            Gets the string representation of the control's current value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IControl.SubmitKey">
            <summary>
            Gets or sets the key to use when submitting control values.
            If a key is not set, the control will not be submitted.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.IControl.Validating">
            <summary>
            Occurs when the control is being validated.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.IControl.NullifyEvents">
            <summary>
            Resets the invocation list of all events within the class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.IControl.Validate(System.String[]@)">
            <summary>
            Fires the <see cref="E:iFactr.UI.Controls.IControl.Validating"/> event and returns a value indicating whether or not validation has passed.
            </summary>
            <param name="errors">When the method returns, an array of validation errors that have occurred.</param>
            <returns><c>true</c> if validation has passed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.UI.Controls.IDatePicker">
            <summary>
            Defines a UI element that lets the user select from a range of date values.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IDatePicker.BackgroundColor">
            <summary>
            Gets or sets the background color of the picker.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IDatePicker.Date">
            <summary>
            Gets or sets the selected date for the picker.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IDatePicker.DateFormat">
            <summary>
            Gets or sets a string that describes the format in which the picker's value should be presented.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IDatePicker.Font">
            <summary>
            Gets or sets the font to be used when rendering the picker's value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IDatePicker.ForegroundColor">
            <summary>
            Gets or sets the color of the picker's foreground content.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.IDatePicker.DateChanged">
            <summary>
            Occurs when the picker's selected date has changed.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.IDatePicker.ShowPicker">
            <summary>
            Programmatically presents the picker to the user.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.IImage">
            <summary>
            Defines a UI element for displaying an image from a file.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IImage.FilePath">
            <summary>
            Gets or sets the full path of the file for the image that is being rendered.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IImage.Dimensions">
            <summary>
            Gets the width and height of the image.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IImage.Stretch">
            <summary>
            Gets or sets how the image should be stretched to fill the space that is available to it.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.IImage.Clicked">
            <summary>
            Occurs when the user clicks or taps on the image.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.IImage.Loaded">
            <summary>
            Occurs when the data for the image has been loaded into memory.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.IImage.GetImageData">
            <summary>
            Returns the data of the image that is being displayed by this control.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.ILabel">
            <summary>
            Defines a UI element that can display a string of read-only text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ILabel.Font">
            <summary>
            Gets or sets the font to be used when rendering the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ILabel.ForegroundColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ILabel.HighlightColor">
            <summary>
            Gets or sets the color of the text when the label is in a cell that is being highlighted.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ILabel.Lines">
            <summary>
            Gets or sets the maximum number of lines of text that the label is allowed to display.
            A value equal to or less than 0 means that there is no limit.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ILabel.Text">
            <summary>
            Gets or sets the text to be rendered.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ILabel.TextAlignment">
            <summary>
            Gets or sets how the text is aligned within the label.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.IPasswordBox">
            <summary>
            Defines a UI element that can accept a single line of text input from the user.
            The input is masked so that it cannot be read, allowing for secured entry of sensitive information.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IPasswordBox.BackgroundColor">
            <summary>
            Gets or sets the background color of the password box.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IPasswordBox.Expression">
            <summary>
            Gets or sets a regular expression string for restricting the text that the user can input.
            A value of <c>null</c> means that there is no restriction.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IPasswordBox.Font">
            <summary>
            Gets or sets the font to be used when rendering masked input characters.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IPasswordBox.ForegroundColor">
            <summary>
            Gets or sets the color of the masked input characters.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IPasswordBox.IsFocused">
            <summary>
            Gets a value indicating whether or not this instance has input focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IPasswordBox.KeyboardType">
            <summary>
            Gets or sets the type of soft keyboard to use when the password box has focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IPasswordBox.KeyboardReturnType">
            <summary>
            Gets or sets how the 'Return' key of a soft keyboard should be presented when the password box has focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IPasswordBox.Password">
            <summary>
            Gets or sets the password value inside of the password box.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IPasswordBox.Placeholder">
            <summary>
            Gets or sets the text to display when the password box does not have a value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IPasswordBox.PlaceholderColor">
            <summary>
            Gets or sets the color of the placeholder text.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.IPasswordBox.GotFocus">
            <summary>
            Occurs when the password box receives focus.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.IPasswordBox.LostFocus">
            <summary>
            Occurs when the password box loses focus.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.IPasswordBox.PasswordChanged">
            <summary>
            Occurs when the password box's password value has changed.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.IPasswordBox.ReturnKeyPressed">
            <summary>
            Occurs when the 'Return' key on the keyboard is pressed.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.IPasswordBox.Focus">
            <summary>
            Programmatically sets input focus to the password box.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.ISelectList">
            <summary>
            Defines a UI element that lets the user make a single selection from a list of items.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ISelectList.BackgroundColor">
            <summary>
            Gets or sets the background color of the select list.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ISelectList.Font">
            <summary>
            Gets or sets the font to be used when rendering each item in the list.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ISelectList.ForegroundColor">
            <summary>
            Gets or sets the color of each item in the list.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ISelectList.Items">
            <summary>
            Gets or sets a collection of the items that are to be presented in the select list.
            The select list will render the string that is returned by each item's ToString method.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ISelectList.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ISelectList.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.ISelectList.SelectionChanged">
            <summary>
            Occurs when the selected item has changed.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.ISelectList.ShowList">
            <summary>
            Programmatically presents the list to the user.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.ISlider">
            <summary>
            Defines a UI element that lets the user select from a range of numerical values by sliding a knob along a track.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ISlider.MaximumTrackColor">
            <summary>
            Gets or sets the color of the track between the knob and the maximum value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ISlider.MinimumTrackColor">
            <summary>
            Gets or sets the color of the track between the knob and the minimum value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ISlider.MaxValue">
            <summary>
            Gets or sets the maximum numerical value that the user can select with the knob.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ISlider.MinValue">
            <summary>
            Gets or sets the minimum numerical value that the user can select with the knob.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ISlider.Value">
            <summary>
            Gets or sets the selected value of the slider.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.ISlider.ValueChanged">
            <summary>
            Occurs when the slider's selected value has changed.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.ISwitch">
            <summary>
            Defines a UI element that holds a boolean value and can be toggled by the user.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ISwitch.FalseColor">
            <summary>
            Gets or sets the color of the switch when its value is <c>false</c>.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ISwitch.ForegroundColor">
            <summary>
            Gets or sets the color of any additional visual information that is part of the switch.
            For example, Metro and Windows Phone include text that represents the value of the switch.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ISwitch.TrueColor">
            <summary>
            Gets or sets the color of the switch when its value is <c>true</c>.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ISwitch.Value">
            <summary>
            Gets or sets the boolean value of the switch.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.ISwitch.ValueChanged">
            <summary>
            Occurs when the switch's boolean value has changed.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.ITextArea">
            <summary>
            Defines a UI element that can accept multiple lines of text input from the user.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextArea.BackgroundColor">
            <summary>
            Gets or sets the background color of the text area.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextArea.Expression">
            <summary>
            Gets or sets a regular expression string for restricting the text that the user can input.
            A value of <c>null</c> means that there is no restriction.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextArea.Font">
            <summary>
            Gets or sets the font to be used when rendering the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextArea.ForegroundColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextArea.IsFocused">
            <summary>
            Gets a value indicating whether or not this instance has input focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextArea.KeyboardType">
            <summary>
            Gets or sets the type of soft keyboard to use when the text area has focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextArea.KeyboardReturnType">
            <summary>
            Gets or sets how the 'Return' key of a soft keyboard should be presented when the text box has focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextArea.Placeholder">
            <summary>
            Gets or sets the text to display when the text area does not have a value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextArea.PlaceholderColor">
            <summary>
            Gets or sets the color of the placeholder text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextArea.Text">
            <summary>
            Gets or sets the text value inside of the text area.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextArea.TextAlignment">
            <summary>
            Gets or sets how the text is aligned within the text area.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextArea.TextCompletion">
            <summary>
            Gets or sets completion behavior for text that is entered into the text area.
            Not all platforms support all behaviors.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.ITextArea.GotFocus">
            <summary>
            Occurs when the text area receives focus.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.ITextArea.LostFocus">
            <summary>
            Occurs when the text area loses focus.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.ITextArea.ReturnKeyPressed">
            <summary>
            Occurs when the 'Return' key on the keyboard is pressed.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.ITextArea.TextChanged">
            <summary>
            Occurs when the text area's text value has changed.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.ITextArea.Focus">
            <summary>
            Programmatically sets input focus to the text box.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.ITextBox">
            <summary>
            Defines a UI element that can accept a single line of text input from the user.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextBox.BackgroundColor">
            <summary>
            Gets or sets the background color of the text box.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextBox.Expression">
            <summary>
            Gets or sets a regular expression string for restricting the text that the user can input.
            A value of <c>null</c> means that there is no restriction.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextBox.Font">
            <summary>
            Gets or sets the font to be used when rendering the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextBox.ForegroundColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextBox.IsFocused">
            <summary>
            Gets a value indicating whether or not this instance has input focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextBox.KeyboardType">
            <summary>
            Gets or sets the type of soft keyboard to use when the text box has focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextBox.KeyboardReturnType">
            <summary>
            Gets or sets how the 'Return' key of a soft keyboard should be presented when the text box has focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextBox.Placeholder">
            <summary>
            Gets or sets the text to display when the text box does not have a value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextBox.PlaceholderColor">
            <summary>
            Gets or sets the color of the placeholder text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextBox.Text">
            <summary>
            Gets or sets the text value inside of the text box.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextBox.TextAlignment">
            <summary>
            Gets or sets how the text is aligned within the text box.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITextBox.TextCompletion">
            <summary>
            Gets or sets completion behavior for text that is entered into the text box.
            Not all platforms support all behaviors.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.ITextBox.GotFocus">
            <summary>
            Occurs when the text box receives focus.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.ITextBox.LostFocus">
            <summary>
            Occurs when the text box loses focus.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.ITextBox.ReturnKeyPressed">
            <summary>
            Occurs when the 'Return' key on the keyboard is pressed.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.ITextBox.TextChanged">
            <summary>
            Occurs when the text box's text value has changed.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.ITextBox.Focus">
            <summary>
            Programmatically sets input focus to the text box.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.ITimePicker">
            <summary>
            Defines a UI element that lets the user select from a range of time values.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITimePicker.BackgroundColor">
            <summary>
            Gets or sets the background color of the picker.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITimePicker.Font">
            <summary>
            Gets or sets the font to be used when rendering the picker's value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITimePicker.ForegroundColor">
            <summary>
            Gets or sets the color of the picker's foreground content.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITimePicker.Time">
            <summary>
            Gets or sets the selected time for the picker.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.ITimePicker.TimeFormat">
            <summary>
            Gets or sets a string that describes the format in which the picker's value should be presented.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.ITimePicker.TimeChanged">
            <summary>
            Occurs when the picker's selected time has changed.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.ITimePicker.ShowPicker">
            <summary>
            Programmatically presents the picker to the user.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.Label">
            <summary>
            Represents a UI element that can display a string of read-only text.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Label.FontProperty">
            <summary>
            The name of the <see cref="P:Font"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Label.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Label.HighlightColorProperty">
            <summary>
            The name of the <see cref="P:HighlightColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Label.LinesProperty">
            <summary>
            The name of the <see cref="P:Lines"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Label.TextProperty">
            <summary>
            The name of the <see cref="P:Text"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Label.TextAlignmentProperty">
            <summary>
            The name of the <see cref="P:TextAlignment"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Label.Font">
            <summary>
            Gets or sets the font to be used when rendering the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Label.ForegroundColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Label.HighlightColor">
            <summary>
            Gets or sets the color of the text when the label is in a cell that is being highlighted.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Label.Lines">
            <summary>
            Gets or sets the maximum number of lines of text that the label is allowed to display.
            A value equal to or less than 0 means that there is no limit.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Label.Text">
            <summary>
            Gets or sets the text to be rendered.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Label.TextAlignment">
            <summary>
            Gets or sets how the text is aligned within the text box.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.Label.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.Label"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.Label.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.Label"/> class.
            </summary>
            <param name="text">The text to be rendered.</param>
        </member>
        <member name="T:iFactr.UI.Controls.PasswordBox">
            <summary>
            Represents a UI element that can accept a single line of text input from the user.
            The input is masked so that it cannot be read, allowing for secured entry of sensitive information.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.PasswordBox.BackgroundColorProperty">
            <summary>
            The name of the <see cref="P:BackgroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.PasswordBox.ExpressionProperty">
            <summary>
            The name of the <see cref="P:Expression"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.PasswordBox.FontProperty">
            <summary>
            The name of the <see cref="P:Font"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.PasswordBox.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.PasswordBox.IsFocusedProperty">
            <summary>
            The name of the <see cref="P:IsFocused"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.PasswordBox.KeyboardTypeProperty">
            <summary>
            The name of the <see cref="P:KeyboardType"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.PasswordBox.KeyboardReturnTypeProperty">
            <summary>
            The name of the <see cref="P:KeyboardReturnType"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.PasswordBox.PasswordProperty">
            <summary>
            The name of the <see cref="P:Password"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.PasswordBox.PlaceholderProperty">
            <summary>
            The name of the <see cref="P:Placeholder"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.PasswordBox.PlaceholderColorProperty">
            <summary>
            The name of the <see cref="P:PlaceholderColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.PasswordBox.GotFocus">
            <summary>
            Occurs when the password box receives focus.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.PasswordBox.LostFocus">
            <summary>
            Occurs when the password box loses focus.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.PasswordBox.PasswordChanged">
            <summary>
            Occurs when the password box's password value has changed.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.PasswordBox.ReturnKeyPressed">
            <summary>
            Occurs when the 'Return' key on the keyboard is pressed.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.PasswordBox.BackgroundColor">
            <summary>
            Gets or sets the background color of the password box.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.PasswordBox.Expression">
            <summary>
            Gets or sets a regular expression string for restricting the text that the user can input.
            A value of <c>null</c> means that there is no restriction.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.PasswordBox.Font">
            <summary>
            Gets or sets the font to be used when rendering masked input characters.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.PasswordBox.ForegroundColor">
            <summary>
            Gets or sets the color of masked input characters.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.PasswordBox.IsFocused">
            <summary>
            Gets a value indicating whether or not this instance has input focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.PasswordBox.KeyboardType">
            <summary>
            Gets or sets the type of soft keyboard to use when the password box has focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.PasswordBox.KeyboardReturnType">
            <summary>
            Gets or sets how the 'Return' key of a soft keyboard should be presented when the password box has focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.PasswordBox.Password">
            <summary>
            Gets or sets the password value inside of the password box.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.PasswordBox.Placeholder">
            <summary>
            Gets or sets the text to display when the password box does not have a value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.PasswordBox.PlaceholderColor">
            <summary>
            Gets or sets the color of the placeholder text.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.PasswordBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.PasswordBox"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.PasswordBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.PasswordBox"/> class.
            </summary>
            <param name="password">The initial password value.</param>
        </member>
        <member name="M:iFactr.UI.Controls.PasswordBox.Focus">
            <summary>
            Programmatically sets input focus to the password box.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.SelectList">
            <summary>
            Represents a UI element that lets the user make a single selection from a list of items.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.SelectList.BackgroundColorProperty">
            <summary>
            The name of the <see cref="P:BackgroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.SelectList.FontProperty">
            <summary>
            The name of the <see cref="P:Font"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.SelectList.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.SelectList.ItemsProperty">
            <summary>
            The name of the <see cref="P:Items"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.SelectList.SelectedIndexProperty">
            <summary>
            The name of the <see cref="P:SelectedIndex"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.SelectList.SelectedItemProperty">
            <summary>
            The name of the <see cref="P:SelectedItem"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.SelectList.SelectionChanged">
            <summary>
            Occurs when the selected item has changed.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.SelectList.BackgroundColor">
            <summary>
            Gets or sets the background color of the select list.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.SelectList.Font">
            <summary>
            Gets or sets the font to be used when rendering each item in the list.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.SelectList.ForegroundColor">
            <summary>
            Gets or sets the color of each item in the list.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.SelectList.Items">
            <summary>
            Gets or sets a collection of the items that are to be presented in the select list.
            The select list will render the string that is returned by each item's ToString method.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.SelectList.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.SelectList.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.SelectList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.SelectList"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.SelectList.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.SelectList"/> class.
            </summary>
            <param name="items">A collection containing the items that are to be presented in the list.</param>
        </member>
        <member name="M:iFactr.UI.Controls.SelectList.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.SelectList"/> class.
            </summary>
            <param name="items">The items that are to be presented in the list.</param>
        </member>
        <member name="M:iFactr.UI.Controls.SelectList.ShowList">
            <summary>
            Programmatically presents the list to the user.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.Slider">
            <summary>
            Represents a UI element that lets the user select from a range of numerical values by sliding a knob along a track.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Slider.MaximumTrackColorProperty">
            <summary>
            The name of the <see cref="P:MaximumTrackColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Slider.MinimumTrackColorProperty">
            <summary>
            The name of the <see cref="P:MinimumTrackColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Slider.MaxValueProperty">
            <summary>
            The name of the <see cref="P:MaxValue"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Slider.MinValueProperty">
            <summary>
            The name of the <see cref="P:MinValue"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Slider.ValueProperty">
            <summary>
            The name of the <see cref="P:Value"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.Slider.ValueChanged">
            <summary>
            Occurs when the slider's selected value has changed.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Slider.MaximumTrackColor">
            <summary>
            Gets or sets the color of the track between the knob and the maximum value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Slider.MinimumTrackColor">
            <summary>
            Gets or sets the color of the track between the knob and the minimum value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Slider.MaxValue">
            <summary>
            Gets or sets the maximum numerical value that the user can select with the knob.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Slider.MinValue">
            <summary>
            Gets or sets the minimum numerical value that the user can select with the knob.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Slider.StepSize">
            <summary>
            Gets or sets the increment value. User can only select values that are multiples of this value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Slider.Value">
            <summary>
            Gets or sets the selected value of the slider.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.Slider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.Slider"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.Slider.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.Slider"/> class.
            </summary>
            <param name="minValue">The minimum numerical value that the user can select with the knob.</param>
            <param name="maxValue">The maximum numerical value that the user can select with the knob.</param>
        </member>
        <member name="M:iFactr.UI.Controls.Slider.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.Slider"/> class.
            </summary>
            <param name="minValue">The minimum numerical value that the user can select with the knob.</param>
            <param name="maxValue">The maximum numerical value that the user can select with the knob.</param>
            <param name="value">The initial selected value.</param>
        </member>
        <member name="T:iFactr.UI.Controls.Switch">
            <summary>
            Represents a UI element that holds a boolean value and can be toggled by the user.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Switch.FalseColorProperty">
            <summary>
            The name of the <see cref="P:FalseColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Switch.TrueColorProperty">
            <summary>
            The name of the <see cref="P:TrueColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Switch.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Switch.ValueProperty">
            <summary>
            The name of the <see cref="P:Value"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.Switch.ValueChanged">
            <summary>
            Occurs when the switch's boolean value has changed.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Switch.FalseColor">
            <summary>
            Gets or sets the color of the switch when its value is <c>false</c>.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Switch.TrueColor">
            <summary>
            Gets or sets the color of the switch when its value is <c>true</c>.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Switch.ForegroundColor">
            <summary>
            Gets or sets the color of any additional visual information that is part of the switch.
            For example, Metro and Windows Phone include text that represents the value of the switch.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Switch.Value">
            <summary>
            Gets or sets the boolean value of the switch.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.Switch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.Switch"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.Switch.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.Switch"/> class.
            </summary>
            <param name="value">The initial boolean value.</param>
        </member>
        <member name="T:iFactr.UI.Controls.TextArea">
            <summary>
            Represents a UI element that can accept multiple lines of text input from the user.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextArea.BackgroundColorProperty">
            <summary>
            The name of the <see cref="P:BackgroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextArea.ExpressionProperty">
            <summary>
            The name of the <see cref="P:Expression"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextArea.FontProperty">
            <summary>
            The name of the <see cref="P:Font"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextArea.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextArea.IsFocusedProperty">
            <summary>
            The name of the <see cref="P:IsFocused"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextArea.KeyboardTypeProperty">
            <summary>
            The name of the <see cref="P:KeyboardType"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextArea.KeyboardReturnTypeProperty">
            <summary>
            The name of the <see cref="P:KeyboardReturnType"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextArea.PlaceholderProperty">
            <summary>
            The name of the <see cref="P:Placeholder"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextArea.PlaceholderColorProperty">
            <summary>
            The name of the <see cref="P:PlaceholderColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextArea.TextProperty">
            <summary>
            The name of the <see cref="P:Text"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextArea.TextAlignmentProperty">
            <summary>
            The name of the <see cref="P:TextAlignment"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextArea.TextCompletionProperty">
            <summary>
            The name of the <see cref="P:TextCompletion"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.TextArea.GotFocus">
            <summary>
            Occurs when the text area receives focus.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.TextArea.LostFocus">
            <summary>
            Occurs when the text area loses focus.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.TextArea.ReturnKeyPressed">
            <summary>
            Occurs when the 'Return' key on the keyboard is pressed.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.TextArea.TextChanged">
            <summary>
            Occurs when the text area's text value has changed.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextArea.BackgroundColor">
            <summary>
            Gets or sets the background color of the text area.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextArea.Expression">
            <summary>
            Gets or sets a regular expression string for restricting the text that the user can input.
            A value of <c>null</c> means that there is no restriction.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextArea.Font">
            <summary>
            Gets or sets the font to be used when rendering the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextArea.ForegroundColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextArea.IsFocused">
            <summary>
            Gets a value indicating whether or not this instance has input focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextArea.KeyboardType">
            <summary>
            Gets or sets the type of soft keyboard to use when the text area has focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextArea.KeyboardReturnType">
            <summary>
            Gets or sets how the 'Return' key of a soft keyboard should be presented when the text box has focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextArea.Placeholder">
            <summary>
            Gets or sets the text to display when the text area does not have a value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextArea.PlaceholderColor">
            <summary>
            Gets or sets the color of the placeholder text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextArea.Text">
            <summary>
            Gets or sets the text value inside of the text area.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextArea.TextAlignment">
            <summary>
            Gets or sets how the text is aligned within the text area.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextArea.TextCompletion">
            <summary>
            Gets or sets completion behavior for text that is entered into the text area.
            Not all platforms support all behaviors.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.TextArea.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.TextArea"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.TextArea.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.TextArea"/> class.
            </summary>
            <param name="text">The initial text value.</param>
        </member>
        <member name="M:iFactr.UI.Controls.TextArea.Focus">
            <summary>
            Programmatically sets input focus to the text area.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.TextBox">
            <summary>
            Represents a UI element that can accept a single line of text input from the user.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextBox.BackgroundColorProperty">
            <summary>
            The name of the <see cref="P:BackgroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextBox.ExpressionProperty">
            <summary>
            The name of the <see cref="P:Expression"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextBox.FontProperty">
            <summary>
            The name of the <see cref="P:Font"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextBox.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextBox.IsFocusedProperty">
            <summary>
            The name of the <see cref="P:IsFocused"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextBox.KeyboardTypeProperty">
            <summary>
            The name of the <see cref="P:KeyboardType"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextBox.KeyboardReturnTypeProperty">
            <summary>
            The name of the <see cref="P:KeyboardReturnType"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextBox.PlaceholderProperty">
            <summary>
            The name of the <see cref="P:Placeholder"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextBox.PlaceholderColorProperty">
            <summary>
            The name of the <see cref="P:PlaceholderColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextBox.TextProperty">
            <summary>
            The name of the <see cref="P:Text"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextBox.TextAlignmentProperty">
            <summary>
            The name of the <see cref="P:TextAlignment"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TextBox.TextCompletionProperty">
            <summary>
            The name of the <see cref="P:TextCompletion"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.TextBox.GotFocus">
            <summary>
            Occurs when the text box receives focus.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.TextBox.LostFocus">
            <summary>
            Occurs when the text box loses focus.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.TextBox.ReturnKeyPressed">
            <summary>
            Occurs when the 'Return' key on the keyboard is pressed.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.TextBox.TextChanged">
            <summary>
            Occurs when the text box's text value has changed.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextBox.BackgroundColor">
            <summary>
            Gets or sets the background color of the text box.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextBox.Expression">
            <summary>
            Gets or sets a regular expression string for restricting the text that the user can input.
            A value of <c>null</c> means that there is no restriction.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextBox.Font">
            <summary>
            Gets or sets the font to be used when rendering the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextBox.ForegroundColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextBox.IsFocused">
            <summary>
            Gets a value indicating whether or not this instance has input focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextBox.KeyboardType">
            <summary>
            Gets or sets the type of soft keyboard to use when the text box has focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextBox.KeyboardReturnType">
            <summary>
            Gets or sets how the 'Return' key of a soft keyboard should be presented when the text box has focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextBox.Placeholder">
            <summary>
            Gets or sets the text to display when the text box does not have a value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextBox.PlaceholderColor">
            <summary>
            Gets or sets the color of the placeholder text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextBox.Text">
            <summary>
            Gets or sets the text value inside of the text box.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextBox.TextAlignment">
            <summary>
            Gets or sets how the text is aligned within the text box.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TextBox.TextCompletion">
            <summary>
            Gets or sets completion behavior for text that is entered into the text box.
            Not all platforms support all behaviors.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.TextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.TextBox"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.TextBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.TextBox"/> class.
            </summary>
            <param name="text">The initial text value.</param>
        </member>
        <member name="M:iFactr.UI.Controls.TextBox.Focus">
            <summary>
            Programmatically sets input focus to the text box.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.TimePicker">
            <summary>
            Represents a UI element that lets the user select from a range of time values.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TimePicker.BackgroundColorProperty">
            <summary>
            The name of the <see cref="P:BackgroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TimePicker.FontProperty">
            <summary>
            The name of the <see cref="P:Font"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TimePicker.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TimePicker.TimeProperty">
            <summary>
            The name of the <see cref="P:Time"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.TimePicker.TimeFormatProperty">
            <summary>
            The name of the <see cref="P:TimeFormat"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.Controls.TimePicker.TimeChanged">
            <summary>
            Occurs when the picker's selected time has changed.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TimePicker.BackgroundColor">
            <summary>
            Gets or sets the background color of picker.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TimePicker.Font">
            <summary>
            Gets or sets the font to be used when rendering the picker's value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TimePicker.ForegroundColor">
            <summary>
            Gets or sets the color of the picker's foreground content.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TimePicker.Time">
            <summary>
            Gets or sets the selected time for the picker.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.TimePicker.TimeFormat">
            <summary>
            Gets or sets a string that describes the format in which the picker's value should be presented.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.TimePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.TimePicker"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.TimePicker.#ctor(System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Controls.TimePicker"/> class.
            </summary>
            <param name="value">The initial selected value.</param>
        </member>
        <member name="M:iFactr.UI.Controls.TimePicker.ShowPicker">
            <summary>
            Programmatically presents the picker to the user.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.Element">
            <summary>
            Represents a UI element that can be sized and arranged within a view.  This class is abstract.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Element.AutoLayoutIndex">
            <summary>
            A column or row index that signifies that the element should use the automatic layout system to determine its position.
            This field is constant.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Element.ColumnIndexProperty">
            <summary>
            The name of the <see cref="P:ColumnIndex"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Element.ColumnSpanProperty">
            <summary>
            The name of the <see cref="P:ColumnSpan"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Element.HorizontalAlignmentProperty">
            <summary>
            The name of the <see cref="P:HorizontalAlignment"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Element.IDProperty">
            <summary>
            The name of the <see cref="P:ID"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Element.MarginProperty">
            <summary>
            The name of the <see cref="P:Margin"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Element.RowIndexProperty">
            <summary>
            The name of the <see cref="P:RowIndex"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Element.RowSpanProperty">
            <summary>
            The name of the <see cref="P:RowSpan"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Element.VerticalAlignmentProperty">
            <summary>
            The name of the <see cref="P:VerticalAlignment"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Controls.Element.VisibilityProperty">
            <summary>
            The name of the <see cref="P:Visibility"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Element.ColumnIndex">
            <summary>
            Gets or sets the zero-based index of the column that the element should reside in.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Element.ColumnSpan">
            <summary>
            Gets or sets how many columns the element should span across.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Element.HorizontalAlignment">
            <summary>
            Gets or sets how the element should horizontally align itself in the space that is allotted for it.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Element.ID">
            <summary>
            Gets or sets an identifier that can be used to easily identify the element within its parent container.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Element.Margin">
            <summary>
            Gets or sets the amount of spacing around the element.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Element.Metadata">
            <summary>
            Gets a collection for storing arbitrary data on the object.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Element.Parent">
            <summary>
            Gets the parent object that contains this instance.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Element.RowIndex">
            <summary>
            Gets or sets the zero-based index of the row that the element should reside in.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Element.RowSpan">
            <summary>
            Gets or sets how many rows the element should span across.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Element.VerticalAlignment">
            <summary>
            Gets or sets how the element should vertically align itself in the space that is allotted for it.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Element.Visibility">
            <summary>
            Gets or sets the visible state of the element.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.Element.Pair">
            <summary>
            Gets or sets the native object that is paired with the element.  This can be set only once.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.Element.Measure(iFactr.UI.Size)">
            <summary>
            Calculates and returns an appropriate width and height value for the contents of the element.
            This is called by the underlying grid layout system and should not be used in application logic.
            </summary>
            <param name="constraints">The size that the element is limited to.</param>
        </member>
        <member name="M:iFactr.UI.Controls.Element.SetLocation(iFactr.UI.Point,iFactr.UI.Size)">
            <summary>
            Sets the location and size of the element within its parent container.
            This is called by the underlying grid layout system and should not be used in application logic.
            </summary>
            <param name="location">The X and Y coordinates of the upper left corner of the control.</param>
            <param name="size">The width and height of the control.</param>
        </member>
        <member name="M:iFactr.UI.Controls.Element.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Controls.Element.Equals(iFactr.UI.Controls.IElement)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.Controls.IElement"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:iFactr.UI.Controls.IElement"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.Controls.IElement"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Controls.Element.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:iFactr.UI.Controls.Element"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="T:iFactr.UI.Controls.IElementHost">
            <summary>
            Defines an object that acts as a container for <see cref="T:iFactr.UI.Controls.IElement"/> objects.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IElementHost.Children">
            <summary>
            Gets a collection of the UI elements that are currently contained within this instance.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.IElementHost.AddChild(iFactr.UI.Controls.IElement)">
            <summary>
            Adds the specified <see cref="T:iFactr.UI.Controls.IElement"/> object to this instance.
            </summary>
            <param name="element">The element to be added to this instance.</param>
        </member>
        <member name="M:iFactr.UI.Controls.IElementHost.RemoveChild(iFactr.UI.Controls.IElement)">
            <summary>
            Removes the specified <see cref="T:iFactr.UI.Controls.IElement"/> object from this instance.
            </summary>
            <param name="element">The element to be removed from this instance.</param>
        </member>
        <member name="T:iFactr.UI.Controls.ControlExtensions">
            <summary>
            Provides methods for <see cref="T:iFactr.UI.Controls.IControl"/> objects.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.ControlExtensions.ShouldSubmit(iFactr.UI.Controls.IControl)">
            <summary>
            Returns a value indicating whether the control should be included when gathering submission values.
            </summary>
        </member>
        <member name="T:iFactr.UI.Controls.ElementHostExtensions">
            <summary>
            Provides methods for <see cref="T:iFactr.UI.Controls.IElementHost"/> objects.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.ElementHostExtensions.GetChild(iFactr.UI.Controls.IElementHost,System.String)">
            <summary>
            Returns the first element found with the specified ID.
            </summary>
            <param name="host">The <see cref="T:iFactr.UI.Controls.IElementHost"/> object.</param>
            <param name="id">The identifier of the element.</param>
            <returns>The first element found with the specified ID -or- <c>null</c> if no element was found.</returns>
        </member>
        <member name="M:iFactr.UI.Controls.ElementHostExtensions.GetChild``1(iFactr.UI.Controls.IElementHost,System.String)">
            <summary>
            Returns the first element found with the specified ID that is of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="host">The <see cref="T:iFactr.UI.Controls.IElementHost"/> object.</param>
            <param name="id">The identifier of the element.</param>
            <returns>The first element found with the specified ID that is of type <typeparamref name="T"/> -or-
            <c>null</c> if no element was found.</returns>
        </member>
        <member name="M:iFactr.UI.Controls.ElementHostExtensions.GetChild``1(iFactr.UI.Controls.IElementHost)">
            <summary>
            Returns the first element found that is of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="host">The <see cref="T:iFactr.UI.Controls.IElementHost"/> object.</param>
            <returns>The first element found of type <typeparamref name="T"/> -or-
            <c>null</c> if no element of the specified type was found.</returns>
        </member>
        <member name="M:iFactr.UI.Controls.ElementHostExtensions.GetOrCreateChild``1(iFactr.UI.Controls.IElementHost,System.String)">
            <summary>
            Returns the first element found with the specified ID that is of type <typeparamref name="T"/>.
            If no element is found, a new instance will be created with the specified ID and added to the parent.
            </summary>
            <typeparam name="T">The type of the element to get or create.</typeparam>
            <param name="host">The <see cref="T:iFactr.UI.Controls.IElementHost"/> object.</param>
            <param name="id">The identifier of the element.  If a new element is created, its ID will be set to this value.</param>
            <returns>The first element found of type <typeparamref name="T"/> -or-
            the newly created element if no element was found.</returns>
            <remarks>When creating a new instance, if <typeparamref name="T"/> is an interface type, the framework will use the
            <see cref="M:MXContainer.Resolve"/> method; otherwise, the framework will use the <see cref="M:Activator.CreateInstance"/> method.</remarks>
        </member>
        <member name="T:iFactr.UI.Controls.IElement">
            <summary>
            Defines a UI element that can be sized and arranged within a view.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IElement.ColumnIndex">
            <summary>
            Gets or sets the zero-based index of the column that the element should reside in.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IElement.ColumnSpan">
            <summary>
            Gets or sets how many columns the element should span across.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IElement.HorizontalAlignment">
            <summary>
            Gets or sets how the element should horizontally align itself in the space that is allotted for it.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IElement.ID">
            <summary>
            Gets or sets an identifier that can be used to easily identify the element within its parent container.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IElement.Margin">
            <summary>
            Gets or sets the amount of spacing around the element.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IElement.Metadata">
            <summary>
            Gets a collection for storing arbitrary data on the object.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IElement.Parent">
            <summary>
            Gets the parent object that contains this instance.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IElement.RowIndex">
            <summary>
            Gets or sets the zero-based index of the row that the element should reside in.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IElement.RowSpan">
            <summary>
            Gets or sets how many rows the element should span across.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IElement.VerticalAlignment">
            <summary>
            Gets or sets how the element should vertically align itself in the space that is allotted for it.
            </summary>
        </member>
        <member name="P:iFactr.UI.Controls.IElement.Visibility">
            <summary>
            Gets or sets the visible state of the element.
            </summary>
        </member>
        <member name="M:iFactr.UI.Controls.IElement.Measure(iFactr.UI.Size)">
            <summary>
            Calculates and returns an appropriate width and height value for the element.
            This is called by the underlying layout system and should not be used in application logic.
            </summary>
            <param name="constraints">The size that the element is limited to.</param>
        </member>
        <member name="M:iFactr.UI.Controls.IElement.SetLocation(iFactr.UI.Point,iFactr.UI.Size)">
            <summary>
            Sets the location and size of the element within its parent container.
            This is called by the underlying layout system and should not be used in application logic.
            </summary>
            <param name="location">The X and Y coordinates of the upper left corner of the element.</param>
            <param name="size">The width and height of the element.</param>
        </member>
        <member name="T:iFactr.UI.IGridBase">
            <summary>
            Defines a common base interface for all grid objects.
            </summary>
            At some point, the IGridView and IGridCell interfaces will no longer be necessary.
            Once they are gone, this base interface will not be necessary either.
        </member>
        <member name="P:iFactr.UI.IGridBase.Columns">
            <summary>
            Gets a collection of the columns that currently make up the grid.
            </summary>
        </member>
        <member name="P:iFactr.UI.IGridBase.Padding">
            <summary>
            Gets or sets the amount of spacing between the edges of the grid and the children within it.
            </summary>
        </member>
        <member name="P:iFactr.UI.IGridBase.Rows">
            <summary>
            Gets a collection of the rows that currently make up the grid.
            </summary>
        </member>
        <member name="T:iFactr.UI.Converter">
            <summary>
            Provides methods for creating <see cref="T:iFactr.UI.ICell"/> instances from various <see cref="T:iFactr.Core.Layers.iItem"/>s and <see cref="T:iFactr.Core.Forms.Field"/>s.
            These methods can be overridden in a derived class for customized behavior.
            </summary>
        </member>
        <member name="M:iFactr.UI.Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Converter"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(System.Object,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Generates an <see cref="T:iFactr.UI.ICell"/> instance from the specified object.
            </summary>
            <param name="item">The item from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the item style.  Can be <c>null</c>.</param>
            <param name="view">The <see cref="T:iFactr.UI.IListView"/> instance that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use instead of creating a new one.  Can be <c>null</c>.</param>
            <returns>The generated cell -or- <c>null</c> if no suitable conversion method can be found.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="item"/> or <paramref name="view"/> is <c>null</c>.</exception>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Layers.iBlock,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Layers.iBlock"/>.
            </summary>
            <param name="block">The block from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the block style,
            or <c>null</c> if the block will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified block.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Layers.iPanel,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Layers.iPanel"/>.
            </summary>
            <param name="panel">The block from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the panel style,
            or <c>null</c> if the panel will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified panel.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Layers.iItem,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Layers.iItem"/>.
            </summary>
            <param name="item">The item from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the item style,
            or <c>null</c> if the item will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified item.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Layers.ContentItem,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Layers.ContentItem"/>.
            </summary>
            <param name="item">The item from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the item style,
            or <c>null</c> if the item will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified item.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Layers.MessageItem,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Layers.MessageItem"/>.
            </summary>
            <param name="item">The item from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the item style,
            or <c>null</c> if the item will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified item.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Layers.MultiLineSubtextItem,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Layers.MultiLineSubtextItem"/>.
            </summary>
            <param name="item">The item from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the item style,
            or <c>null</c> if the item will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified item.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Layers.RightSubtextItem,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Layers.RightSubtextItem"/>.
            </summary>
            <param name="item">The item from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the item style,
            or <c>null</c> if the item will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified item.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Layers.ShopItem,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Layers.ShopItem"/>.
            </summary>
            <param name="item">The item from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the item style,
            or <c>null</c> if the item will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified item.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Layers.SubtextBelowAndBesideItem,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Layers.SubtextBelowAndBesideItem"/>.
            </summary>
            <param name="item">The item from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the item style,
            or <c>null</c> if the item will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified item.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Layers.SubtextItem,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Layers.SubtextItem"/>.
            </summary>
            <param name="item">The item from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the item style,
            or <c>null</c> if the item will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified item.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Layers.VariableContentItem,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Layers.VariableContentItem"/>.
            </summary>
            <param name="item">The item from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the item style,
            or <c>null</c> if the item will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified item.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Forms.BoolField,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Forms.BoolField"/>.
            </summary>
            <param name="field">The field from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the field style,
            or <c>null</c> if the field will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified field.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Forms.ButtonField,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Forms.ButtonField"/>.
            </summary>
            <param name="field">The field from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the field style,
            or <c>null</c> if the field will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified field.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Forms.DateField,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Forms.DateField"/>.
            </summary>
            <param name="field">The field from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the field style,
            or <c>null</c> if the field will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified field.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Forms.DrawingField,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Forms.DrawingField"/>.
            </summary>
            <param name="field">The field from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the field style,
            or <c>null</c> if the field will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified field.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Forms.EmailField,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Forms.EmailField"/>.
            </summary>
            <param name="field">The field from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the field style,
            or <c>null</c> if the field will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified field.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Forms.LabelField,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Forms.LabelField"/>.
            </summary>
            <param name="field">The field from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the field style,
            or <c>null</c> if the field will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified field.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Forms.MultiLineTextField,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Forms.MultiLineTextField"/>.
            </summary>
            <param name="field">The field from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the field style,
            or <c>null</c> if the field will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified field.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Forms.NavigationField,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Forms.NavigationField"/>.
            </summary>
            <param name="field">The field from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the field style,
            or <c>null</c> if the field will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified field.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Forms.NumericField,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Forms.NumericField"/>.
            </summary>
            <param name="field">The field from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the field style,
            or <c>null</c> if the field will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified field.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Forms.SelectListField,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Forms.SelectListField"/>.
            </summary>
            <param name="field">The field from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the field style,
            or <c>null</c> if the field will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified field.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Forms.SliderField,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Forms.SliderField"/>.
            </summary>
            <param name="field">The field from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the field style,
            or <c>null</c> if the field will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified field.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(iFactr.Core.Forms.TextField,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Forms.TextField"/>.
            </summary>
            <param name="field">The field from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the field style,
            or <c>null</c> if the field will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified field.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToCell(System.Collections.Generic.IEnumerable{iFactr.Core.Forms.AggregateFieldset},iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Called when an <see cref="T:iFactr.UI.ICell"/> instance is needed for the specified <see cref="T:iFactr.Core.Forms.AggregateFieldset"/>s.
            </summary>
            <param name="fieldsets">The fieldsets from which to generate the cell.</param>
            <param name="layerStyle">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the fieldsets' style,
            or <c>null</c> if the fieldsets will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="cell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified fieldsets.</returns>
        </member>
        <member name="M:iFactr.UI.Converter.ConvertToControl(iFactr.Core.Forms.Field,MonoCross.Navigation.IMXView,MonoCross.Utilities.TypeSwitch,iFactr.UI.Controls.IControl)">
            <summary>
            Converts a Field to a Control.
            </summary>
            <param name="field">The <see cref="T:iFactr.Core.Forms.Field"/> to convert.</param>
            <param name="view"></param>
            <param name="typeSwitch">A <see cref="T:MonoCross.Utilities.TypeSwitch"/> to be used with multiple calls to this method; otherwise <c>null</c> to automatically initialize a switch.</param>
            <param name="recycledControl">An <see cref="T:iFactr.UI.Controls.IControl"/> to recycle or initialize the returned object; otherwise <c>null</c> to automatically initializze the control.</param>
            <returns>An <see cref="T:iFactr.UI.Controls.IControl"/> generated from the given field.</returns>
        </member>
        <member name="T:iFactr.UI.AlertButtons">
            <summary>
            Describes the available button combinations for an alert dialog.
            </summary>
        </member>
        <member name="F:iFactr.UI.AlertButtons.OK">
            <summary>
            The alert contains a single 'OK' button.
            </summary>
        </member>
        <member name="F:iFactr.UI.AlertButtons.OKCancel">
            <summary>
            The alert contains an 'OK' button and a 'Cancel' button.
            </summary>
        </member>
        <member name="F:iFactr.UI.AlertButtons.YesNo">
            <summary>
            The alert contains a 'Yes' button and a 'No' button.
            </summary>
        </member>
        <member name="T:iFactr.UI.AlertResult">
            <summary>
            Describes the possible results of an alert dialog.
            </summary>
        </member>
        <member name="F:iFactr.UI.AlertResult.OK">
            <summary>
            The primary or 'OK' button was pressed.
            </summary>
        </member>
        <member name="F:iFactr.UI.AlertResult.Cancel">
            <summary>
            The secondary or 'Cancel' button was pressed.
            </summary>
        </member>
        <member name="F:iFactr.UI.AlertResult.Yes">
            <summary>
            The primary or 'Yes' button was pressed.
            </summary>
        </member>
        <member name="F:iFactr.UI.AlertResult.No">
            <summary>
            The secondary or 'No' button was pressed.
            </summary>
        </member>
        <member name="T:iFactr.UI.BindingMode">
            <summary>
            Describes the direction in which values are passed for a <see cref="T:iFactr.UI.Binding"/> object.
            </summary>
        </member>
        <member name="F:iFactr.UI.BindingMode.TwoWay">
            <summary>
            The value of the target property is updated when the value of the source property is changed,
            and the value of the source property is updated when the value of the target property is changed.
            </summary>
        </member>
        <member name="F:iFactr.UI.BindingMode.OneWayToTarget">
            <summary>
            The value of the target property is updated when the value of the source property is changed.
            This is the default.
            </summary>
        </member>
        <member name="F:iFactr.UI.BindingMode.OneWayToSource">
            <summary>
            The value of the source property is updated when the value of the target property is changed.
            </summary>
        </member>
        <member name="T:iFactr.UI.ColumnMode">
            <summary>
            Describes the method in which an <see cref="T:iFactr.UI.IListView"/> instance should lay out its contents.
            </summary>
        </member>
        <member name="F:iFactr.UI.ColumnMode.OneColumn">
            <summary>
            The view should place everything within a single column.
            </summary>
        </member>
        <member name="F:iFactr.UI.ColumnMode.TwoColumns">
            <summary>
            The view should arrange its contents within two columns.  Sections will alternate between each column.
            Not all platforms support this.
            </summary>
        </member>
        <member name="T:iFactr.UI.ContentStretch">
            <summary>
            Describes how content is stretched to fit the space that is allotted for it.
            </summary>
        </member>
        <member name="F:iFactr.UI.ContentStretch.None">
            <summary>
            The content is not stretched.
            </summary>
        </member>
        <member name="F:iFactr.UI.ContentStretch.Fill">
            <summary>
            The content resizes itself to match the dimensions of the space.  Aspect ratio is not preserved.
            </summary>
        </member>
        <member name="F:iFactr.UI.ContentStretch.Uniform">
            <summary>
            The content stretches itself to fill as much of the space as possible without spilling over.
            Aspect ratio is preserved.
            </summary>
        </member>
        <member name="F:iFactr.UI.ContentStretch.UniformToFill">
            <summary>
            The content stretches itself to fill the entire space while preserving aspect ratio.
            Any portion of the content that spills over will be clipped.
            </summary>
        </member>
        <member name="T:iFactr.UI.HorizontalAlignment">
            <summary>
            Describes how an element is horizontally aligned within the space that is allotted for it.
            </summary>
        </member>
        <member name="F:iFactr.UI.HorizontalAlignment.Left">
            <summary>
            The element is aligned to the left edge of the space.
            </summary>
        </member>
        <member name="F:iFactr.UI.HorizontalAlignment.Center">
            <summary>
            The element is centered within the space.
            </summary>
        </member>
        <member name="F:iFactr.UI.HorizontalAlignment.Right">
            <summary>
            The element is aligned to the right edge of the space.
            </summary>
        </member>
        <member name="F:iFactr.UI.HorizontalAlignment.Stretch">
            <summary>
            The element is stretched to fill the space.
            </summary>
        </member>
        <member name="T:iFactr.UI.ImageCreationOptions">
            <summary>
            Describes the available options that can be applied during image creation.
            </summary>
        </member>
        <member name="F:iFactr.UI.ImageCreationOptions.None">
            <summary>
            No options are specified.  This is the default value.
            </summary>
        </member>
        <member name="F:iFactr.UI.ImageCreationOptions.IgnoreCache">
            <summary>
            The image should not be cached.
            </summary>
        </member>
        <member name="T:iFactr.UI.KeyboardReturnType">
            <summary>
            Describes how to present the 'Return' key of a soft keyboard when a text entry control has focus.
            </summary>
        </member>
        <member name="F:iFactr.UI.KeyboardReturnType.Default">
            <summary>
            The Return key should be displayed as its default value, typically a 'Return' or 'Enter' button.
            </summary>
        </member>
        <member name="F:iFactr.UI.KeyboardReturnType.Next">
            <summary>
            The Return key should be displayed as a 'Next' button.
            If this option is not available on the target platform, <see cref="F:iFactr.UI.KeyboardReturnType.Default"/> will be used instead.
            </summary>
        </member>
        <member name="F:iFactr.UI.KeyboardReturnType.Done">
            <summary>
            The Return key should be displayed as a 'Done' button.
            If this option is not available on the target platform, <see cref="F:iFactr.UI.KeyboardReturnType.Default"/> will be used instead.
            </summary>
        </member>
        <member name="F:iFactr.UI.KeyboardReturnType.Go">
            <summary>
            The Return key should be displayed as a 'Go' button.
            If this option is not available on the target platform, <see cref="F:iFactr.UI.KeyboardReturnType.Default"/> will be used instead.
            </summary>
        </member>
        <member name="F:iFactr.UI.KeyboardReturnType.Search">
            <summary>
            The Return key should be displayed as a 'Search' button.
            If this option is not available on the target platform, <see cref="F:iFactr.UI.KeyboardReturnType.Default"/> will be used instead.
            </summary>
        </member>
        <member name="T:iFactr.UI.KeyboardType">
            <summary>
            Describes the type of soft keyboard to display when a text entry control has focus.
            </summary>
        </member>
        <member name="F:iFactr.UI.KeyboardType.AlphaNumeric">
            <summary>
            The default keyboard containing letters and numbers.
            </summary>
        </member>
        <member name="F:iFactr.UI.KeyboardType.PIN">
            <summary>
            A PIN-entry keyboard.
            </summary>
        </member>
        <member name="F:iFactr.UI.KeyboardType.Symbolic">
            <summary>
            A keyboard with numbers and symbols.
            </summary>
        </member>
        <member name="F:iFactr.UI.KeyboardType.Email">
            <summary>
            A keyboard for entering URLs and email addresses.
            </summary>
        </member>
        <member name="T:iFactr.UI.LayoutUnitType">
            <summary>
            Describes the kind of value that a column or row is being sized with.
            </summary>
        </member>
        <member name="F:iFactr.UI.LayoutUnitType.Auto">
            <summary>
            The column or row is automatically sized to fit its contents.  The value is ignored.
            </summary>
        </member>
        <member name="F:iFactr.UI.LayoutUnitType.Absolute">
            <summary>
            The value represents units in the platform's coordinate system (pixels, points, etc).
            This unit type should be avoided whenever possible to ensure a consistent experience across all platforms.
            </summary>
        </member>
        <member name="F:iFactr.UI.LayoutUnitType.Star">
            <summary>
            The value represents a weighted proportion of the available space after all other columns or rows have been sized.
            </summary>
        </member>
        <member name="T:iFactr.UI.ListViewStyle">
            <summary>
            Describes the style in which an <see cref="T:iFactr.UI.IListView"/> instance should be rendered.
            </summary>
        </member>
        <member name="F:iFactr.UI.ListViewStyle.Default">
            <summary>
            The view should be rendered in the default style for each platform.
            </summary>
        </member>
        <member name="F:iFactr.UI.ListViewStyle.Grouped">
            <summary>
            The view should render its sections as groups.  Not all platforms support this.
            </summary>
        </member>
        <member name="T:iFactr.UI.PopoverPresentationStyle">
            <summary>
            Describes how a view should be presented when displayed in a popover pane.
            </summary>
        </member>
        <member name="F:iFactr.UI.PopoverPresentationStyle.Normal">
            <summary>
            The view is presented in either a full-screen pane or a smaller modal window, depending on the platform.
            </summary>
        </member>
        <member name="F:iFactr.UI.PopoverPresentationStyle.FullScreen">
            <summary>
            The view is presented in a full-screen pane.
            </summary>
        </member>
        <member name="T:iFactr.UI.PreferredOrientation">
            <summary>
            Describes the orientation preference for a view.  Platforms that support this
            will lock the view in the specified orientation, preventing it from rotating.
            </summary>
        </member>
        <member name="F:iFactr.UI.PreferredOrientation.Portrait">
            <summary>
            The view should be kept in portrait orientation.
            </summary>
        </member>
        <member name="F:iFactr.UI.PreferredOrientation.Landscape">
            <summary>
            The view should be kept in landscape orientation.
            </summary>
        </member>
        <member name="F:iFactr.UI.PreferredOrientation.PortraitOrLandscape">
            <summary>
            The view can rotate to either portrait or landscape orientation.
            </summary>
        </member>
        <member name="T:iFactr.UI.SelectionStyle">
            <summary>
            Describes the visual elements to use to indicate when a cell is selectable or has been selected.
            </summary>
        </member>
        <member name="F:iFactr.UI.SelectionStyle.None">
            <summary>
            No visual indicators of any kind will be used.
            </summary>
        </member>
        <member name="F:iFactr.UI.SelectionStyle.IndicatorOnly">
            <summary>
            For platforms that support it, the cell will show a visual element to indicate
            that it is selectable.  The cell will not be highlighted when it is selected.
            </summary>
        </member>
        <member name="F:iFactr.UI.SelectionStyle.HighlightOnly">
            <summary>
            For platforms that support it, the cell will be highlighted when it is selected.
            No visual indicators will be rendered to convey that the cell is selectable.
            </summary>
        </member>
        <member name="F:iFactr.UI.SelectionStyle.Default">
            <summary>
            For platforms that support it, the cell will show a visual element to
            indicate that it is selectable and will be highlighted when it is selected.
            </summary>
        </member>
        <member name="T:iFactr.UI.TextAlignment">
            <summary>
            Describes how text is aligned within the element that it belongs to.
            </summary>
        </member>
        <member name="F:iFactr.UI.TextAlignment.Left">
            <summary>
            Text is aligned to the left edge of the element.
            </summary>
        </member>
        <member name="F:iFactr.UI.TextAlignment.Center">
            <summary>
            Text is centered within the element.
            </summary>
        </member>
        <member name="F:iFactr.UI.TextAlignment.Right">
            <summary>
            Text is aligned to the right edge of the element.
            </summary>
        </member>
        <member name="F:iFactr.UI.TextAlignment.Justified">
            <summary>
            Text is justified within the element so that the lines in a paragraph are evenly aligned.
            </summary>
        </member>
        <member name="T:iFactr.UI.TextCompletion">
            <summary>
            Describes automatic completion behavior for text that is entered into a text entry control.
            </summary>
        </member>
        <member name="F:iFactr.UI.TextCompletion.Disabled">
            <summary>
            The text should not be handled in any way.
            </summary>
        </member>
        <member name="F:iFactr.UI.TextCompletion.OfferSuggestions">
            <summary>
            Word suggestions should be offered while entering text.  Not all platforms support this.
            </summary>
        </member>
        <member name="F:iFactr.UI.TextCompletion.AutoCapitalize">
            <summary>
            Letters should be automatically capitalized when appropriate.  Not all platforms support this.
            </summary>
        </member>
        <member name="T:iFactr.UI.VerticalAlignment">
            <summary>
            Describes how an element is vertically aligned within the space that is allotted for it.
            </summary>
        </member>
        <member name="F:iFactr.UI.VerticalAlignment.Top">
            <summary>
            The element is aligned to the top edge of the space.
            </summary>
        </member>
        <member name="F:iFactr.UI.VerticalAlignment.Center">
            <summary>
            The element is centered within the space.
            </summary>
        </member>
        <member name="F:iFactr.UI.VerticalAlignment.Bottom">
            <summary>
            The element is aligned to the bottom edge of the space.
            </summary>
        </member>
        <member name="F:iFactr.UI.VerticalAlignment.Stretch">
            <summary>
            The element is stretched to fill the space.
            </summary>
        </member>
        <member name="T:iFactr.UI.Visibility">
            <summary>
            Defines the visible state of an <see cref="T:iFactr.UI.Controls.IElement"/> instance.
            </summary>
        </member>
        <member name="F:iFactr.UI.Visibility.Visible">
            <summary>
            The element is visible.
            </summary>
        </member>
        <member name="F:iFactr.UI.Visibility.Hidden">
            <summary>
            The element is not visible, but it will still reserve space during layout.
            </summary>
        </member>
        <member name="F:iFactr.UI.Visibility.Collapsed">
            <summary>
            The element is not visible, and it does not reserve space during layout.
            </summary>
        </member>
        <member name="T:iFactr.UI.AlertResultEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:iFactr.UI.IAlert.Dismissed"/> event.
            </summary>
        </member>
        <member name="T:iFactr.UI.AlertResultEventArgs">
            <summary>
            Provides data for the <see cref="E:iFactr.UI.IAlert.Dismissed"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.AlertResultEventArgs.Result">
            <summary>
            Gets the result of the alert dialog.
            </summary>
        </member>
        <member name="M:iFactr.UI.AlertResultEventArgs.#ctor(iFactr.UI.AlertResult)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.AlertResultEventArgs"/> class.
            </summary>
            <param name="result">The result of the alert dialog.</param>
        </member>
        <member name="T:iFactr.UI.EventHandledEventArgs">
            <summary>
            Provides data for events that can be used to intercept system behavior.
            </summary>
        </member>
        <member name="P:iFactr.UI.EventHandledEventArgs.IsHandled">
            <summary>
            Gets or sets whether the event should be considered handled.  A value of <c>true</c> means that the event
            has been handled and that the system should not proceed with any default behavior associated with the event.
            </summary>
        </member>
        <member name="M:iFactr.UI.EventHandledEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.EventHandledEventArgs"/> class.
            </summary>
        </member>
        <member name="T:iFactr.UI.LoadFinishedEventArgs">
            <summary>
            Provides data for the <see cref="E:iFactr.UI.IBrowserView.LoadFinished"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.LoadFinishedEventArgs.Url">
            <summary>
            Gets the URL that was navigated to.
            </summary>
        </member>
        <member name="M:iFactr.UI.LoadFinishedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.LoadFinishedEventArgs"/> class.
            </summary>
            <param name="url">The URL that was navigated to.</param>
        </member>
        <member name="T:iFactr.UI.ViewOutputCancelEventArgs">
            <summary>
            Provides data for the <see cref="E:iFactr.Core.Targets.TargetFactory.ViewOutputting"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.ViewOutputCancelEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the output should be canceled.
            </summary>
        </member>
        <member name="P:iFactr.UI.ViewOutputCancelEventArgs.Controller">
            <summary>
            Gets the <see cref="T:MonoCross.Navigation.IMXController"/> instance that the view being outputted belongs to.
            </summary>
        </member>
        <member name="P:iFactr.UI.ViewOutputCancelEventArgs.View">
            <summary>
            Gets the <see cref="T:MonoCross.Navigation.IMXView"/> instance that is being outputted.
            </summary>
        </member>
        <member name="M:iFactr.UI.ViewOutputCancelEventArgs.#ctor(MonoCross.Navigation.IMXController,MonoCross.Navigation.IMXView)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.ViewOutputCancelEventArgs"/> class.
            </summary>
            <param name="controller">The <see cref="T:MonoCross.Navigation.IMXController"/> instance that the view being outputted belongs to.</param>
            <param name="view">The <see cref="T:MonoCross.Navigation.IMXView"/> instance that is being outputted.</param>
        </member>
        <member name="T:iFactr.UI.ViewOutputEventArgs">
            <summary>
            Provides data for the <see cref="E:iFactr.Core.Targets.TargetFactory.ViewOutputted"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.ViewOutputEventArgs.Controller">
            <summary>
            Gets the <see cref="T:MonoCross.Navigation.IMXController"/> instance that the outputted view belongs to.
            </summary>
        </member>
        <member name="P:iFactr.UI.ViewOutputEventArgs.View">
            <summary>
            Gets the <see cref="T:MonoCross.Navigation.IMXView"/> instance that was outputted.
            </summary>
        </member>
        <member name="M:iFactr.UI.ViewOutputEventArgs.#ctor(MonoCross.Navigation.IMXController,MonoCross.Navigation.IMXView)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.ViewOutputEventArgs"/> class.
            </summary>
            <param name="controller">The <see cref="T:MonoCross.Navigation.IMXController"/> instance that the outputted view belongs to.</param>
            <param name="view">The <see cref="T:MonoCross.Navigation.IMXView"/> instance that was outputted.</param>
        </member>
        <member name="T:iFactr.UI.SaveEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:iFactr.UI.ICanvasView.DrawingSaved"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The event data.</param>
        </member>
        <member name="T:iFactr.UI.SaveEventArgs">
            <summary>
            Provides data for the <see cref="E:iFactr.UI.ICanvasView.DrawingSaved"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.SaveEventArgs.FilePath">
            <summary>
            Gets the path of the file that was saved.
            </summary>
        </member>
        <member name="M:iFactr.UI.SaveEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.SaveEventArgs"/> class.
            </summary>
            <param name="filePath">The path of the file that was saved.</param>
        </member>
        <member name="T:iFactr.UI.SearchEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:iFactr.UI.ISearchBox.SearchPerformed"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The event data.</param>
        </member>
        <member name="T:iFactr.UI.SearchEventArgs">
            <summary>
            Provides data for the <see cref="E:iFactr.UI.ISearchBox.SearchPerformed"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.SearchEventArgs.SearchText">
            <summary>
            Gets the text inside of the search box that fired the event.
            </summary>
        </member>
        <member name="M:iFactr.UI.SearchEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.SearchEventArgs"/> class.
            </summary>
            <param name="searchText">The text inside of the search box that fired the event.</param>
        </member>
        <member name="T:iFactr.UI.SubmissionEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:iFactr.UI.IListView.Submitting"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The event data.</param>
        </member>
        <member name="T:iFactr.UI.SubmissionEventArgs">
            <summary>
            Provides data for the <see cref="E:iFactr.UI.IListView.Submitting"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.SubmissionEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the submission should be halted.
            </summary>
        </member>
        <member name="P:iFactr.UI.SubmissionEventArgs.DestinationLink">
            <summary>
            Gets the <see cref="T:iFactr.UI.Link"/> that will be navigated to once submission is completed.
            </summary>
        </member>
        <member name="P:iFactr.UI.SubmissionEventArgs.ValidationErrors">
            <summary>
            Gets a collection of the validation errors that have occurred.
            </summary>
        </member>
        <member name="M:iFactr.UI.SubmissionEventArgs.#ctor(iFactr.UI.Link,iFactr.UI.ValidationErrorCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.SubmissionEventArgs"/> class.
            </summary>
            <param name="destinationLink">The link that will be navigated to once submission is complete.</param>
            <param name="validationErrors">A collection of the validation errors that have occurred.</param>
        </member>
        <member name="T:iFactr.UI.ValidationEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:iFactr.UI.Controls.IControl.Validating"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The event data.</param>
        </member>
        <member name="T:iFactr.UI.ValidationEventArgs">
            <summary>
            Provides data for the <see cref="E:iFactr.UI.Controls.IControl.Validating"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.ValidationEventArgs.Errors">
            <summary>
            Gets a collection of reasons for why validation has failed.
            Validation will pass only if this collection is empty.
            </summary>
        </member>
        <member name="P:iFactr.UI.ValidationEventArgs.StringValue">
            <summary>
            Gets the <see cref="T:System.String"/> that represents the control's current value.
            </summary>
        </member>
        <member name="P:iFactr.UI.ValidationEventArgs.SubmitKey">
            <summary>
            Gets the submission key of the control that is being validated.
            </summary>
        </member>
        <member name="P:iFactr.UI.ValidationEventArgs.Value">
            <summary>
            Gets the current value of the control that is being validated.
            </summary>
        </member>
        <member name="M:iFactr.UI.ValidationEventArgs.#ctor(System.String,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.ValidationEventArgs"/> class.
            </summary>
            <param name="submitKey">The submission key of the control that is being validated.</param>
            <param name="value">The current value of the control that is being validated.</param>
            <param name="stringValue">The <see cref="T:System.String"/> that represents the control's current value.</param>
        </member>
        <member name="T:iFactr.UI.ValueChangedEventHandler`1">
            <summary>
            Represents the method that will handle events that are fired by a change in a control value.
            </summary>
            <typeparam name="T">The type of the value that was changed.</typeparam>
            <param name="sender">The source of the event.</param>
            <param name="args">The event data.</param>
        </member>
        <member name="T:iFactr.UI.ValueChangedEventArgs`1">
            <summary>
            Provides data for events that are fired by a change in a control value.
            </summary>
            <typeparam name="T">The type of the value that was changed.</typeparam>
        </member>
        <member name="P:iFactr.UI.ValueChangedEventArgs`1.NewValue">
            <summary>
            Gets the value of the control after the change was made.
            </summary>
        </member>
        <member name="P:iFactr.UI.ValueChangedEventArgs`1.OldValue">
            <summary>
            Gets the value of the control before the change was made.
            </summary>
        </member>
        <member name="M:iFactr.UI.ValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.ValueChangedEventArgs`1"/> class.
            </summary>
            <param name="oldValue">The value of the control before the change was made.</param>
            <param name="newValue">The value of the control after the change was made.</param>
        </member>
        <member name="T:iFactr.UI.BindingExtensions">
            <summary>
            Provides methods for setting and clearing bindings.
            </summary>
        </member>
        <member name="M:iFactr.UI.BindingExtensions.SetBinding(System.ComponentModel.INotifyPropertyChanged,iFactr.UI.Binding)">
            <summary>
            Sets the specified <see cref="T:iFactr.UI.Binding"/> instance for the object.
            </summary>
            <param name="obj">The target object.</param>
            <param name="binding">The <see cref="T:iFactr.UI.Binding"/> instance to be set.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="binding"/> is <c>null</c>.</exception>
        </member>
        <member name="M:iFactr.UI.BindingExtensions.SetBinding(iFactr.UI.IPairable,iFactr.UI.Binding)">
            <summary>
            Sets the specified <see cref="T:iFactr.UI.Binding"/> instance for the object.
            </summary>
            <param name="obj">The target object.</param>
            <param name="binding">The <see cref="T:iFactr.UI.Binding"/> instance to be set.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="binding"/> is <c>null</c>.</exception>
        </member>
        <member name="M:iFactr.UI.BindingExtensions.ClearAllBindings(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Removes every binding where the object is either the target or the source.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:iFactr.UI.BindingExtensions.ClearBinding(System.ComponentModel.INotifyPropertyChanged,System.String)">
            <summary>
            Removes any bindings from the object that are currently targeting the property at the specified target path.
            </summary>
            <param name="obj">The object.</param>
            <param name="targetPath">The path to the property that is to be cleared of any bindings.</param>
        </member>
        <member name="M:iFactr.UI.BindingExtensions.ClearAllBindings(iFactr.UI.IPairable)">
            <summary>
            Removes every binding where the object is either the target or the source.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:iFactr.UI.BindingExtensions.ClearBinding(iFactr.UI.IPairable,System.String)">
            <summary>
            Removes any bindings from the object that are currently targeting the property at the specified target path.
            </summary>
            <param name="obj">The object.</param>
            <param name="targetPath">The path to the property that is to be cleared of any bindings.</param>
        </member>
        <member name="M:iFactr.UI.BindingExtensions.ClearAllBindings(iFactr.UI.Controls.IElementHost)">
            <summary>
            Recursively removes every binding where the object is either the target or the source.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="T:iFactr.UI.GridExtensions">
            <summary>
            Provides methods for <see cref="T:iFactr.UI.IGridBase"/> objects.
            </summary>
        </member>
        <member name="M:iFactr.UI.GridExtensions.NullifyEvents(iFactr.UI.IGridCell,System.Boolean)">
            <summary>
            Resets the invocation list of all events within the class.
            </summary>
            <param name="cell">The cell object.</param>
            <param name="includeChildren">Whether or not to also nullify the events of any child elements.</param>
        </member>
        <member name="M:iFactr.UI.GridExtensions.SetColumns(iFactr.UI.IGridBase,System.Int32)">
            <summary>
            Clears the columns of the grid and adds a number of auto-sized columns specified by <paramref name="count"/>.
            </summary>
            <param name="grid">The grid object.</param>
            <param name="count">The number of columns to add to the grid.</param>
        </member>
        <member name="M:iFactr.UI.GridExtensions.SetRows(iFactr.UI.IGridBase,System.Int32)">
            <summary>
            Clears the rows of the grid and adds a number of auto-sized rows specified by <paramref name="count"/>.
            </summary>
            <param name="grid">The grid object.</param>
            <param name="count">The number of rows to add to the grid.</param>
        </member>
        <member name="M:iFactr.UI.GridExtensions.PerformLayout(iFactr.UI.IGridBase,iFactr.UI.Size,iFactr.UI.Size)">
            <summary>
            Positions and sizes the children of a grid using the grid's columns and rows.
            </summary>
            <param name="grid">The grid object.</param>
            <param name="minimumSize">The minimum size of the area in which the children are placed.</param>
            <param name="maximumSize">The maximum size of the area in which the children are placed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="grid"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="minimumSize"/> or <paramref name="maximumSize"/> contains a negative value.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="minimumSize"/> has an infinite width or height -or- when the width of <paramref name="maximumSize"/> is infinite and the grid contains at least one star-sized column -or- when the height of <paramref name="maximumSize"/> is infinite and the grid contains at least one star-sized row.</exception>
        </member>
        <member name="T:iFactr.UI.iLayerExtensions">
            <summary>
            Provides additional methods for <see cref="T:iFactr.Core.Layers.iLayer"/> objects.
            </summary>
        </member>
        <member name="M:iFactr.UI.iLayerExtensions.GetView(iFactr.Core.Layers.iLayer)">
            <summary>
            Generates an <see cref="T:MonoCross.Navigation.IMXView"/> instance that visually and functionally replicates the layer.
            </summary>
            <param name="layer">The layer from which the view will be generated.</param>
            <returns>The view that was generated.</returns>
        </member>
        <member name="T:iFactr.UI.ItemExtensions">
            <summary>
            Provides methods for converting <see cref="T:iFactr.Core.Layers.iItem"/>, <see cref="T:iFactr.Core.Forms.Field"/>, and <see cref="T:iFactr.Core.Layers.IHtmlText"/> objects to <see cref="T:iFactr.UI.ICell"/>.
            </summary>
        </member>
        <member name="M:iFactr.UI.ItemExtensions.Convert(iFactr.Core.Layers.iItem,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Generates an <see cref="T:iFactr.UI.ICell"/> instance from the specified <see cref="T:iFactr.Core.Layers.iItem"/>.
            </summary>
            <param name="item">The item from which to generate the cell.</param>
            <param name="style">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the item style,
            or <c>null</c> if the item will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="recycledCell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified item.</returns>
        </member>
        <member name="M:iFactr.UI.ItemExtensions.Convert(iFactr.Core.Forms.Field,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Generates an <see cref="T:iFactr.UI.ICell"/> instance from the specified <see cref="T:iFactr.Core.Forms.Field"/>.
            </summary>
            <param name="field">The field from which to generate the cell.</param>
            <param name="style">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the field style,
            or <c>null</c> if the field will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="recycledCell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified field.</returns>
        </member>
        <member name="M:iFactr.UI.ItemExtensions.Convert(iFactr.Core.Layers.iPanel,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Generates an <see cref="T:iFactr.UI.ICell"/> instance from the specified <see cref="T:iFactr.Core.Layers.iPanel"/>.
            </summary>
            <param name="panel">The block from which to generate the cell.</param>
            <param name="style">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the panel style,
            or <c>null</c> if the panel will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="recycledCell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified panel.</returns>
        </member>
        <member name="M:iFactr.UI.ItemExtensions.Convert(iFactr.Core.Layers.iBlock,iFactr.Core.Styles.Style,iFactr.UI.IListView,iFactr.UI.ICell)">
            <summary>
            Generates an <see cref="T:iFactr.UI.ICell"/> instance from the specified <see cref="T:iFactr.Core.Layers.iBlock"/>.
            </summary>
            <param name="block">The block from which to generate the cell.</param>
            <param name="style">The <see cref="T:iFactr.Core.Styles.Style"/> instance that describes the block style,
            or <c>null</c> if the block will use the default style.</param>
            <param name="view">The view that the cell will reside in.</param>
            <param name="recycledCell">An <see cref="T:iFactr.UI.ICell"/> instance to use in place of a new one, or <c>null</c> if a new one is needed.</param>
            <returns>The generated cell for the specified block.</returns>
        </member>
        <member name="T:iFactr.UI.PairableExtensions">
            <summary>
            Provides additional methods for <see cref="T:iFactr.UI.IPairable"/> objects.
            </summary>
        </member>
        <member name="M:iFactr.UI.PairableExtensions.GetValue(iFactr.UI.IPairable,System.String)">
            <summary>
            Returns the value of the property or field with the specified <paramref name="name"/>.
            </summary>
            <param name="obj">The object.</param>
            <param name="name">The name of the property or field whose value is to be returned.</param>
        </member>
        <member name="M:iFactr.UI.PairableExtensions.GetValue(iFactr.UI.IPairable,System.String,System.Object[])">
            <summary>
            Returns the value of the property or field with the specified <paramref name="name"/>.
            </summary>
            <param name="obj">The object.</param>
            <param name="name">The name of the property or field whose value is to be returned.</param>
            <param name="index">Optional index values for indexed properties.  This value should be <c>null</c> for non-indexed properties.</param>
        </member>
        <member name="M:iFactr.UI.PairableExtensions.SetValue(iFactr.UI.IPairable,System.String,System.Object,iFactr.Core.MobileTarget)">
            <summary>
            Sets the value of the property or field with the specified <paramref name="name"/> when running on one of the specified <see cref="T:iFactr.Core.MobileTarget"/>s.
            </summary>
            <param name="obj">The object.</param>
            <param name="name">The name of the property or field whose value is to be set.</param>
            <param name="value">The value to set to the property or field.</param>
            <param name="targets">The targets on which the code must be running for the value to be set.</param>
        </member>
        <member name="M:iFactr.UI.PairableExtensions.SetValue(iFactr.UI.IPairable,System.String,System.Object,System.Object[],iFactr.Core.MobileTarget)">
            <summary>
            Sets the value of the property or field with the specified <paramref name="name"/> when running on one of the specified <see cref="T:iFactr.Core.MobileTarget"/>s.
            </summary>
            <param name="obj">The object.</param>
            <param name="name">The name the property or field whose value is to be set.</param>
            <param name="value">The value to set to the property or field.</param>
            <param name="index">Optional index values for indexed properties.  This value should be <c>null</c> for non-indexed properties.</param>
            <param name="targets">The targets on which the code must be running for the value to be set.</param>
        </member>
        <member name="M:iFactr.UI.PairableExtensions.SetValue(iFactr.UI.IPairable,System.String,System.Object,iFactr.UI.IValueConverter,iFactr.Core.MobileTarget)">
            <summary>
            Sets the value of the property or field with the specified <paramref name="name"/> when running on one of the specified <see cref="T:iFactr.Core.MobileTarget"/>s.
            </summary>
            <param name="obj">The object.</param>
            <param name="name">The name of the property or field whose value is to be set.</param>
            <param name="value">The value to set to the property or field.</param>
            <param name="converter">An optional converter to use on the value prior to setting the property or field.</param>
            <param name="targets">The targets on which the code must be running for the value to be set.</param>
        </member>
        <member name="M:iFactr.UI.PairableExtensions.SetValue(iFactr.UI.IPairable,System.String,System.Object,System.Object[],iFactr.UI.IValueConverter,iFactr.Core.MobileTarget)">
            <summary>
            Sets the value of the property or field with the specified <paramref name="name"/> when running on one of the specified <see cref="T:iFactr.Core.MobileTarget"/>s.
            </summary>
            <param name="obj">The object.</param>
            <param name="name">The name of the property or field whose value is to be set.</param>
            <param name="value">The value to set to the property or field.</param>
            <param name="index">Optional index values for indexed properties.  This value should be <c>null</c> for non-indexed properties.</param>
            <param name="converter">An optional converter to use on the value prior to setting the property or field.</param>
            <param name="targets">The targets on which the code must be running for the value to be set.</param>
        </member>
        <member name="T:iFactr.UI.Font">
            <summary>
            Represents the visual characteristics for a string of text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Font.PreferredLabelFont">
            <summary>
            Gets the font that is preferred for label text on the target platform.
            </summary>
        </member>
        <member name="P:iFactr.UI.Font.PreferredHeaderFont">
            <summary>
            Gets the font that is preferred for labels that act as headers on the target platform.
            </summary>
        </member>
        <member name="P:iFactr.UI.Font.PreferredMessageBodyFont">
            <summary>
            Gets the font that is preferred for labels that act as the body of messages on the target platform.
            </summary>
        </member>
        <member name="P:iFactr.UI.Font.PreferredMessageTitleFont">
            <summary>
            Gets the font that is preferred for labels that act as the title for messages on the target platform.
            </summary>
        </member>
        <member name="P:iFactr.UI.Font.PreferredSmallFont">
            <summary>
            Gets the font that is preferred for small label text on the target platform.
            </summary>
        </member>
        <member name="P:iFactr.UI.Font.PreferredValueFont">
            <summary>
            Gets the font that is preferred for labels showing data values on the target platform.
            </summary>
        </member>
        <member name="P:iFactr.UI.Font.PreferredButtonFont">
            <summary>
            Gets the font that is preferred for button controls on the target platform.
            </summary>
        </member>
        <member name="P:iFactr.UI.Font.PreferredDateTimePickerFont">
            <summary>
            Gets the font that is preferred for date and time pickers on the target platform.
            </summary>
        </member>
        <member name="P:iFactr.UI.Font.PreferredSelectListFont">
            <summary>
            Gets the font that is preferred for select lists on the target platform.
            </summary>
        </member>
        <member name="P:iFactr.UI.Font.PreferredTextBoxFont">
            <summary>
            Gets the font that is preferred for text boxes and password boxes on the target platform.
            </summary>
        </member>
        <member name="P:iFactr.UI.Font.PreferredSectionHeaderFont">
            <summary>
            Gets the font that is preferred for section header text on the target platform.
            </summary>
        </member>
        <member name="P:iFactr.UI.Font.PreferredSectionFooterFont">
            <summary>
            Gets the font that is preferred for section footer text on the target platform.
            </summary>
        </member>
        <member name="P:iFactr.UI.Font.PreferredTabFont">
            <summary>
            Gets the font that is preferred for tab items on the target platform.
            </summary>
        </member>
        <member name="F:iFactr.UI.Font.Formatting">
            <summary>
            Any special formatting applied to the font.
            </summary>
        </member>
        <member name="F:iFactr.UI.Font.Name">
            <summary>
            The name of the font family.
            </summary>
        </member>
        <member name="F:iFactr.UI.Font.Size">
            <summary>
            The size of the text characters.
            </summary>
        </member>
        <member name="M:iFactr.UI.Font.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Font"/> structure.
            </summary>
            <param name="name">The name of the font family.</param>
        </member>
        <member name="M:iFactr.UI.Font.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Font"/> structure.
            </summary>
            <param name="name">The name of the font family.</param>
            <param name="size">The size of the text characters.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="size"/> is less than 0.</exception>
        </member>
        <member name="M:iFactr.UI.Font.#ctor(System.String,System.Double,iFactr.UI.FontFormatting)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Font"/> structure.
            </summary>
            <param name="name">The name of the font family.</param>
            <param name="size">The size of the text characters.</param>
            <param name="formatting">Any special formatting applied to the font.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="size"/> is less than 0.</exception>
        </member>
        <member name="M:iFactr.UI.Font.GetLineHeight">
            <summary>
            Measures the amount of vertical space that a single line of text will take up when it is rendered.
            </summary>
            <returns>The render height of a single line of text.</returns>
        </member>
        <member name="M:iFactr.UI.Font.Equals(iFactr.UI.Font)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.Font"/> is equal to the current <see cref="T:iFactr.UI.Font"/>.
            </summary>
            <param name="other">The <see cref="T:iFactr.UI.Font"/> to compare with the current <see cref="T:iFactr.UI.Font"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.Font"/> is equal to the current
            <see cref="T:iFactr.UI.Font"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Font.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:iFactr.UI.Font"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:iFactr.UI.Font"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:iFactr.UI.Font"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Font.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:iFactr.UI.Font"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
            hash table.</returns>
        </member>
        <member name="M:iFactr.UI.Font.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:iFactr.UI.Font.op_Equality(iFactr.UI.Font,iFactr.UI.Font)">
            <summary>
            Determines whether two <see cref="T:iFactr.UI.Font"/> objects are considered equal.
            </summary>
            <param name="value1">The first object to compare.</param>
            <param name="value2">The second object to compare.</param>
            <returns><c>true</c> if the objects are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Font.op_Inequality(iFactr.UI.Font,iFactr.UI.Font)">
            <summary>
            Determines whether two <see cref="T:iFactr.UI.Font"/> objects are not considered equal.
            </summary>
            <param name="value1">The first object to compare.</param>
            <param name="value2">The second object to compare.</param>
            <returns><c>true</c> if the objects are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Font.op_Addition(iFactr.UI.Font,System.Double)">
            <summary>
            Adds the specified <paramref name="amount"/> to the size of a <see cref="T:iFactr.UI.Font"/>.
            </summary>
            <param name="font">The font whose size is to be added to.</param>
            <param name="amount">The amount to add to the size of the font.</param>
            <returns>The result of adding the <paramref name="amount"/> to the font's size.</returns>
        </member>
        <member name="M:iFactr.UI.Font.op_Subtraction(iFactr.UI.Font,System.Double)">
            <summary>
            Subtracts the specified <paramref name="amount"/> from the size of a <see cref="T:iFactr.UI.Font"/>.
            </summary>
            <param name="font">The font whose size is to be subtracted from.</param>
            <param name="amount">The amount to subtract from the size of the font.</param>
            <returns>The result of subtracting the <paramref name="amount"/> from the font's size.</returns>
        </member>
        <member name="M:iFactr.UI.Font.op_Multiply(iFactr.UI.Font,System.Double)">
            <summary>
            Multiplies the size of a <see cref="T:iFactr.UI.Font"/> by the specified <paramref name="amount"/>.
            </summary>
            <param name="font">The font whose size is to be multiplied.</param>
            <param name="amount">The amount to multiply the size of the font.</param>
            <returns>The result of multiplying the font's size by the <paramref name="amount"/>.</returns>
        </member>
        <member name="M:iFactr.UI.Font.op_Division(iFactr.UI.Font,System.Double)">
            <summary>
            Divides the size of a <see cref="T:iFactr.UI.Font"/> by the specified <paramref name="amount"/>.
            </summary>
            <param name="font">The font whose size is to be divided.</param>
            <param name="amount">The amount to divide the size of the font.</param>
            <returns>The result of dividing the font's size by the <paramref name="amount"/>.</returns>
        </member>
        <member name="T:iFactr.UI.FontFormatting">
            <summary>
            Describes special formatting characteristics to be applied to a font.
            </summary>
        </member>
        <member name="F:iFactr.UI.FontFormatting.Normal">
            <summary>
            No special formatting is applied.
            </summary>
        </member>
        <member name="F:iFactr.UI.FontFormatting.Bold">
            <summary>
            The text characters are bolded.
            </summary>
        </member>
        <member name="F:iFactr.UI.FontFormatting.Italic">
            <summary>
            The text characters are italicized.
            </summary>
        </member>
        <member name="F:iFactr.UI.FontFormatting.BoldItalic">
            <summary>
            The text characters are bolded and italicized.
            </summary>
        </member>
        <member name="T:iFactr.UI.Instructions.ILayoutInstruction">
            <summary>
            Defines an element that may have special layout requirements depending on the target platform.
            </summary>
        </member>
        <member name="M:iFactr.UI.Instructions.ILayoutInstruction.Layout">
            <summary>
            Performs a platform-agnostic layout.
            This is used when the target platform does not have any special layout instructions for the element.
            </summary>
        </member>
        <member name="T:iFactr.UI.Instructions.Instructor">
            <summary>
            Represents a tool for giving platform-specific instructions to cross-platform objects.
            This class is abstract.
            </summary>
        </member>
        <member name="M:iFactr.UI.Instructions.Instructor.Layout(iFactr.UI.Instructions.ILayoutInstruction)">
            <summary>
            Performs layout logic for the specified <paramref name="element"/> that is determined by the target platform.
            </summary>
            <param name="element">The <see cref="T:iFactr.UI.Instructions.ILayoutInstruction"/> instance to lay out.</param>
        </member>
        <member name="T:iFactr.UI.Instructions.UniversalInstructor">
            <summary>
            Represents an instructor that provides platform-agnostic instructions to various objects.
            </summary>
        </member>
        <member name="M:iFactr.UI.Instructions.UniversalInstructor.Layout(iFactr.UI.Instructions.ILayoutInstruction)">
            <summary>
            Performs layout logic for the specified <paramref name="element"/>.
            </summary>
            <param name="element">The <see cref="T:iFactr.UI.Instructions.ILayoutInstruction"/> instance to lay out.</param>
        </member>
        <member name="M:iFactr.UI.Instructions.UniversalInstructor.OnLayout(iFactr.UI.Instructions.ILayoutInstruction)">
            <summary>
            Called when the specified <paramref name="element"/> needs to be laid out.
            </summary>
            <param name="element">The <see cref="T:iFactr.UI.Instructions.ILayoutInstruction"/> instance to be laid out.</param>
        </member>
        <member name="T:iFactr.UI.IPairable">
            <summary>
            Defines an abstract or native object that can be paired with a native or abstract counterpart.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPairable.Pair">
            <summary>
            Gets the abstract or native object that is paired with this instance.
            This property is used internally by the framework and user-defined controls, and it should not be used in application logic.
            </summary>
        </member>
        <member name="T:iFactr.UI.IPlatformDefaults">
            <summary>
            Defines a set of property values that may differ from platform to platform.
            This interface is used by the framework to set default values for properties on cross-platform objects.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.LeftMargin">
            <summary>
            Gets the value that is appropriate as a margin between the left edge of a grid and the grid's contents.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.RightMargin">
            <summary>
            Gets the value that is appropriate as a margin between the right edge of a grid and the grid's contents.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.BottomMargin">
            <summary>
            Gets the value that is appropriate as a margin between the bottom edge of a grid and the grid's contents.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.TopMargin">
            <summary>
            Gets the value that is appropriate as a margin between the top edge of a grid and the grid's contents.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.LargeHorizontalSpacing">
            <summary>
            Gets the value that is appropriate for a large amount of left or right spacing between UI elements.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.SmallHorizontalSpacing">
            <summary>
            Gets the value that is appropriate for a small amount of left or right spacing between UI elements.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.LargeVerticalSpacing">
            <summary>
            Gets the value that is appropriate for a large amount of top or bottom spacing between UI elements.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.SmallVerticalSpacing">
            <summary>
            Gets the value that is appropriate for a small amount of top or bottom spacing between UI elements.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.CellHeight">
            <summary>
            Gets a value for the height of a typical cell in an <see cref="T:iFactr.UI.IListView"/>.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.ButtonFont">
            <summary>
            Gets the font for button controls.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.DateTimePickerFont">
            <summary>
            Gets the font for date and time picker controls.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.HeaderFont">
            <summary>
            Gets the font for label controls that act as headers.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.LabelFont">
            <summary>
            Gets the font for standard label controls.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.MessageBodyFont">
            <summary>
            Gets the font for label controls that act as the body of messages.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.MessageTitleFont">
            <summary>
            Gets the font for label controls that act as the title of messages.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.SectionHeaderFont">
            <summary>
            Gets the font for section header text.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.SectionFooterFont">
            <summary>
            Gets the font for section footer text.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.SelectListFont">
            <summary>
            Gets the font for select list controls.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.SmallFont">
            <summary>
            Gets the font for label controls with small text.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.TabFont">
            <summary>
            Gets the font for standard tab items.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.TextBoxFont">
            <summary>
            Gets the font for text box controls.
            </summary>
        </member>
        <member name="P:iFactr.UI.IPlatformDefaults.ValueFont">
            <summary>
            Gets the font for label controls showing data values.
            </summary>
        </member>
        <member name="T:iFactr.UI.ITimer">
            <summary>
            Defines a timer able to run across multiple platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.ITimer.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the timer is running.
            </summary>
        </member>
        <member name="P:iFactr.UI.ITimer.Interval">
            <summary>
            Gets or sets the amount of time, in milliseconds, before the <see cref="E:iFactr.UI.ITimer.Elapsed"/> event is fired.
            </summary>
        </member>
        <member name="E:iFactr.UI.ITimer.Elapsed">
            <summary>
            Occurs when the amount of time specified by the <see cref="P:iFactr.UI.ITimer.Interval"/> property has passed.
            </summary>
        </member>
        <member name="M:iFactr.UI.ITimer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:iFactr.UI.ITimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="T:iFactr.UI.IValueConverter">
            <summary>
            Defines an object that converts a value from one type to another.
            </summary>
        </member>
        <member name="M:iFactr.UI.IValueConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Converts the specified value to the specified type and returns the result.
            </summary>
            <param name="value">The value to be converted.</param>
            <param name="targetType">The type that the value is expected to be.</param>
            <param name="parameter">An optional parameter to assist with value conversion.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:iFactr.UI.IValueConverter.ConvertBack(System.Object,System.Type,System.Object)">
            <summary>
            Converts the specified value to the specified type and returns the result.
            </summary>
            <param name="value">The value to be converted.</param>
            <param name="targetType">The type that the value is expected to be.</param>
            <param name="parameter">An optional parameter to assist with value conversion.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:iFactr.UI.IMenu">
            <summary>
            Defines a set of items that provide support functions for an
            <see cref="T:iFactr.UI.IListView"/> or <see cref="T:iFactr.UI.IBrowserView"/>.
            </summary>
        </member>
        <member name="P:iFactr.UI.IMenu.BackgroundColor">
            <summary>
            Gets or sets the background color of the menu on supported platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.IMenu.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the menu on supported platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.IMenu.ImagePath">
            <summary>
            Gets or sets the file path of the image to use for the button that activates the menu.
            Not all platforms have this button available.
            </summary>
        </member>
        <member name="P:iFactr.UI.IMenu.SelectionColor">
            <summary>
            Gets or sets the color to highlight the menu when it is selected.
            </summary>
        </member>
        <member name="P:iFactr.UI.IMenu.Title">
            <summary>
            Gets or sets the title of the button that activates the menu.
            Not all platforms have this button available.
            </summary>
        </member>
        <member name="P:iFactr.UI.IMenu.ButtonCount">
            <summary>
            Gets the number of menu buttons that are currently on the menu.
            </summary>
        </member>
        <member name="M:iFactr.UI.IMenu.Add(iFactr.UI.IMenuButton)">
            <summary>
            Adds the specified <see cref="T:iFactr.UI.IMenuButton"/> to the menu.
            </summary>
            <param name="menuButton">The button to add.</param>
        </member>
        <member name="M:iFactr.UI.IMenu.GetButton(System.Int32)">
            <summary>
            Returns the <see cref="T:iFactr.UI.IMenuButton"/> at the specified index.
            </summary>
            <param name="index">The index of the button to return.</param>
            <returns>The <see cref="T:iFactr.UI.IMenuButton"/> at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index equals or exceeds the
            number of buttons in the menu -or- when the index is less than 0.</exception>
        </member>
        <member name="T:iFactr.UI.IMenuButton">
            <summary>
            Defines an pressable button within an <see cref="T:iFactr.UI.IMenu"/> object.
            </summary>
        </member>
        <member name="P:iFactr.UI.IMenuButton.Title">
            <summary>
            Gets the title of the button.
            </summary>
        </member>
        <member name="P:iFactr.UI.IMenuButton.ImagePath">
            <summary>
            Gets or sets the file path of the image to use with the button.
            </summary>
        </member>
        <member name="P:iFactr.UI.IMenuButton.NavigationLink">
            <summary>
            Gets or sets the link to navigate to when the button is selected.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.IMenuButton.Clicked"/> event.
            </summary>
        </member>
        <member name="E:iFactr.UI.IMenuButton.Clicked">
            <summary>
            Occurs when the user clicks or taps on the button.
            </summary>
        </member>
        <member name="T:iFactr.UI.IToolbar">
            <summary>
            Defines a toolbar containing items that provide support functions for an <see cref="T:iFactr.UI.ICanvasView"/>.
            </summary>
        </member>
        <member name="P:iFactr.UI.IToolbar.BackgroundColor">
            <summary>
            Gets or sets the background color of the toolbar on platforms that support it.
            </summary>
        </member>
        <member name="P:iFactr.UI.IToolbar.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the toolbar on platforms that support it.
            Any toolbar items that do not specify their own foreground color will use this value.
            </summary>
        </member>
        <member name="P:iFactr.UI.IToolbar.PrimaryItems">
            <summary>
            Gets or sets a collection of toolbar items that are considered primary commands.
            These are commonly aligned to the right of the toolbar, but platform behavior may vary.
            </summary>
        </member>
        <member name="P:iFactr.UI.IToolbar.SecondaryItems">
            <summary>
            Gets or sets a collection of toolbar items that are considered secondary commands.
            These are commonly aligned to the left of the toolbar, but platform behavior may vary.
            </summary>
        </member>
        <member name="T:iFactr.UI.IToolbarButton">
            <summary>
            Defines a clickable button in an <see cref="T:iFactr.UI.IToolbar"/> object.
            </summary>
        </member>
        <member name="P:iFactr.UI.IToolbarButton.ImagePath">
            <summary>
            Gets or sets the file path to an image to display as part of the button.
            </summary>
        </member>
        <member name="P:iFactr.UI.IToolbarButton.NavigationLink">
            <summary>
            Gets or sets the link to navigate to when the user clicks or taps the button.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.IToolbarButton.Clicked"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.IToolbarButton.Title">
            <summary>
            Gets or sets the title of the button.
            </summary>
        </member>
        <member name="E:iFactr.UI.IToolbarButton.Clicked">
            <summary>
            Occurs when the user clicks or taps on the button.
            </summary>
        </member>
        <member name="T:iFactr.UI.IToolbarItem">
            <summary>
            Defines a base interface for the <see cref="T:iFactr.UI.IToolbarButton"/> and <see cref="T:iFactr.UI.IToolbarSeparator"/> interfaces.
            </summary>
        </member>
        <member name="P:iFactr.UI.IToolbarItem.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the item.
            </summary>
        </member>
        <member name="T:iFactr.UI.IToolbarSeparator">
            <summary>
            Defines an item in an <see cref="T:iFactr.UI.IToolbar"/> object that serves as a separator between other items.
            </summary>
        </member>
        <member name="T:iFactr.UI.Menu">
            <summary>
            Represents a set of items that provide support functions for an
            <see cref="T:iFactr.UI.IListView"/> or <see cref="T:iFactr.UI.IBrowserView"/>.
            </summary>
        </member>
        <member name="F:iFactr.UI.Menu.BackgroundColorProperty">
            <summary>
            The name of the <see cref="P:BackgroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Menu.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Menu.ImagePathProperty">
            <summary>
            The name of the <see cref="P:ImagePath"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Menu.SelectionColorProperty">
            <summary>
            The name of the <see cref="P:SelectionColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Menu.TitleProperty">
            <summary>
            The name of the <see cref="P:Title"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Menu.ButtonCountProperty">
            <summary>
            The name of the <see cref="P:ButtonCount"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="P:iFactr.UI.Menu.BackgroundColor">
            <summary>
            Gets or sets the background color of the menu on supported platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.Menu.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the menu on supported platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.Menu.ImagePath">
            <summary>
            Gets or sets the file path of the image to use for the button that activates the menu.
            Not all platforms have this button available.
            </summary>
        </member>
        <member name="P:iFactr.UI.Menu.SelectionColor">
            <summary>
            Gets or sets the color to highlight the menu when it is selected.
            </summary>
        </member>
        <member name="P:iFactr.UI.Menu.Title">
            <summary>
            Gets or sets the title of the button that activates the menu.
            Not all platforms have this button available.
            </summary>
        </member>
        <member name="P:iFactr.UI.Menu.ButtonCount">
            <summary>
            Gets the number of menu buttons that are currently on the menu.
            </summary>
        </member>
        <member name="P:iFactr.UI.Menu.Pair">
            <summary>
            Gets or sets the native object that is paired with the menu.  This can be set only once.
            </summary>
        </member>
        <member name="M:iFactr.UI.Menu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Menu"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Menu.#ctor(iFactr.UI.IMenuButton[])">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Menu"/> class.
            </summary>
            <param name="menuButtons">The buttons to add to the menu.</param>
        </member>
        <member name="M:iFactr.UI.Menu.Add(iFactr.UI.IMenuButton)">
            <summary>
            Adds the specified <see cref="T:iFactr.UI.IMenuButton"/> to the menu.
            </summary>
            <param name="menuButton">The button to add.</param>
        </member>
        <member name="M:iFactr.UI.Menu.GetButton(System.Int32)">
            <summary>
            Returns the <see cref="T:iFactr.UI.IMenuButton"/> at the specified index.
            </summary>
            <param name="index">The index of the button to return.</param>
            <returns>The <see cref="T:iFactr.UI.IMenuButton"/> at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index equals or exceeds the
            number of buttons in the menu -or- when the index is less than 0.</exception>
        </member>
        <member name="M:iFactr.UI.Menu.Equals(iFactr.UI.IMenu)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.IMenu"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:iFactr.UI.IMenu"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.IMenu"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.UI.MenuButton">
            <summary>
            Represents a pressable button within an <see cref="T:iFactr.UI.IMenu"/> object.
            </summary>
        </member>
        <member name="F:iFactr.UI.MenuButton.ImagePathProperty">
            <summary>
            The name of the <see cref="P:ImagePath"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.MenuButton.NavigationLinkProperty">
            <summary>
            The name of the <see cref="P:NavigationLink"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.MenuButton.TitleProperty">
            <summary>
            The name of the <see cref="P:Title"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.MenuButton.Clicked">
            <summary>
            Occurs when the user clicks or taps on the button.
            </summary>
        </member>
        <member name="P:iFactr.UI.MenuButton.Title">
            <summary>
            Gets the title of the button.
            </summary>
        </member>
        <member name="P:iFactr.UI.MenuButton.ImagePath">
            <summary>
            Gets or sets the file path of the image to use with the button.
            </summary>
        </member>
        <member name="P:iFactr.UI.MenuButton.NavigationLink">
            <summary>
            Gets or sets the link to navigate to when the button is selected.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.MenuButton.Clicked"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.MenuButton.Pair">
            <summary>
            Gets or sets the native object that is paired with the menu button.  This can be set only once.
            </summary>
        </member>
        <member name="M:iFactr.UI.MenuButton.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.MenuButton"/> class.
            </summary>
            <param name="title">The title to display with the button.</param>
        </member>
        <member name="M:iFactr.UI.MenuButton.Equals(iFactr.UI.IMenuButton)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.IMenuButton"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:iFactr.UI.IMenuButton"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.IMenuButton"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.UI.Toolbar">
            <summary>
            Represents a toolbar containing items that provide support functions for an <see cref="T:iFactr.UI.ICanvasView"/>.
            </summary>
        </member>
        <member name="F:iFactr.UI.Toolbar.BackgroundColorProperty">
            <summary>
            The name of the <see cref="P:BackgroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.Toolbar.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="P:iFactr.UI.Toolbar.BackgroundColor">
            <summary>
            Gets or sets the background color of the toolbar on platforms that support it.
            </summary>
        </member>
        <member name="P:iFactr.UI.Toolbar.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the toolbar on platforms that support it.
            Any toolbar items that do not specify their own foreground color will use this value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Toolbar.PrimaryItems">
            <summary>
            Gets or sets a collection of toolbar items that are considered primary commands.
            These are commonly aligned to the right of the toolbar, but platform behavior may vary.
            </summary>
        </member>
        <member name="P:iFactr.UI.Toolbar.SecondaryItems">
            <summary>
            Gets or sets a collection of toolbar items that are considered secondary commands.
            These are commonly aligned to the left of the toolbar, but platform behavior may vary.
            </summary>
        </member>
        <member name="P:iFactr.UI.Toolbar.Pair">
            <summary>
            Gets or sets the native object that is paired with the toolbar.  This can be set only once.
            </summary>
        </member>
        <member name="M:iFactr.UI.Toolbar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Toolbar"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.Toolbar.Equals(iFactr.UI.IToolbar)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.IToolbar"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:iFactr.UI.IToolbar"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.IToolbar"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.UI.ToolbarButton">
            <summary>
            Represents a clickable button in an <see cref="T:iFactr.UI.IToolbar"/> object.
            </summary>
        </member>
        <member name="F:iFactr.UI.ToolbarButton.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.ToolbarButton.ImagePathProperty">
            <summary>
            The name of the <see cref="P:ImagePath"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.ToolbarButton.NavigationLinkProperty">
            <summary>
            The name of the <see cref="P:NavigationLink"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.ToolbarButton.TitleProperty">
            <summary>
            The name of the <see cref="P:Title"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.ToolbarButton.Clicked">
            <summary>
            Occurs when the user clicks or taps on the button.
            </summary>
        </member>
        <member name="P:iFactr.UI.ToolbarButton.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the button.
            </summary>
        </member>
        <member name="P:iFactr.UI.ToolbarButton.ImagePath">
            <summary>
            Gets or sets the file path to an image to display as part of the button.
            </summary>
        </member>
        <member name="P:iFactr.UI.ToolbarButton.NavigationLink">
            <summary>
            Gets or sets the link to navigate to when the user clicks or taps the button.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.ToolbarButton.Clicked"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.ToolbarButton.Title">
            <summary>
            Gets or sets the title of the button.
            </summary>
        </member>
        <member name="P:iFactr.UI.ToolbarButton.Pair">
            <summary>
            Gets or sets the native object that is paired with the button.  This can be set only once.
            </summary>
        </member>
        <member name="M:iFactr.UI.ToolbarButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.ToolbarButton"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.ToolbarButton.Equals(iFactr.UI.IToolbarButton)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.IToolbarButton"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:iFactr.UI.IToolbarButton"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.IToolbarButton"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.UI.ToolbarSeparator">
            <summary>
            Represents an item in an <see cref="T:iFactr.UI.IToolbar"/> object that serves as a separator between other items.
            </summary>
        </member>
        <member name="F:iFactr.UI.ToolbarSeparator.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="P:iFactr.UI.ToolbarSeparator.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the item.
            </summary>
        </member>
        <member name="P:iFactr.UI.ToolbarSeparator.Pair">
            <summary>
            Gets or sets the native object that is paired with the toolbar separator.  This can be set only once.
            </summary>
        </member>
        <member name="M:iFactr.UI.ToolbarSeparator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.ToolbarSeparator"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.ToolbarSeparator.Equals(iFactr.UI.IToolbarSeparator)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.IToolbarSeparator"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:iFactr.UI.IToolbarSeparator"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.IToolbarSeparator"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.UI.MetadataCollection">
            <summary>
            Represents a collection of key/value pairs for storing arbitrary data.
            </summary>
        </member>
        <member name="P:iFactr.UI.MetadataCollection.Count">
            <summary>
            Gets the number of key/value pairs contained within the collection.
            </summary>
        </member>
        <member name="P:iFactr.UI.MetadataCollection.Item(System.Object)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the <paramref name="key"/>, or <c>null</c> if no key was found.</returns>
        </member>
        <member name="M:iFactr.UI.MetadataCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.MetadataCollection"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.MetadataCollection.Add(System.Object,System.Object)">
            <summary>
            Adds the specified <paramref name="key"/> and <paramref name="value"/> to the collection.
            </summary>
            <param name="key">The key of the object to add.</param>
            <param name="value">The value of the object to add.</param>
            <returns><c>true</c> if the object was successfully added to the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.MetadataCollection.Clear">
            <summary>
            Removes all keys and values from the collection.
            </summary>
        </member>
        <member name="M:iFactr.UI.MetadataCollection.Copy(iFactr.UI.MetadataCollection,System.Boolean)">
            <summary>
            Takes every key/value pair contained within the specified <paramref name="collection"/> and copies them to this instance.
            </summary>
            <param name="collection">The collection whose key/value pairs are to be copied.</param>
            <param name="replaceExisting">Whether to replace existing entries with entries in the specified collection if they have identical keys.</param>
        </member>
        <member name="M:iFactr.UI.MetadataCollection.Get``1(System.Object)">
            <summary>
            Returns the value associated with the specified <paramref name="key"/> as an instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to return the value as.</typeparam>
            <param name="key">The key associated with the value to be returned.</param>
        </member>
        <member name="M:iFactr.UI.MetadataCollection.Remove(System.Object)">
            <summary>
            Removes the value with the specified <paramref name="key"/> from the collection.
            </summary>
            <param name="key">The key of the object to remove.</param>
            <returns><c>true</c> if the object was successfully removed to the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.UI.Point">
            <summary>
            Represents an X- and Y-coordinate pair in two-dimensional space.
            </summary>
        </member>
        <member name="F:iFactr.UI.Point.X">
            <summary>
            The X coordinate of this instance.
            </summary>
        </member>
        <member name="F:iFactr.UI.Point.Y">
            <summary>
            The Y coordinate of this instance.
            </summary>
        </member>
        <member name="M:iFactr.UI.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Point"/> structure.
            </summary>
            <param name="x">The initial X coordinate of the structure.</param>
            <param name="y">The initial Y coordinate of the structure.</param>
        </member>
        <member name="M:iFactr.UI.Point.Equals(iFactr.UI.Point)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.Point"/> is equal to the current <see cref="T:iFactr.UI.Point"/>.
            </summary>
            <param name="other">The <see cref="T:iFactr.UI.Point"/> to compare with the current <see cref="T:iFactr.UI.Point"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.Point"/> is equal to the current
            <see cref="T:iFactr.UI.Point"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:iFactr.UI.Point"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:iFactr.UI.Point"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:iFactr.UI.Point"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Point.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:iFactr.UI.Point"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
            hash table.</returns>
        </member>
        <member name="M:iFactr.UI.Point.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:iFactr.UI.Point"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:iFactr.UI.Point"/>.</returns>
        </member>
        <member name="M:iFactr.UI.Point.op_Equality(iFactr.UI.Point,iFactr.UI.Point)">
            <summary>
            Determines whether two <see cref="T:iFactr.UI.Point"/> objects are considered equal.
            </summary>
            <param name="value1">The first object to compare.</param>
            <param name="value2">The second object to compare.</param>
            <returns><c>true</c> if the objects are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Point.op_Inequality(iFactr.UI.Point,iFactr.UI.Point)">
            <summary>
            Determines whether two <see cref="T:iFactr.UI.Point"/> objects are not considered equal.
            </summary>
            <param name="value1">The first object to compare.</param>
            <param name="value2">The second object to compare.</param>
            <returns><c>true</c> if the objects are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Point.op_Addition(iFactr.UI.Point,iFactr.UI.Point)">
            <summary>
            Adds the Xs and Ys of two <see cref="T:iFactr.UI.Point"/> objects together.
            </summary>
            <param name="value1">The left argument.</param>
            <param name="value2">The right argument.</param>
            <returns>A <see cref="T:iFactr.UI.Point"/> object containing the sum of both Xs and the sum of both Ys.</returns>
        </member>
        <member name="M:iFactr.UI.Point.op_Subtraction(iFactr.UI.Point,iFactr.UI.Point)">
            <summary>
            Subtracts the X and Y of a <see cref="T:iFactr.UI.Point"/> object from the X and Y of another <see cref="T:iFactr.UI.Point"/> object.
            </summary>
            <param name="value1">The left argument.</param>
            <param name="value2">The right argument.</param>
            <returns>A <see cref="T:iFactr.UI.Point"/> object containing the difference of both Xs and the difference of both Ys.</returns>
        </member>
        <member name="M:iFactr.UI.Point.op_Multiply(iFactr.UI.Point,iFactr.UI.Point)">
            <summary>
            Multiplies the Xs and Ys of two <see cref="T:iFactr.UI.Point"/> objects together.
            </summary>
            <param name="value1">The left argument.</param>
            <param name="value2">The right argument.</param>
            <returns>A <see cref="T:iFactr.UI.Point"/> object containing the product of both Xs and the product of both Ys.</returns>
        </member>
        <member name="M:iFactr.UI.Point.op_Division(iFactr.UI.Point,iFactr.UI.Point)">
            <summary>
            Divides the X and Y of a <see cref="T:iFactr.UI.Point"/> object by the X and Y of another <see cref="T:iFactr.UI.Point"/> object.
            </summary>
            <param name="value1">The left argument.</param>
            <param name="value2">The right argument.</param>
            <returns>A <see cref="T:iFactr.UI.Point"/> object containing the quotient of both Xs and the quotient of both Ys.</returns>
        </member>
        <member name="T:iFactr.UI.Reflection.ControlAttribute">
            <summary>
            Represents a user control that will be rendered on the screen.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.BackgroundColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.ForegroundColor">
            <summary>
            Gets or sets the foreground color for the control.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.FontName">
            <summary>
            Gets or sets the name of the font family to be used when the control renders text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.FontSize">
            <summary>
            Gets or sets the size of the font that is used when the control renders text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.FontFormatting">
            <summary>
            Gets or sets the formatting to apply to the font that is used when the control renders text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.ButtonAddress">
            <summary>
            Gets or sets the address to navigate to when a button control has been pressed.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.LabelLines">
            <summary>
            Gets or sets the maximum number of lines that are allowed to be displayed when presenting the text of a label control.
            A value of 0 means that there is no limit.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.PickerValueFormat">
            <summary>
            Gets or sets a string describing the format to use when presenting the value of a picker control.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.SliderMaxValue">
            <summary>
            Gets or sets the maximum numerical value that a user can select when using a sliding control.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.SliderMinValue">
            <summary>
            Gets or sets the minimum numerical value that a user can select when using a sliding control.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.ValueConverterType">
            <summary>
            Gets or sets the type of <see cref="T:iFactr.UI.IValueConverter"/> to use when passing a value to and from the control.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.SubmitKey">
            <summary>
            Gets or sets the key to use when submitting the control value.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.TextEntryAlignment">
            <summary>
            Gets or sets the alignment of the text that a user inputs into a text entry control.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.TextEntryCompletion">
            <summary>
            Gets or sets automatic completion behavior for text entered into a text entry control.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.TextEntryExpression">
            <summary>
            Gets or sets a regular expression string for restricting the text that the user can input into a text entry control.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.TextEntryKeyboardType">
            <summary>
            Gets or sets the type of soft keyboard to use when a text entry control has focus.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ControlAttribute.TextEntryPlaceholder">
            <summary>
            Gets or sets the text to display when a text entry control has no value.
            </summary>
        </member>
        <member name="M:iFactr.UI.Reflection.ControlAttribute.#ctor(iFactr.UI.Reflection.ControlType)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Reflection.ControlAttribute"/> class.
            </summary>
            <param name="type">The type of control that should be used to represent the member.</param>
        </member>
        <member name="T:iFactr.UI.Reflection.ControlType">
            <summary>
            Describes the available control types that can be used with reflective UI.
            </summary>
        </member>
        <member name="F:iFactr.UI.Reflection.ControlType.Button">
            <summary>
            A control that can be clicked or tapped by the user.
            </summary>
        </member>
        <member name="F:iFactr.UI.Reflection.ControlType.DatePicker">
            <summary>
            A control that lets the user select from a range of date values.
            </summary>
        </member>
        <member name="F:iFactr.UI.Reflection.ControlType.Label">
            <summary>
            A read-only string of text.  If a <see cref="T:iFactr.UI.Reflection.LabelAttribute"/> is also applied,
            this control will appear on the right; otherwise, it will appear on the left.
            </summary>
        </member>
        <member name="F:iFactr.UI.Reflection.ControlType.PasswordBox">
            <summary>
            A control that can accept a single line of text input from the user.
            The input is masked so that it cannot be read, allowing for secured entry of sensitive information.
            </summary>
        </member>
        <member name="F:iFactr.UI.Reflection.ControlType.SelectList">
            <summary>
            A control that lets the user make a single selection from a list of items.
            </summary>
        </member>
        <member name="F:iFactr.UI.Reflection.ControlType.Slider">
            <summary>
            A control that lets the user select from a range of numerical values by sliding a knob along a track.
            </summary>
        </member>
        <member name="F:iFactr.UI.Reflection.ControlType.Switch">
            <summary>
            A control that holds a boolean value and can be toggled by the user.
            </summary>
        </member>
        <member name="F:iFactr.UI.Reflection.ControlType.TextArea">
            <summary>
            A control that can accept multiple lines of text input from the user.
            </summary>
        </member>
        <member name="F:iFactr.UI.Reflection.ControlType.TextBox">
            <summary>
            A control that can accept a single line of text input from the user.
            </summary>
        </member>
        <member name="F:iFactr.UI.Reflection.ControlType.TimePicker">
            <summary>
            A control that lets the user select from a range of time values.
            </summary>
        </member>
        <member name="T:iFactr.UI.Reflection.GroupAttribute">
            <summary>
            Represents a collection of members that occupy the same cell.  When applied to a type, all members of that type will be grouped together.
            </summary>
        </member>
        <member name="M:iFactr.UI.Reflection.GroupAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Reflection.GroupAttribute"/> class.
            </summary>
            <param name="id">A string to identify the group.  Members in groups with the same identifier with be placed together.</param>
        </member>
        <member name="T:iFactr.UI.Reflection.ImageAttribute">
            <summary>
            Represents an image that should accompany the user control that is representing the member on screen.
            </summary>
        </member>
        <member name="M:iFactr.UI.Reflection.ImageAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Reflection.ImageAttribute"/> class.
            </summary>
            <param name="filePath">The full path to the image file that should be used.</param>
        </member>
        <member name="T:iFactr.UI.Reflection.LabelAttribute">
            <summary>
            Represents the text to display when presenting the user control that is representing the member.
            Without this attribute, the text that is displayed is the member's name.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.LabelAttribute.ForegroundColor">
            <summary>
            Gets or sets the color of the label text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.LabelAttribute.FontName">
            <summary>
            Gets or sets the name of the font family to be used when rendering the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.LabelAttribute.FontSize">
            <summary>
            Gets or sets the size of the font that is used when rendering the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.LabelAttribute.FontFormatting">
            <summary>
            Gets or sets the formatting to apply to the font that is used when rendering the text.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.LabelAttribute.Lines">
            <summary>
            Gets or sets the maximum number of lines of text that are allowed to be displayed.
            A value of 0 means that there is no limit.
            </summary>
        </member>
        <member name="M:iFactr.UI.Reflection.LabelAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Reflection.LabelAttribute"/> class.
            </summary>
            <param name="text">The text that is to be rendered.</param>
        </member>
        <member name="T:iFactr.UI.Reflection.MemberParticipationAttribute">
            <summary>
            Describes how a type should handle members that do not have attributes relevant to reflective UI.
            </summary>
        </member>
        <member name="M:iFactr.UI.Reflection.MemberParticipationAttribute.#ctor(iFactr.UI.Reflection.Participation)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Reflection.MemberParticipationAttribute"/> class.
            </summary>
            <param name="participation">The default behavior to use when determining which members to build the UI with.</param>
        </member>
        <member name="T:iFactr.UI.Reflection.Participation">
            <summary>
            Describes how member eligibility should be determined when constructing a reflective UI.
            </summary>
        </member>
        <member name="F:iFactr.UI.Reflection.Participation.OptIn">
            <summary>
            Members must have an appropriate attribute in order to be included during construction of the UI; otherwise, they are ignored.
            </summary>
        </member>
        <member name="F:iFactr.UI.Reflection.Participation.OptOut">
            <summary>
            Members are included in the construction of the UI unless explicitly excluded via the <see cref="T:iFactr.UI.Reflection.SkipAttribute"/>.  This is the default.
            </summary>
        </member>
        <member name="T:iFactr.UI.Reflection.OptInAttribute">
            <summary>
            Represents the base class for attributes that ensure a member is included when a type's participation is set to <see cref="F:iFactr.UI.Reflection.Participation.OptIn"/>.
            </summary>
        </member>
        <member name="T:iFactr.UI.Reflection.OrderAttribute">
            <summary>
            Describes the order in which the member should be presented on screen relative to other members of its declaring type.
            </summary>
        </member>
        <member name="M:iFactr.UI.Reflection.OrderAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Reflection.OrderAttribute"/> class.
            </summary>
            <param name="index">The position of the member on screen.</param>
        </member>
        <member name="T:iFactr.UI.Reflection.SectionAttribute">
            <summary>
            Represents the beginning of a new group of cells.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.SectionAttribute.FooterColor">
            <summary>
            Gets or sets the color of the footer for the section.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.SectionAttribute.FooterText">
            <summary>
            Gets or sets the text to display underneath the section.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.SectionAttribute.FooterTextColor">
            <summary>
            Gets or sets the color of the footer text for the section.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.SectionAttribute.HeaderColor">
            <summary>
            Gets or sets the color of the header for the section.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.SectionAttribute.HeaderText">
            <summary>
            Gets or sets the text to display above the section.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.SectionAttribute.HeaderTextColor">
            <summary>
            Gets or sets the color of the header text for the section.
            </summary>
        </member>
        <member name="T:iFactr.UI.Reflection.SelectableAttribute">
            <summary>
            Represents a cell or button that should perform a navigation when selected by the user.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.SelectableAttribute.SelectionColor">
            <summary>
            Gets or sets the color with which to highlight the cell when it is selected.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.SelectableAttribute.SelectionStyle">
            <summary>
            Gets or sets which visual elements to use to indicate that the cell is selectable or has been selected.
            </summary>
        </member>
        <member name="M:iFactr.UI.Reflection.SelectableAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Reflection.SelectableAttribute"/> class.
            </summary>
            <param name="navigationAddress">The address to navigate to when the element has been selected.</param>
        </member>
        <member name="M:iFactr.UI.Reflection.SelectableAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Reflection.SelectableAttribute"/> class.
            </summary>
            <param name="navigationAddress">The address to navigate to when the element has been selected.</param>
            <param name="accessoryAddress">The address to navigate to when selecting the cell's accessory.</param>
        </member>
        <member name="T:iFactr.UI.Reflection.SkipAttribute">
            <summary>
            Represents a type or member that should be excluded during construction of a reflective UI.
            </summary>
        </member>
        <member name="T:iFactr.UI.Reflection.ViewAttribute">
            <summary>
            Represents a model type from which the framework should generate a view by reflecting on its members.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ViewAttribute.BackAddress">
            <summary>
            Gets or sets the address to navigate to when the user presses the back button.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ViewAttribute.BackgroundColor">
            <summary>
            Gets or sets the background color of the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ViewAttribute.HeaderColor">
            <summary>
            Gets or sets the color of the header bar, if there is one.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ViewAttribute.OutputPane">
            <summary>
            Gets or sets the pane in which the view should be displayed.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ViewAttribute.PreferredOrientations">
            <summary>
            Gets or sets the orientation preference for the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ViewAttribute.Title">
            <summary>
            Gets or sets the title for the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ViewAttribute.TitleColor">
            <summary>
            Gets or sets the color with which to display the title.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ViewAttribute.ListStyle">
            <summary>
            Gets or sets the style in which to render a list view.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ViewAttribute.BrowserUrl">
            <summary>
            Gets or sets the address to navigate to in a browser view.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ViewAttribute.EnableBrowserDefaultControls">
            <summary>
            Gets or sets whether or not to display the back and forward buttons in a browser view.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ViewAttribute.CanvasStrokeColor">
            <summary>
            Gets or sets the color of the strokes when drawing in a canvas view.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ViewAttribute.CanvasStrokeThickness">
            <summary>
            Gets or sets the thickness of the strokes when drawing in a canvas view.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ViewAttribute.ListSeparatorColor">
            <summary>
            Gets or sets the color of the separator lines in a list view.
            </summary>
        </member>
        <member name="P:iFactr.UI.Reflection.ViewAttribute.TabSelectionColor">
            <summary>
            Gets or sets the color with which to overlay the selected tab in a tab view.
            </summary>
        </member>
        <member name="M:iFactr.UI.Reflection.ViewAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Reflection.ViewAttribute"/> class using a view type of List.
            </summary>
        </member>
        <member name="M:iFactr.UI.Reflection.ViewAttribute.#ctor(iFactr.UI.Reflection.ViewType)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Reflection.ViewAttribute"/> class.
            </summary>
            <param name="type">The type of view to generate.</param>
        </member>
        <member name="T:iFactr.UI.Reflection.ViewType">
            <summary>
            Describes the available types of views that are supported by reflective UI.
            </summary>
        </member>
        <member name="F:iFactr.UI.Reflection.ViewType.Browser">
            <summary>
            A view that supports HTML rendering and web page browsing.
            </summary>
        </member>
        <member name="F:iFactr.UI.Reflection.ViewType.Canvas">
            <summary>
            A view that acts as an ink canvas for drawing on.
            </summary>
        </member>
        <member name="F:iFactr.UI.Reflection.ViewType.List">
            <summary>
            A view that lays its contents out in a list of cells.
            </summary>
        </member>
        <member name="F:iFactr.UI.Reflection.ViewType.Tabs">
            <summary>
            A view that contains selectable tab items for separating an application into categories.
            </summary>
        </member>
        <member name="T:iFactr.UI.ISearchBox">
            <summary>
            Defines a text box that can perform search queries.
            </summary>
        </member>
        <member name="P:iFactr.UI.ISearchBox.BackgroundColor">
            <summary>
            Gets or sets the background color of the search box.
            </summary>
        </member>
        <member name="P:iFactr.UI.ISearchBox.BorderColor">
            <summary>
            Gets or sets the color of the border around the search box.
            </summary>
        </member>
        <member name="P:iFactr.UI.ISearchBox.ForegroundColor">
            <summary>
            Gets or sets the color of the text within the search box.
            </summary>
        </member>
        <member name="P:iFactr.UI.ISearchBox.Placeholder">
            <summary>
            Gets or sets the text to display when there is no value in the search box.
            </summary>
        </member>
        <member name="P:iFactr.UI.ISearchBox.TextCompletion">
            <summary>
            Gets or sets completion behavior for text that is entered into the search box.
            Not all platforms support all behaviors.
            </summary>
        </member>
        <member name="P:iFactr.UI.ISearchBox.Text">
            <summary>
            Gets or sets the text within the search box.
            </summary>
        </member>
        <member name="E:iFactr.UI.ISearchBox.SearchPerformed">
            <summary>
            Occurs when the user executes a search through the search box.
            Use this event to filter any model data and reload the view's content.
            </summary>
        </member>
        <member name="M:iFactr.UI.ISearchBox.Focus">
            <summary>
            Programmatically sets input focus to the search box.
            </summary>
        </member>
        <member name="T:iFactr.UI.SearchBox">
            <summary>
            Represents a text box that can perform search queries.
            </summary>
        </member>
        <member name="F:iFactr.UI.SearchBox.BackgroundColorProperty">
            <summary>
            The name of the <see cref="P:BackgroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.SearchBox.BorderColorProperty">
            <summary>
            The name of the <see cref="P:BorderColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.SearchBox.ForegroundColorProperty">
            <summary>
            The name of the <see cref="P:ForegroundColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.SearchBox.PlaceholderProperty">
            <summary>
            The name of the <see cref="P:Placeholder"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.SearchBox.TextCompletionProperty">
            <summary>
            The name of the <see cref="P:TextCompletion"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.SearchBox.TextProperty">
            <summary>
            The name of the <see cref="P:Text"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.SearchBox.SearchPerformed">
            <summary>
            Occurs when the user executes a search through the search box.
            Use this event to filter any model data and reload the view's content.
            </summary>
        </member>
        <member name="P:iFactr.UI.SearchBox.BackgroundColor">
            <summary>
            Gets or sets the background color of the search box.
            </summary>
        </member>
        <member name="P:iFactr.UI.SearchBox.BorderColor">
            <summary>
            Gets or sets the color of the border around the search box.
            </summary>
        </member>
        <member name="P:iFactr.UI.SearchBox.ForegroundColor">
            <summary>
            Gets or sets the color of the text within the search box.
            </summary>
        </member>
        <member name="P:iFactr.UI.SearchBox.Placeholder">
            <summary>
            Gets or sets the text to display when there is no value in the search box.
            </summary>
        </member>
        <member name="P:iFactr.UI.SearchBox.TextCompletion">
            <summary>
            Gets or sets completion behavior for text that is entered into the search box.
            Not all platforms support all behaviors.
            </summary>
        </member>
        <member name="P:iFactr.UI.SearchBox.Text">
            <summary>
            Gets or sets the text within the search box.
            </summary>
        </member>
        <member name="P:iFactr.UI.SearchBox.Pair">
            <summary>
            Gets or sets the native object that is paired with the search box.  This can be set only once.
            </summary>
        </member>
        <member name="M:iFactr.UI.SearchBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.SearchBox"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.SearchBox.Focus">
            <summary>
            Programmatically sets input focus to the search box.
            </summary>
        </member>
        <member name="T:iFactr.UI.Size">
            <summary>
            Represents the width and the height of an object.
            </summary>
        </member>
        <member name="F:iFactr.UI.Size.Empty">
            <summary>
            A <see cref="T:iFactr.UI.Size"/> structure with no width and no height.
            </summary>
        </member>
        <member name="F:iFactr.UI.Size.Height">
            <summary>
            The height of this instance.
            </summary>
        </member>
        <member name="F:iFactr.UI.Size.Width">
            <summary>
            The width of this instance.
            </summary>
        </member>
        <member name="P:iFactr.UI.Size.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="M:iFactr.UI.Size.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Size"/> structure.
            </summary>
            <param name="width">The initial width of the structure.</param>
            <param name="height">The initial height of the structure.</param>
        </member>
        <member name="M:iFactr.UI.Size.Equals(iFactr.UI.Size)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.Size"/> is equal to the current <see cref="T:iFactr.UI.Size"/>.
            </summary>
            <param name="other">The <see cref="T:iFactr.UI.Size"/> to compare with the current <see cref="T:iFactr.UI.Size"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.Size"/> is equal to the current
            <see cref="T:iFactr.UI.Size"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Size.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:iFactr.UI.Size"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:iFactr.UI.Size"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:iFactr.UI.Size"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Size.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:iFactr.UI.Size"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
            hash table.</returns>
        </member>
        <member name="M:iFactr.UI.Size.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:iFactr.UI.Size"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:iFactr.UI.Size"/>.</returns>
        </member>
        <member name="M:iFactr.UI.Size.op_Equality(iFactr.UI.Size,iFactr.UI.Size)">
            <summary>
            Determines whether two <see cref="T:iFactr.UI.Size"/> objects are considered equal.
            </summary>
            <param name="value1">The first object to compare.</param>
            <param name="value2">The second object to compare.</param>
            <returns><c>true</c> if the objects are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Size.op_Inequality(iFactr.UI.Size,iFactr.UI.Size)">
            <summary>
            Determines whether two <see cref="T:iFactr.UI.Size"/> objects are not considered equal.
            </summary>
            <param name="value1">The first object to compare.</param>
            <param name="value2">The second object to compare.</param>
            <returns><c>true</c> if the objects are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Size.op_Addition(iFactr.UI.Size,iFactr.UI.Size)">
            <summary>
            Adds the widths and heights of two <see cref="T:iFactr.UI.Size"/> objects together.
            </summary>
            <param name="value1">The left argument.</param>
            <param name="value2">The right argument.</param>
            <returns>A <see cref="T:iFactr.UI.Size"/> object containing the sum
            of both widths and the sum of both heights.</returns>
        </member>
        <member name="M:iFactr.UI.Size.op_Subtraction(iFactr.UI.Size,iFactr.UI.Size)">
            <summary>
            Subtracts the width and height of a <see cref="T:iFactr.UI.Size"/> object
            by the width and height of another <see cref="T:iFactr.UI.Size"/> object.
            </summary>
            <param name="value1">The left argument.</param>
            <param name="value2">The right argument.</param>
            <returns>A <see cref="T:iFactr.UI.Size"/> object containing the difference
            of both widths and the difference of both heights.</returns>
        </member>
        <member name="M:iFactr.UI.Size.op_Multiply(iFactr.UI.Size,iFactr.UI.Size)">
            <summary>
            Multiplies the widths and heights of two <see cref="T:iFactr.UI.Size"/> objects together.
            </summary>
            <param name="value1">The left argument.</param>
            <param name="value2">The right argument.</param>
            <returns>A <see cref="T:iFactr.UI.Size"/> object containing the product
            of both widths and the product of both heights.</returns>
        </member>
        <member name="M:iFactr.UI.Size.op_Multiply(iFactr.UI.Size,System.Double)">
            <summary>
            Multiplies the width and height of a <see cref="T:iFactr.UI.Size"/> object by a scalar value.
            </summary>
            <param name="value">The object whose width and height are to be scaled.</param>
            <param name="scalar">The amount to multiply the width and height by.</param>
            <returns>A <see cref="T:iFactr.UI.Size"/> object containing the product of the width
            and scalar value and the product of the height and scalar value.</returns>
        </member>
        <member name="M:iFactr.UI.Size.op_Division(iFactr.UI.Size,iFactr.UI.Size)">
            <summary>
            Divides the width and height of a <see cref="T:iFactr.UI.Size"/> object by
            the width and height of another <see cref="T:iFactr.UI.Size"/> object.
            </summary>
            <param name="value1">The left argument.</param>
            <param name="value2">The right argument.</param>
            <returns>A <see cref="T:iFactr.UI.Size"/> object containing the quotient
            of both widths and the quotient of both heights.</returns>
        </member>
        <member name="M:iFactr.UI.Size.op_Division(iFactr.UI.Size,System.Double)">
            <summary>
            Divides the width and height of a <see cref="T:iFactr.UI.Size"/> object by a scalar value.
            </summary>
            <param name="value">The object whose width and height are to be scaled.</param>
            <param name="scalar">The amount to divide the width and height by.</param>
            <returns>A <see cref="T:iFactr.UI.Size"/> object containing the quotient of the width
            and scalar value and the quotient of the height and scalar value.</returns>
        </member>
        <member name="T:iFactr.UI.ITabItem">
            <summary>
            Defines a selectable item within an <see cref="T:iFactr.UI.ITabView"/>.
            </summary>
        </member>
        <member name="P:iFactr.UI.ITabItem.BadgeValue">
            <summary>
            Gets or sets any auxiliary information to display alongside the item.
            </summary>
        </member>
        <member name="P:iFactr.UI.ITabItem.ImagePath">
            <summary>
            Gets or sets the file path of the image to use for the item.
            </summary>
        </member>
        <member name="P:iFactr.UI.ITabItem.NavigationLink">
            <summary>
            Gets or sets the link to navigate to when the item is selected and the view stack associated with the item is empty.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.ITabItem.Selected"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.ITabItem.Title">
            <summary>
            Gets or sets the title for the item.
            </summary>
        </member>
        <member name="P:iFactr.UI.ITabItem.TitleColor">
            <summary>
            Gets or sets the color with which to display the title.
            </summary>
        </member>
        <member name="P:iFactr.UI.ITabItem.TitleFont">
            <summary>
            Gets or sets the font to be used when rendering the title.
            </summary>
        </member>
        <member name="E:iFactr.UI.ITabItem.Selected">
            <summary>
            Occurs when the item is selected by the user.
            </summary>
        </member>
        <member name="T:iFactr.UI.TabItem">
            <summary>
            Represents a selectable item within an <see cref="T:iFactr.UI.ITabView"/>.
            </summary>
        </member>
        <member name="F:iFactr.UI.TabItem.BadgeValueProperty">
            <summary>
            The name of the <see cref="P:BadgeValue"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.TabItem.ImagePathProperty">
            <summary>
            The name of the <see cref="P:ImagePath"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.TabItem.NavigationLinkProperty">
            <summary>
            The name of the <see cref="P:NavigationLink"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.TabItem.TitleProperty">
            <summary>
            The name of the <see cref="P:Title"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.TabItem.TitleColorProperty">
            <summary>
            The name of the <see cref="P:TitleColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.TabItem.TitleFontProperty">
            <summary>
            The name of the <see cref="P:TitleFont"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.TabItem.Selected">
            <summary>
            Occurs when the item is selected by the user.
            </summary>
        </member>
        <member name="P:iFactr.UI.TabItem.BadgeValue">
            <summary>
            Gets or sets any auxiliary information to display alongside the item.
            </summary>
        </member>
        <member name="P:iFactr.UI.TabItem.ImagePath">
            <summary>
            Gets or sets the file path of the image to use for the item.
            </summary>
        </member>
        <member name="P:iFactr.UI.TabItem.NavigationLink">
            <summary>
            Gets or sets the link to navigate to when the item is selected and the view stack associated with the item is empty.
            The navigation only occurs if there is no handler for the <see cref="E:iFactr.UI.TabItem.Selected"/> event.
            </summary>
        </member>
        <member name="P:iFactr.UI.TabItem.Title">
            <summary>
            Gets or sets the title for the item.
            </summary>
        </member>
        <member name="P:iFactr.UI.TabItem.TitleColor">
            <summary>
            Gets or sets the color with which to display the title.
            </summary>
        </member>
        <member name="P:iFactr.UI.TabItem.TitleFont">
            <summary>
            Gets or sets the font to be used when rendering the title.
            </summary>
        </member>
        <member name="P:iFactr.UI.TabItem.Pair">
            <summary>
            Gets or sets the native object that is paired with the toolbar.  This can be set only once.
            </summary>
        </member>
        <member name="M:iFactr.UI.TabItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.TabItem"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.TabItem.#ctor(System.String,iFactr.UI.Link)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.TabItem"/> class.
            </summary>
            <param name="title">The title for the item.</param>
            <param name="navigationLink">The link to navigate to when the item is selected.</param>
        </member>
        <member name="M:iFactr.UI.TabItem.Equals(iFactr.UI.ITabItem)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.ITabItem"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:iFactr.UI.ITabItem"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.ITabItem"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.UI.Thickness">
            <summary>
            Represents the thickness of the frame around a rectangle.
            </summary>
        </member>
        <member name="P:iFactr.UI.Thickness.BottomMargin">
            <summary>
            Gets a value that is appropriate for spacing between an element and the bottom edge of its parent container.
            This value may differ between platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.Thickness.LeftMargin">
            <summary>
            Gets a value that is appropriate for spacing between an element and the left edge of its parent container.
            This value may differ between platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.Thickness.RightMargin">
            <summary>
            Gets a value that is appropriate for spacing between an element and the right edge of its parent container.
            This value may differ between platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.Thickness.TopMargin">
            <summary>
            Gets a value that is appropriate for spacing between an element and the top edge of its parent container.
            This value may differ between platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.Thickness.SmallHorizontalSpacing">
            <summary>
            Gets a value that is appropriate for a small amount of horizontal spacing between two elements.
            This value may differ between platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.Thickness.SmallVerticalSpacing">
            <summary>
            Gets a value that is appropriate for a small amount of vertical spacing between two elements.
            This value may differ between platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.Thickness.LargeHorizontalSpacing">
            <summary>
            Gets a value that is appropriate for a large amount of horizontal spacing between two elements.
            This value may differ between platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.Thickness.LargeVerticalSpacing">
            <summary>
            Gets a value that is appropriate for a large amount of vertical spacing between two elements.
            This value may differ between platforms.
            </summary>
        </member>
        <member name="F:iFactr.UI.Thickness.Bottom">
            <summary>
            The thickness of the lower edge of the rectangle.
            </summary>
        </member>
        <member name="F:iFactr.UI.Thickness.Left">
            <summary>
            The thickness of the left edge of the rectangle.
            </summary>
        </member>
        <member name="F:iFactr.UI.Thickness.Right">
            <summary>
            The thickness of the right edge of the rectangle.
            </summary>
        </member>
        <member name="F:iFactr.UI.Thickness.Top">
            <summary>
            The thickness of the upper edge of the rectangle.
            </summary>
        </member>
        <member name="M:iFactr.UI.Thickness.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Thickness"/> structure.
            </summary>
            <param name="uniformLength">The length of all four edges of the rectangle.</param>
        </member>
        <member name="M:iFactr.UI.Thickness.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Thickness"/> structure.
            </summary>
            <param name="horizontalLength">The length of the left and right edges of the rectangle.</param>
            <param name="verticalLength">The length of the upper and lower edges of the rectangle.</param>
        </member>
        <member name="M:iFactr.UI.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.Thickness"/> structure.
            </summary>
            <param name="left">The thickness of the left edge of the rectangle.</param>
            <param name="top">The thickness of the upper edge of the rectangle.</param>
            <param name="right">The thickness of the right edge of the rectangle.</param>
            <param name="bottom">The thickness of the lower edge of the rectangle.</param>
        </member>
        <member name="M:iFactr.UI.Thickness.Equals(iFactr.UI.Thickness)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.Thickness"/> is equal to the current <see cref="T:iFactr.UI.Thickness"/>.
            </summary>
            <param name="other">The <see cref="T:iFactr.UI.Thickness"/> to compare with the current <see cref="T:iFactr.UI.Thickness"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.Thickness"/> is equal to the current
            <see cref="T:iFactr.UI.Thickness"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Thickness.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:iFactr.UI.Thickness"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:iFactr.UI.Thickness"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:iFactr.UI.Thickness"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Thickness.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:iFactr.UI.Thickness"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
            hash table.</returns>
        </member>
        <member name="M:iFactr.UI.Thickness.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:iFactr.UI.Thickness"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:iFactr.UI.Thickness"/>.</returns>
        </member>
        <member name="M:iFactr.UI.Thickness.op_Equality(iFactr.UI.Thickness,iFactr.UI.Thickness)">
            <summary>
            Determines whether two <see cref="T:iFactr.UI.Thickness"/> objects are considered equal.
            </summary>
            <param name="value1">The first object to compare.</param>
            <param name="value2">The second object to compare.</param>
            <returns><c>true</c> if the objects are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Thickness.op_Inequality(iFactr.UI.Thickness,iFactr.UI.Thickness)">
            <summary>
            Determines whether two <see cref="T:iFactr.UI.Thickness"/> objects are not considered equal.
            </summary>
            <param name="value1">The first object to compare.</param>
            <param name="value2">The second object to compare.</param>
            <returns><c>true</c> if the objects are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.Thickness.op_Addition(iFactr.UI.Thickness,iFactr.UI.Thickness)">
            <summary>
            Adds the specified amount to each edge of a <see cref="T:iFactr.UI.Thickness"/> object.
            </summary>
            <param name="value">The object whose edges are to be incremented.</param>
            <param name="amount">The Thickness to add.</param>
            <returns>A <see cref="T:iFactr.UI.Thickness"/> object containing the sum of each edge and the amount.</returns>
        </member>
        <member name="M:iFactr.UI.Thickness.op_Subtraction(iFactr.UI.Thickness,iFactr.UI.Thickness)">
            <summary>
            Subtracts each edge of a <see cref="T:iFactr.UI.Thickness"/> object by the specified amount.
            </summary>
            <param name="value">The object whose edges are to be decremented.</param>
            <param name="amount">The amount to subtract from each edge.</param>
            <returns>A <see cref="T:iFactr.UI.Thickness"/> object containing the difference of each edge and the amount.</returns>
        </member>
        <member name="M:iFactr.UI.Thickness.op_Addition(iFactr.UI.Thickness,System.Double)">
            <summary>
            Adds the specified amount to each edge of a <see cref="T:iFactr.UI.Thickness"/> object.
            </summary>
            <param name="value">The object whose edges are to be incremented.</param>
            <param name="amount">The amount to add to each edge.</param>
            <returns>A <see cref="T:iFactr.UI.Thickness"/> object containing the sum of each edge and the amount.</returns>
        </member>
        <member name="M:iFactr.UI.Thickness.op_Subtraction(iFactr.UI.Thickness,System.Double)">
            <summary>
            Subtracts each edge of a <see cref="T:iFactr.UI.Thickness"/> object by the specified amount.
            </summary>
            <param name="value">The object whose edges are to be decremented.</param>
            <param name="amount">The amount to subtract from each edge.</param>
            <returns>A <see cref="T:iFactr.UI.Thickness"/> object containing the difference of each edge and the amount.</returns>
        </member>
        <member name="M:iFactr.UI.Thickness.op_Multiply(iFactr.UI.Thickness,System.Double)">
            <summary>
            Multiplies each edge of a <see cref="T:iFactr.UI.Thickness"/> object by a scalar value.
            </summary>
            <param name="value">The object whose edges are to be scaled.</param>
            <param name="scalar">The amount to multiply each edge.</param>
            <returns>A <see cref="T:iFactr.UI.Thickness"/> object containing the product of each edge and the scalar value.</returns>
        </member>
        <member name="M:iFactr.UI.Thickness.op_Division(iFactr.UI.Thickness,System.Double)">
            <summary>
            Divides each edge of a <see cref="T:iFactr.UI.Thickness"/> object by a scalar value.
            </summary>
            <param name="value">The object whose edges are to be scaled.</param>
            <param name="scalar">The amount to divide each edge.</param>
            <returns>A <see cref="T:iFactr.UI.Thickness"/> object containing the quotient of each edge and the scalar value.</returns>
        </member>
        <member name="T:iFactr.UI.ValidationErrorCollection">
            <summary>
            Represents a collection of control submission keys and any errors that have occurred while validating the control.
            </summary>
        </member>
        <member name="P:iFactr.UI.ValidationErrorCollection.Count">
            <summary>
            Gets the number of entries contained in the collection.
            </summary>
        </member>
        <member name="P:iFactr.UI.ValidationErrorCollection.Keys">
            <summary>
            Gets a collection containing the keys for this instance.
            These keys are the submission keys of the controls that have encountered validation errors.
            </summary>
        </member>
        <member name="P:iFactr.UI.ValidationErrorCollection.Values">
            <summary>
            Gets a collection containing the values for this instance.
            These values are the validation errors that have occurred for each control.
            </summary>
        </member>
        <member name="M:iFactr.UI.ValidationErrorCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.ValidationErrorCollection"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.ValidationErrorCollection.#ctor(System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.ValidationErrorCollection"/> class.
            </summary>
            <param name="initialValues">An <see cref="T:IDictionary&lt;string, string[]&gt;"/> containing elements to copy over to the new instance.</param>
        </member>
        <member name="M:iFactr.UI.ValidationErrorCollection.Add(System.String,System.String[])">
            <summary>
            Adds an entry with the specified submission key and validation errors to the collection.
            </summary>
        </member>
        <member name="M:iFactr.UI.ValidationErrorCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contains an entry with the specified submission key.
            </summary>
            <returns><c>true</c> if the key was located in the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.ValidationErrorCollection.Remove(System.String)">
            <summary>
            Removes the entry with the specified submission key from the collection.
            </summary>
            <returns><c>true</c> if the entry was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.ValidationErrorCollection.TryGetValue(System.String,System.String[]@)">
            <summary>
            Gets the validation errors associated with the specified submission key.
            </summary>
            <param name="submitKey">The submission key whose associated validation errors to get.</param>
            <param name="errors">When the method returns, the errors associated with the specified submission key, if the key was found; otherwise, <c>null</c>."/></param>
            <returns><c>true</c> if the validation errors were successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:iFactr.UI.ValidationErrorCollection.Item(System.String)">
            <summary>
            Gets or sets the validation errors associated with the specified submission key.
            </summary>
            <param name="submitKey">The submission key associated with the validation errors to get or set.</param>
            <returns>The validation errors associated with the <paramref name="submitKey"/>.</returns>
        </member>
        <member name="M:iFactr.UI.ValidationErrorCollection.Clear">
            <summary>
            Removes all entries from the collection.
            </summary>
        </member>
        <member name="M:iFactr.UI.ValidationErrorCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="T:iFactr.UI.BrowserView`1">
            <summary>
            Represents a native view that supports HTML rendering and web page browsing.
            </summary>
            <typeparam name="T">The type of the model.</typeparam>
        </member>
        <member name="F:iFactr.UI.BrowserView`1.BackLinkProperty">
            <summary>
            The name of the <see cref="P:BackLink"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.BrowserView`1.CanGoBackProperty">
            <summary>
            The name of the <see cref="P:CanGoBack"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.BrowserView`1.CanGoForwardProperty">
            <summary>
            The name of the <see cref="P:CanGoForward"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.BrowserView`1.EnableDefaultControlsProperty">
            <summary>
            The name of the <see cref="P:EnableDefaultControls"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.BrowserView`1.MenuProperty">
            <summary>
            The name of the <see cref="P:Menu"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.BrowserView`1.OutputPaneProperty">
            <summary>
            The name of the <see cref="P:OutputPane"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.BrowserView`1.PopoverPresentationStyleProperty">
            <summary>
            The name of the <see cref="P:PopoverPresentationStyle"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.BrowserView`1.StackIDProperty">
            <summary>
            The name of the <see cref="P:StackID"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.BrowserView`1.Activated">
            <summary>
            Occurs when the view is pushed or popped onto the top of a view stack.
            </summary>
        </member>
        <member name="E:iFactr.UI.BrowserView`1.Deactivated">
            <summary>
            Occurs when the view is pushed under or popped off of the top of a view stack.
            </summary>
        </member>
        <member name="E:iFactr.UI.BrowserView`1.LoadFinished">
            <summary>
            Occurs when the page has been loaded.
            </summary>
        </member>
        <member name="P:iFactr.UI.BrowserView`1.BackLink">
            <summary>
            Gets or sets the <see cref="T:iFactr.UI.Link"/> that describes the behavior
            and appearance of the back button associated with the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.BrowserView`1.CanGoBack">
            <summary>
            Gets a value indicating whether the browser can navigate back a page in the browsing history.
            </summary>
        </member>
        <member name="P:iFactr.UI.BrowserView`1.CanGoForward">
            <summary>
            Gets a value indicating whether the browser can navigate forward a page in the browsing history.
            </summary>
        </member>
        <member name="P:iFactr.UI.BrowserView`1.EnableDefaultControls">
            <summary>
            Gets or sets a value indicating whether the view should automatically create 'Back' and 'Forward' buttons.
            </summary>
        </member>
        <member name="P:iFactr.UI.BrowserView`1.Menu">
            <summary>
            Gets or sets a menu of selectable items that provide support functions for the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.BrowserView`1.StackID">
            <summary>
            Gets or sets the stack identifier for the view.
            Views with the same identifier will take the same place in the view stack.
            </summary>
        </member>
        <member name="P:iFactr.UI.BrowserView`1.OutputPane">
            <summary>
            Gets or sets the pane on which the view will be rendered.
            </summary>
        </member>
        <member name="P:iFactr.UI.BrowserView`1.PopoverPresentationStyle">
            <summary>
            Gets or sets the style in which the view should be presented when displayed in a popover pane.
            </summary>
        </member>
        <member name="P:iFactr.UI.BrowserView`1.Stack">
            <summary>
            Gets the view stack that the view is currently on.
            </summary>
        </member>
        <member name="P:iFactr.UI.BrowserView`1.iFactr#UI#IHistoryEntry#ShouldNavigate">
            <summary>
            Invoked when the view is being pushed under or popped off of the top of the view stack.
            Returning a value of <c>false</c> will cancel the navigation.
            </summary>
        </member>
        <member name="P:iFactr.UI.BrowserView`1.Model">
            <summary>
            Gets or sets the model containing the information that is displayed by the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.BrowserView`1.ModelType">
            <summary>
            Gets the type of the model displayed by the view.
            </summary>
        </member>
        <member name="M:iFactr.UI.BrowserView`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.BrowserView`1"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.BrowserView`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.BrowserView`1"/> class.
            </summary>
            <param name="model">The model containing the information that is displayed by the view.</param>
        </member>
        <member name="M:iFactr.UI.BrowserView`1.GoBack">
            <summary>
            If able, navigates to the previous page in the browser's history.
            </summary>
        </member>
        <member name="M:iFactr.UI.BrowserView`1.GoForward">
            <summary>
            If able, navigates to the next page in the browser's history.
            </summary>
        </member>
        <member name="M:iFactr.UI.BrowserView`1.LaunchExternal(System.String)">
            <summary>
            Launches an external browser application and navigates to the specified URL.
            </summary>
            <param name="url">The URL to navigate to.</param>
        </member>
        <member name="M:iFactr.UI.BrowserView`1.Load(System.String)">
            <summary>
            Loads the specified URL in the browser.
            </summary>
            <param name="url">The URL to load.</param>
        </member>
        <member name="M:iFactr.UI.BrowserView`1.LoadFromString(System.String)">
            <summary>
            Reads the specified string as HTML and loads the result in the browser.
            </summary>
            <param name="html">The HTML to load.</param>
        </member>
        <member name="M:iFactr.UI.BrowserView`1.Refresh">
            <summary>
            Refreshes the contents of the browser.
            </summary>
        </member>
        <member name="M:iFactr.UI.BrowserView`1.GetModel">
            <summary>
            Gets the model for the view.
            </summary>
        </member>
        <member name="M:iFactr.UI.BrowserView`1.SetModel(System.Object)">
            <summary>
            Sets the model for the view.
            </summary>
            <param name="model">The object to set the model to.</param>
            <exception cref="T:System.InvalidCastException">Thrown when the <paramref name="model"/> is of an incorrect type.</exception>
        </member>
        <member name="M:iFactr.UI.BrowserView`1.ShouldNavigateFrom(iFactr.UI.Link,iFactr.UI.NavigationType)">
            <summary>
            Called when the view is being pushed under or popped off of the top of the view stack.
            Returning a value of <c>false</c> will cancel the navigation.
            </summary>
            <param name="link">A <see cref="T:iFactr.UI.Link"/> containing the destination and any other relevant information regarding the navigation taking place.</param>
            <param name="type">The type of navigation that was initiated.</param>
            <returns><c>true</c> to proceed with the navigation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.UI.CanvasView`1">
            <summary>
            Represents a native view that acts as an ink canvas for drawing on.
            </summary>
            <typeparam name="T">The type of the model.</typeparam>
        </member>
        <member name="F:iFactr.UI.CanvasView`1.BackLinkProperty">
            <summary>
            The name of the <see cref="P:BackLink"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.CanvasView`1.OutputPaneProperty">
            <summary>
            The name of the <see cref="P:OutputPane"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.CanvasView`1.PopoverPresentationStyleProperty">
            <summary>
            The name of the <see cref="P:PopoverPresentationStyle"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.CanvasView`1.StackIDProperty">
            <summary>
            The name of the <see cref="P:StackID"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.CanvasView`1.StrokeColorProperty">
            <summary>
            The name of the <see cref="P:StrokeColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.CanvasView`1.StrokeThicknessProperty">
            <summary>
            The name of the <see cref="P:StrokeThickness"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.CanvasView`1.ToolbarProperty">
            <summary>
            The name of the <see cref="P:Toolbar"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.CanvasView`1.Activated">
            <summary>
            Occurs when the view is pushed or popped onto the top of a view stack.
            </summary>
        </member>
        <member name="E:iFactr.UI.CanvasView`1.Deactivated">
            <summary>
            Occurs when the view is pushed under or popped off of the top of a view stack.
            </summary>
        </member>
        <member name="E:iFactr.UI.CanvasView`1.DrawingSaved">
            <summary>
            Occurs when the current drawing has been saved to disk.
            </summary>
        </member>
        <member name="P:iFactr.UI.CanvasView`1.BackLink">
            <summary>
            Gets or sets the <see cref="T:iFactr.UI.Link"/> that describes the behavior
            and appearance of the back button associated with the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.CanvasView`1.StackID">
            <summary>
            Gets or sets the stack identifier for the view.
            Views with the same identifier will take the same place in the view stack.
            </summary>
        </member>
        <member name="P:iFactr.UI.CanvasView`1.OutputPane">
            <summary>
            Gets or sets the pane on which the view will be rendered.
            </summary>
        </member>
        <member name="P:iFactr.UI.CanvasView`1.PopoverPresentationStyle">
            <summary>
            Gets or sets the style in which the view should be presented when displayed in a popover pane.
            </summary>
        </member>
        <member name="P:iFactr.UI.CanvasView`1.Stack">
            <summary>
            Gets the view stack that the view is currently on.
            </summary>
        </member>
        <member name="P:iFactr.UI.CanvasView`1.iFactr#UI#IHistoryEntry#ShouldNavigate">
            <summary>
            Invoked when the view is being pushed under or popped off of the top of the view stack.
            Returning a value of <c>false</c> will cancel the navigation.
            </summary>
        </member>
        <member name="P:iFactr.UI.CanvasView`1.StrokeColor">
            <summary>
            Gets or sets the color of the strokes when drawing.
            </summary>
        </member>
        <member name="P:iFactr.UI.CanvasView`1.StrokeThickness">
            <summary>
            Gets or sets the thickness of the strokes when drawing.
            </summary>
        </member>
        <member name="P:iFactr.UI.CanvasView`1.Toolbar">
            <summary>
            Gets or sets a toolbar of selectable items that provide support functions for the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.CanvasView`1.Model">
            <summary>
            Gets or sets the model containing the information that is displayed by the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.CanvasView`1.ModelType">
            <summary>
            Gets the type of the model displayed by the view.
            </summary>
        </member>
        <member name="M:iFactr.UI.CanvasView`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.CanvasView`1"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.CanvasView`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.CanvasView`1"/> class.
            </summary>
            <param name="model">The model containing the information that is displayed by the view.</param>
        </member>
        <member name="M:iFactr.UI.CanvasView`1.Clear">
            <summary>
            Clears the canvas of all foreground content.
            </summary>
        </member>
        <member name="M:iFactr.UI.CanvasView`1.Load(System.String)">
            <summary>
            Loads the specified file into the canvas.
            </summary>
            <param name="fileName">The full path of the file to load.</param>
        </member>
        <member name="M:iFactr.UI.CanvasView`1.Save(System.Boolean)">
            <summary>
            Saves the current drawing to the temp directory with a randomly generated file name.
            </summary>
            <param name="compositeBackground">Whether to include the background as part of the saved image.</param>
        </member>
        <member name="M:iFactr.UI.CanvasView`1.Save(System.String)">
            <summary>
            Saves the current drawing to the specified file.
            </summary>
            <param name="fileName">The full path of the file in which to save the image.</param>
        </member>
        <member name="M:iFactr.UI.CanvasView`1.Save(System.String,System.Boolean)">
            <summary>
            Saves the current drawing to the specified file.
            </summary>
            <param name="fileName">The full path of the file in which to save the image.</param>
            <param name="compositeBackground">Whether to include the background as part of the saved image.</param>
        </member>
        <member name="M:iFactr.UI.CanvasView`1.GetModel">
            <summary>
            Gets the model for the view.
            </summary>
        </member>
        <member name="M:iFactr.UI.CanvasView`1.SetModel(System.Object)">
            <summary>
            Sets the model for the view.
            </summary>
            <param name="model">The object to set the model to.</param>
            <exception cref="T:System.InvalidCastException">Thrown when the <paramref name="model"/> is of an incorrect type.</exception>
        </member>
        <member name="M:iFactr.UI.CanvasView`1.ShouldNavigateFrom(iFactr.UI.Link,iFactr.UI.NavigationType)">
            <summary>
            Called when the view is being pushed under or popped off of the top of the view stack.
            Returning a value of <c>false</c> will cancel the navigation.
            </summary>
            <param name="link">A <see cref="T:iFactr.UI.Link"/> containing the destination and any other relevant information regarding the navigation taking place.</param>
            <param name="type">The type of navigation that was initiated.</param>
            <returns><c>true</c> to proceed with the navigation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:iFactr.UI.CanvasController.ModelType">
            <summary>
            Gets the type of the model used by this controller.
            </summary>
        </member>
        <member name="M:iFactr.UI.CanvasController.#ctor(iFactr.UI.ICanvasView,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.CanvasController"/> class.
            </summary>
            <param name="canvas">The canvas view that the controller displays.</param>
            <param name="perspective">The perspective of the canvas view.</param>
        </member>
        <member name="M:iFactr.UI.CanvasController.GetModel">
            <summary>
            Gets the model for the controller.
            </summary>
        </member>
        <member name="M:iFactr.UI.CanvasController.Load(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads this instance with the specified parameters.
            </summary>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing any parameters such as submitted values.</param>
            <returns>The view perspective from loading this instance.</returns>
        </member>
        <member name="M:iFactr.UI.CanvasController.Load(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads this instance with the specified parameters.
            </summary>
            <param name="uri">A <see cref="T:System.String"/> that represents the uri used to navigate to the controller.</param>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing any parameters such as submitted values.</param>
        </member>
        <member name="T:iFactr.UI.GridView`1">
            <summary>
            Represents a native view that acts as a grid for laying out various UI elements.
            </summary>
            <typeparam name="T">The type of the model.</typeparam>
        </member>
        <member name="F:iFactr.UI.GridView`1.BackLinkProperty">
            <summary>
            The name of the <see cref="P:BackLink"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.GridView`1.HorizontalScrollingEnabledProperty">
            <summary>
            The name of the <see cref="P:HorizontalScrollingEnabled"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.GridView`1.VerticalScrollingEnabledProperty">
            <summary>
            The name of the <see cref="P:VerticalScrollingEnabled"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.GridView`1.MenuProperty">
            <summary>
            The name of the <see cref="P:Menu"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.GridView`1.OutputPaneProperty">
            <summary>
            The name of the <see cref="P:OutputPane"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.GridView`1.PaddingProperty">
            <summary>
            The name of the <see cref="P:Padding"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.GridView`1.PopoverPresentationStyleProperty">
            <summary>
            The name of the <see cref="P:PopoverPresentationStyle"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.GridView`1.StackIDProperty">
            <summary>
            The name of the <see cref="P:StackID"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.GridView`1.Activated">
            <summary>
            Occurs when the view is pushed or popped onto the top of a view stack.
            </summary>
        </member>
        <member name="E:iFactr.UI.GridView`1.Deactivated">
            <summary>
            Occurs when the view is pushed under or popped off of the top of a view stack.
            </summary>
        </member>
        <member name="E:iFactr.UI.GridView`1.Submitting">
            <summary>
            Occurs when the view is being submitted and the values of its controls are being gathered.
            Use this event to manipulate a submitted value prior to navigation or to cancel the submission.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridView`1.HorizontalScrollingEnabled">
            <summary>
            Gets or sets a value indicating whether horizontal scrolling is enabled.
            If <c>false</c>, the content will be locked to the width of the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridView`1.VerticalScrollingEnabled">
            <summary>
            Gets or sets a value indicating whether vertical scrolling is enabled.
            If <c>false</c>, the content will be locked to the height of the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridView`1.Columns">
            <summary>
            Gets a collection of the columns that currently make up the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridView`1.Children">
            <summary>
            Gets a collection of the UI elements that currently reside within the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridView`1.Padding">
            <summary>
            Gets or sets the amount of spacing between the edges of the view and the children within it.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridView`1.Rows">
            <summary>
            Gets a collection of the rows that currently make up the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridView`1.Menu">
            <summary>
            Gets or sets a menu of selectable items that provide support functions for the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridView`1.BackLink">
            <summary>
            Gets or sets the <see cref="T:iFactr.UI.Link"/> that describes the behavior
            and appearance of the back button associated with the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridView`1.StackID">
            <summary>
            Gets or sets the stack identifier for the view.
            Views with the same identifier will take the same place in the view stack.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridView`1.OutputPane">
            <summary>
            Gets or sets the pane on which the view will be rendered.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridView`1.PopoverPresentationStyle">
            <summary>
            Gets or sets the style in which the view should be presented when displayed in a popover pane.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridView`1.Stack">
            <summary>
            Gets the view stack that the view is currently on.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridView`1.iFactr#UI#IHistoryEntry#ShouldNavigate">
            <summary>
            Invoked when the view is being pushed under or popped off of the top of the view stack.
            Returning a value of <c>false</c> will cancel the navigation.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridView`1.ValidationErrors">
            <summary>
            Gets a collection of errors that have occurred during control validation.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridView`1.Model">
            <summary>
            Gets or sets the model containing the information that is displayed by the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.GridView`1.ModelType">
            <summary>
            Gets the type of the model displayed by the view.
            </summary>
        </member>
        <member name="M:iFactr.UI.GridView`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.GridView`1"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.GridView`1.AddChild(iFactr.UI.Controls.IElement)">
            <summary>
            Adds the specified <see cref="T:iFactr.UI.Controls.IElement"/> instance to the view.
            </summary>
            <param name="element">The element to be added to the view.</param>
        </member>
        <member name="M:iFactr.UI.GridView`1.RemoveChild(iFactr.UI.Controls.IElement)">
            <summary>
            Removes the specified <see cref="T:iFactr.UI.Controls.IElement"/> instance from the view.
            </summary>
            <param name="element">The element to be removed from the view.</param>
        </member>
        <member name="M:iFactr.UI.GridView`1.GetSubmissionValues">
            <summary>
            Returns the control values that would be submitted as parameters if the <see cref="M:iFactr.UI.GridView`1.Submit(System.String)"/> or <see cref="M:iFactr.UI.GridView`1.Submit(iFactr.UI.Link)"/> methods are called.
            </summary>
            <returns>The control values as an <see cref="T:IDictionary&lt;string, string&gt;"/>.</returns>
        </member>
        <member name="M:iFactr.UI.GridView`1.Submit(System.String)">
            <summary>
            Submits the view, gathering the values of its controls and navigating
            to the specified URL with the gathered control values as parameters.
            </summary>
            <param name="url">The URL to navigate to after all control values have been gathered.</param>
        </member>
        <member name="M:iFactr.UI.GridView`1.Submit(iFactr.UI.Link)">
            <summary>
            Submits the view, gathering the values of its controls and navigating
            to the specified link with the gathered control values as parameters.
            </summary>
            <param name="link">The link to navigate to after all control values have been gathered.</param>
        </member>
        <member name="M:iFactr.UI.GridView`1.GetModel">
            <summary>
            Gets the model for the view.
            </summary>
        </member>
        <member name="M:iFactr.UI.GridView`1.SetModel(System.Object)">
            <summary>
            Sets the model for the view.
            </summary>
            <param name="model">The object to set the model to.</param>
            <exception cref="T:System.InvalidCastException">Thrown when the <paramref name="model"/> is of an incorrect type.</exception>
        </member>
        <member name="M:iFactr.UI.GridView`1.ShouldNavigateFrom(iFactr.UI.Link,iFactr.UI.NavigationType)">
            <summary>
            Called when the view is being pushed under or popped off of the top of the view stack.
            Returning a value of <c>false</c> will cancel the navigation.
            </summary>
            <param name="link">A <see cref="T:iFactr.UI.Link"/> containing the destination and any other relevant information regarding the navigation taking place.</param>
            <param name="type">The type of navigation that was initiated.</param>
            <returns><c>true</c> to proceed with the navigation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.UI.IBrowserView">
            <summary>
            Defines a native view that supports HTML rendering and web page browsing.
            </summary>
        </member>
        <member name="E:iFactr.UI.IBrowserView.LoadFinished">
            <summary>
            Occurs when the page has been loaded.
            </summary>
        </member>
        <member name="P:iFactr.UI.IBrowserView.CanGoBack">
            <summary>
            Gets a value indicating whether the browser can navigate back a page in the browsing history.
            </summary>
        </member>
        <member name="P:iFactr.UI.IBrowserView.CanGoForward">
            <summary>
            Gets a value indicating whether the browser can navigate forward a page in the browsing history.
            </summary>
        </member>
        <member name="P:iFactr.UI.IBrowserView.EnableDefaultControls">
            <summary>
            Gets or sets a value indicating whether the view should automatically create 'Back' and 'Forward' buttons.
            </summary>
        </member>
        <member name="P:iFactr.UI.IBrowserView.Menu">
            <summary>
            Gets or sets a menu of selectable items that provide support functions for the view.
            </summary>
        </member>
        <member name="M:iFactr.UI.IBrowserView.GoBack">
            <summary>
            Navigates back a page in the browser's history.
            </summary>
        </member>
        <member name="M:iFactr.UI.IBrowserView.GoForward">
            <summary>
            Navigates forward a page in the browser's history.
            </summary>
        </member>
        <member name="M:iFactr.UI.IBrowserView.LaunchExternal(System.String)">
            <summary>
            Launches an external browser application and navigates to the specified URL.
            </summary>
            <param name="url">The URL to navigate to.</param>
        </member>
        <member name="M:iFactr.UI.IBrowserView.Load(System.String)">
            <summary>
            Loads the specified URL in the browser.
            </summary>
            <param name="url">The URL to load.</param>
        </member>
        <member name="M:iFactr.UI.IBrowserView.LoadFromString(System.String)">
            <summary>
            Reads the specified string as HTML and loads the result in the browser.
            </summary>
            <param name="html">The HTML to load.</param>
        </member>
        <member name="M:iFactr.UI.IBrowserView.Refresh">
            <summary>
            Refreshes the contents of the browser.
            </summary>
        </member>
        <member name="T:iFactr.UI.IBrowserView`1">
            <summary>
            Defines a native view that supports HTML rendering and web page browsing.
            </summary>
            <typeparam name="T">The type of the Model.</typeparam>
        </member>
        <member name="T:iFactr.UI.ICanvasView">
            <summary>
            Defines a native view that acts as an ink canvas for drawing on.
            </summary>
        </member>
        <member name="P:iFactr.UI.ICanvasView.StrokeColor">
            <summary>
            Gets or sets the color of the strokes when drawing.
            </summary>
        </member>
        <member name="P:iFactr.UI.ICanvasView.StrokeThickness">
            <summary>
            Gets or sets the thickness of the strokes when drawing.
            </summary>
        </member>
        <member name="P:iFactr.UI.ICanvasView.Toolbar">
            <summary>
            Gets or sets a toolbar of selectable items that provide support functions for the view.
            </summary>
        </member>
        <member name="M:iFactr.UI.ICanvasView.Clear">
            <summary>
            Clears the canvas of all foreground content.
            </summary>
        </member>
        <member name="M:iFactr.UI.ICanvasView.Load(System.String)">
            <summary>
            Loads the specified file into the canvas.
            </summary>
            <param name="fileName">The full path of the file to load.</param>
        </member>
        <member name="M:iFactr.UI.ICanvasView.Save(System.Boolean)">
            <summary>
            Saves the current drawing to the temp directory with a randomly generated file name.
            </summary>
            <param name="compositeBackground">Whether to include the background as part of the saved image.</param>
        </member>
        <member name="M:iFactr.UI.ICanvasView.Save(System.String)">
            <summary>
            Saves the current drawing to the specified file.
            </summary>
            <param name="fileName">The full path of the file in which to save the image.</param>
        </member>
        <member name="M:iFactr.UI.ICanvasView.Save(System.String,System.Boolean)">
            <summary>
            Saves the current drawing to the specified file.
            </summary>
            <param name="fileName">The full path of the file in which to save the image.</param>
            <param name="compositeBackground">Whether to include the background as part of the saved image.</param>
        </member>
        <member name="E:iFactr.UI.ICanvasView.DrawingSaved">
            <summary>
            Occurs when the current drawing has been saved to disk.
            </summary>
        </member>
        <member name="T:iFactr.UI.ICanvasView`1">
            <summary>
            Defines a native view that acts as an ink canvas for drawing on.
            </summary>
            <typeparam name="T">The type of the Model.</typeparam>
        </member>
        <member name="T:iFactr.UI.IGridView">
            <summary>
            Defines a native view that acts as a grid for laying out various UI elements.
            </summary>
        </member>
        <member name="P:iFactr.UI.IGridView.HorizontalScrollingEnabled">
            <summary>
            Gets or sets a value indicating whether horizontal scrolling is enabled.
            If <c>false</c>, the content will be locked to the width of the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.IGridView.VerticalScrollingEnabled">
            <summary>
            Gets or sets a value indicating whether vertical scrolling is enabled.
            If <c>false</c>, the content will be locked to the height of the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.IGridView.Menu">
            <summary>
            Gets or sets a menu of selectable items that provide support functions for the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.IGridView.ValidationErrors">
            <summary>
            Gets a collection of errors that have occurred during control validation.
            </summary>
        </member>
        <member name="E:iFactr.UI.IGridView.Submitting">
            <summary>
            Occurs when the view is being submitted and the values of its controls are being gathered.
            Use this event to manipulate a submitted value prior to navigation or to cancel the submission.
            </summary>
        </member>
        <member name="M:iFactr.UI.IGridView.GetSubmissionValues">
            <summary>
            Returns the control values that would be submitted as parameters if the <see cref="M:iFactr.UI.IGridView.Submit(System.String)"/> or <see cref="M:iFactr.UI.IGridView.Submit(iFactr.UI.Link)"/> methods are called.
            </summary>
            <returns>The control values as an <see cref="T:IDictionary&lt;string, string&gt;"/>.</returns>
        </member>
        <member name="M:iFactr.UI.IGridView.Submit(System.String)">
            <summary>
            Submits the view, gathering the values of its controls and navigating
            to the specified URL with the gathered control values as parameters.
            </summary>
            <param name="url">The URL to navigate to after all control values have been gathered.</param>
        </member>
        <member name="M:iFactr.UI.IGridView.Submit(iFactr.UI.Link)">
            <summary>
            Submits the view, gathering the values of its controls and navigating to the specified
            <see cref="T:iFactr.UI.Link"/> with the gathered control values as parameters.
            </summary>
            <param name="link">The link to navigate to after all control values have been gathered.</param>
        </member>
        <member name="T:iFactr.UI.IGridView`1">
            <summary>
            Defines a native view that acts as a grid for laying out various UI elements.
            </summary>
            <typeparam name="T">The type of the model.</typeparam>
        </member>
        <member name="T:iFactr.UI.ShouldNavigateDelegate">
            <summary>
            Represents the method that will determine whether or not a navigation should proceed.
            </summary>
            <param name="link">A <see cref="T:iFactr.UI.Link"/> containing the destination and any other relevant information regarding the navigation taking place.</param>
            <param name="type">The type of navigation that was initiated.</param>
            <returns><c>true</c> to proceed with the navigation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.UI.IHistoryEntry">
            <summary>
            Defines a view that is displayed in a view stack.
            </summary>
        </member>
        <member name="P:iFactr.UI.IHistoryEntry.BackLink">
            <summary>
            Gets or sets the <see cref="T:iFactr.UI.Link"/> that describes the behavior
            and appearance of the back button associated with the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.IHistoryEntry.StackID">
            <summary>
            Gets or sets the stack identifier for the view.
            Views with the same identifier will take the same place in the view stack.
            </summary>
        </member>
        <member name="P:iFactr.UI.IHistoryEntry.OutputPane">
            <summary>
            Gets or sets the pane on which the view will be rendered.
            </summary>
        </member>
        <member name="P:iFactr.UI.IHistoryEntry.PopoverPresentationStyle">
            <summary>
            Gets or sets the style in which the view should be presented when displayed in a popover pane.
            </summary>
        </member>
        <member name="P:iFactr.UI.IHistoryEntry.ShouldNavigate">
            <summary>
            Invoked when the view is being pushed under or popped off of the top of the view stack.
            Returning a value of <c>false</c> will cancel the navigation.
            </summary>
        </member>
        <member name="P:iFactr.UI.IHistoryEntry.Stack">
            <summary>
            Gets the view stack that the view is currently on.
            </summary>
        </member>
        <member name="E:iFactr.UI.IHistoryEntry.Activated">
            <summary>
            Occurs when the view is pushed or popped onto the top of a view stack.
            </summary>
        </member>
        <member name="E:iFactr.UI.IHistoryEntry.Deactivated">
            <summary>
            Occurs when the view is pushed under or popped off of the top of a view stack.
            </summary>
        </member>
        <member name="T:iFactr.UI.CellDelegate">
            <summary>
            Represents the method that will retrieve an <see cref="T:iFactr.UI.ICell"/> instance when it is ready to be rendered on screen.
            </summary>
            <param name="section">The section that will contain the cell.</param>
            <param name="index">The index at which the cell will be placed in the section.</param>
            <param name="recycledCell">An already instantiated cell that is ready for reuse, or <c>null</c> if no cell has been recycled.</param>
            <returns>The cell that will be rendered on screen.</returns>
        </member>
        <member name="T:iFactr.UI.ItemIdDelegate">
            <summary>
            Represents the method that will retrieve an identifier for determining which, if any, <see cref="T:iFactr.UI.ICell"/>
            instances can be reused for the item at the given position.
            </summary>
            <param name="section">The section that will contain the item.</param>
            <param name="index">The index at which the item will be placed in the section.</param>
            <returns>An identifier for determining which cells can be reused for the item at the given position.</returns>
        </member>
        <member name="T:iFactr.UI.IListView">
            <summary>
            Defines a native view that lays its contents out in a list of customizable cells.
            This is the most common type of view.
            </summary>
        </member>
        <member name="P:iFactr.UI.IListView.ColumnMode">
            <summary>
            Gets or sets the number of columns in which to lay out the contents of the view.
            Certain platforms may only support a single column and will ignore any other setting.
            </summary>
        </member>
        <member name="P:iFactr.UI.IListView.SeparatorColor">
            <summary>
            Gets or sets the color of the separator between cells.  This may not appear on all platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.IListView.Style">
            <summary>
            Gets the style in which the view is to be rendered.
            </summary>
        </member>
        <member name="P:iFactr.UI.IListView.Menu">
            <summary>
            Gets or sets a menu of selectable items that provide support functions for the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.IListView.SearchBox">
            <summary>
            Gets or sets a search box to include with the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.IListView.Sections">
            <summary>
            Gets a collection of the <see cref="T:iFactr.UI.Section"/>s that are currently part of the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.IListView.ValidationErrors">
            <summary>
            Gets a collection of errors that have occurred during control validation.
            </summary>
        </member>
        <member name="P:iFactr.UI.IListView.CellRequested">
            <summary>
            Invoked when a cell is ready to be rendered on the screen.  Return the <see cref="T:iFactr.UI.ICell"/> instance
            that should be placed at the given index within the given section.
            </summary>
        </member>
        <member name="P:iFactr.UI.IListView.ItemIdRequested">
            <summary>
            Invoked when a reuse identifier is needed for a cell.  Return the identifier that should be used
            to determine which cells may be reused for the item at the given index within the given section.
            This is only invoked on platforms that support recycling.
            </summary>
        </member>
        <member name="E:iFactr.UI.IListView.Submitting">
            <summary>
            Occurs when the view is being submitted and the values of its controls are being gathered.
            Use this event to manipulate a submitted value prior to navigation or to cancel the submission.
            </summary>
        </member>
        <member name="M:iFactr.UI.IListView.GetSubmissionValues">
            <summary>
            Returns the control values that would be submitted as parameters if the <see cref="M:iFactr.UI.IListView.Submit(System.String)"/> or <see cref="M:iFactr.UI.IListView.Submit(iFactr.UI.Link)"/> methods are called.
            </summary>
            <returns>The control values as an <see cref="T:IDictionary&lt;string, string&gt;"/>.</returns>
        </member>
        <member name="M:iFactr.UI.IListView.GetVisibleCells">
            <summary>
            Returns the cells that are currently attached to the visual tree.
            </summary>
            <returns>The visible cells as an <see cref="T:IEnumerable&lt;ICell&gt;"/>.</returns>
        </member>
        <member name="M:iFactr.UI.IListView.ReloadSections">
            <summary>
            Clears out and reloads the sections in the view while keeping the rest of the view intact.
            This is commonly called in an <see cref="E:iFactr.UI.ISearchBox.SearchPerformed"/> handler in order to
            display the filtered results.
            </summary>
        </member>
        <member name="M:iFactr.UI.IListView.ScrollToCell(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Programmatically scrolls to the cell located at the specified <paramref name="section"/> and <paramref name="index"/>.
            </summary>
            <param name="section">The section of the cell to scroll to.</param>
            <param name="index">The index of the cell to scroll to.</param>
            <param name="animated">Whether or not the scrolling should be animated.</param>
        </member>
        <member name="M:iFactr.UI.IListView.ScrollToEnd(System.Boolean)">
            <summary>
            Programmatically scrolls to the end of the list.
            This is typically the bottom for vertical lists and the far right for horizontal lists.
            </summary>
            <param name="animated">Whether or not the scrolling should be animated.</param>
        </member>
        <member name="M:iFactr.UI.IListView.ScrollToHome(System.Boolean)">
            <summary>
            Programmatically scrolls to the beginning of the list.
            This is typically the top for vertical lists and the far left for horizontal lists.
            </summary>
            <param name="animated">Whether or not the scrolling should be animated.</param>
        </member>
        <member name="M:iFactr.UI.IListView.Submit(System.String)">
            <summary>
            Submits the view, gathering the values of its controls and navigating
            to the specified URL with the gathered control values as parameters.
            </summary>
            <param name="url">The URL to navigate to after all control values have been gathered.</param>
        </member>
        <member name="M:iFactr.UI.IListView.Submit(iFactr.UI.Link)">
            <summary>
            Submits the view, gathering the values of its controls and navigating to the specified
            <see cref="T:iFactr.UI.Link"/> with the gathered control values as parameters.
            </summary>
            <param name="link">The link to navigate to after all control values have been gathered.</param>
        </member>
        <member name="T:iFactr.UI.IListView`1">
            <summary>
            Defines a native view that lays its contents out in a list of customizable cells.
            This is the most common type of view.
            </summary>
            <typeparam name="T">The type of the Model.</typeparam>
        </member>
        <member name="T:iFactr.UI.ITabView">
            <summary>
            Defines a native view that contains selectable tab items for separating an application into categories.
            </summary>
        </member>
        <member name="P:iFactr.UI.ITabView.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected item.
            </summary>
        </member>
        <member name="P:iFactr.UI.ITabView.SelectionColor">
            <summary>
            Gets or sets the color with which to overlay the selected item.
            </summary>
        </member>
        <member name="P:iFactr.UI.ITabView.TabItems">
            <summary>
            Gets or sets a collection of <see cref="T:iFactr.UI.ITabItem"/>s to populate the view with when it is displayed in a normal context.
            </summary>
        </member>
        <member name="T:iFactr.UI.ITabView`1">
            <summary>
            Defines a native view that contains selectable tab items for separating an application into categories.
            </summary>
            <typeparam name="T">The type of the Model.</typeparam>
        </member>
        <member name="T:iFactr.UI.IView">
            <summary>
            Defines a unified interface for native views across multiple platforms.
            This is the base interface for the <see cref="T:iFactr.UI.IListView"/>, <see cref="T:iFactr.UI.IGridView"/>,
            <see cref="T:iFactr.UI.ITabView"/>, <see cref="T:iFactr.UI.IBrowserView"/>, and <see cref="T:iFactr.UI.ICanvasView"/> interfaces.
            </summary>
        </member>
        <member name="P:iFactr.UI.IView.HeaderColor">
            <summary>
            Gets or sets the color of the header bar, if there is one.
            </summary>
        </member>
        <member name="P:iFactr.UI.IView.Height">
            <summary>
            Gets the current height value of the view in native coordinates.
            </summary>
        </member>
        <member name="P:iFactr.UI.IView.Metadata">
            <summary>
            Gets a collection for storing arbitrary data on the object.
            </summary>
        </member>
        <member name="P:iFactr.UI.IView.PreferredOrientations">
            <summary>
            Gets or sets the orientation preference for the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.IView.Title">
            <summary>
            Gets or sets the title for the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.IView.TitleColor">
            <summary>
            Gets or sets the color with which to display the title.
            </summary>
        </member>
        <member name="P:iFactr.UI.IView.Width">
            <summary>
            Gets the current width value of the view in native coordinates.
            </summary>
        </member>
        <member name="E:iFactr.UI.IView.Rendering">
            <summary>
            Occurs when the view is being rendered.
            </summary>
        </member>
        <member name="M:iFactr.UI.IView.SetBackground(iFactr.UI.Color)">
            <summary>
            Sets the background of the view to the specified <see cref="T:iFactr.UI.Color"/>.
            </summary>
            <param name="color">The color to set the background to.</param>
        </member>
        <member name="M:iFactr.UI.IView.SetBackground(System.String,iFactr.UI.ContentStretch)">
            <summary>
            Sets the background of the view to the image at the specified file path.
            </summary>
            <param name="imagePath">The file path of the image to set the background to.</param>
            <param name="stretch">The way the image is stretched to fill the available space.</param>
        </member>
        <member name="T:iFactr.UI.IView`1">
            <summary>
            Defines a generic unified interface for native views across multiple platforms.
            </summary>
            <typeparam name="T">The type of the Model.</typeparam>
        </member>
        <member name="T:iFactr.UI.ListView`1">
            <summary>
            Represents a native view that lays its contents out in a list of customizable cells.
            This is the most common type of view.
            </summary>
            <typeparam name="T">The type of the model.</typeparam>
        </member>
        <member name="F:iFactr.UI.ListView`1.BackLinkProperty">
            <summary>
            The name of the <see cref="P:BackLink"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.ListView`1.ColumnModeProperty">
            <summary>
            The name of the <see cref="P:ColumnMode"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.ListView`1.MenuProperty">
            <summary>
            The name of the <see cref="P:Menu"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.ListView`1.OutputPaneProperty">
            <summary>
            The name of the <see cref="P:OutputPane"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.ListView`1.PopoverPresentationStyleProperty">
            <summary>
            The name of the <see cref="P:PopoverPresentationStyle"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.ListView`1.SearchBoxProperty">
            <summary>
            The name of the <see cref="P:SearchBox"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.ListView`1.SeparatorColorProperty">
            <summary>
            The name of the <see cref="P:SeparatorColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.ListView`1.StackIDProperty">
            <summary>
            The name of the <see cref="P:StackID"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.ListView`1.Activated">
            <summary>
            Occurs when the view is pushed or popped onto the top of a view stack.
            </summary>
        </member>
        <member name="E:iFactr.UI.ListView`1.Deactivated">
            <summary>
            Occurs when the view is pushed under or popped off of the top of a view stack.
            </summary>
        </member>
        <member name="E:iFactr.UI.ListView`1.Submitting">
            <summary>
            Occurs when the view is being submitted and the values of its controls are being gathered.
            Use this event to manipulate a submitted value prior to navigation or to cancel the submission.
            </summary>
        </member>
        <member name="P:iFactr.UI.ListView`1.BackLink">
            <summary>
            Gets or sets the <see cref="T:iFactr.UI.Link"/> that describes the behavior
            and appearance of the back button associated with the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.ListView`1.ColumnMode">
            <summary>
            Gets or sets the number of columns in which to lay out the contents of the view.
            Certain platforms may only support a single column and will ignore any other setting.
            </summary>
        </member>
        <member name="P:iFactr.UI.ListView`1.SeparatorColor">
            <summary>
            Gets or sets the color of the separator between cells.  This may not appear on all platforms.
            </summary>
        </member>
        <member name="P:iFactr.UI.ListView`1.Style">
            <summary>
            Gets the style in which the view is to be rendered.
            </summary>
        </member>
        <member name="P:iFactr.UI.ListView`1.Menu">
            <summary>
            Gets or sets a menu of selectable items that provide support functions for the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.ListView`1.SearchBox">
            <summary>
            Gets or sets a search box to include with the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.ListView`1.StackID">
            <summary>
            Gets or sets the stack identifier for the view.
            Views with the same identifier will take the same place in the view stack.
            </summary>
        </member>
        <member name="P:iFactr.UI.ListView`1.OutputPane">
            <summary>
            Gets or sets the pane on which the view will be rendered.
            </summary>
        </member>
        <member name="P:iFactr.UI.ListView`1.PopoverPresentationStyle">
            <summary>
            Gets or sets the style in which the view should be presented when displayed in a popover pane.
            </summary>
        </member>
        <member name="P:iFactr.UI.ListView`1.Stack">
            <summary>
            Gets the view stack that the view is currently on.
            </summary>
        </member>
        <member name="P:iFactr.UI.ListView`1.Sections">
            <summary>
            Gets a collection of the <see cref="T:iFactr.UI.Section"/>s that are currently part of the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.ListView`1.ValidationErrors">
            <summary>
            Gets a collection of errors that have occurred during control validation.
            </summary>
        </member>
        <member name="P:iFactr.UI.ListView`1.Model">
            <summary>
            Gets or sets the model containing the information that is displayed by the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.ListView`1.ModelType">
            <summary>
            Gets the type of the model displayed by the view.
            </summary>
        </member>
        <member name="M:iFactr.UI.ListView`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.ListView`1"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.ListView`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.ListView`1"/> class.
            </summary>
            <param name="model">The model containing the information that is displayed by the view.</param>
        </member>
        <member name="M:iFactr.UI.ListView`1.#ctor(iFactr.UI.ListViewStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.ListView`1"/> class.
            </summary>
            <param name="style">The style in which the view should be rendered.</param>
        </member>
        <member name="M:iFactr.UI.ListView`1.#ctor(`0,iFactr.UI.ListViewStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.ListView`1"/> class.
            </summary>
            <param name="model">The model containing the information that is displayed by the view.</param>
            <param name="style">The style in which the view should be rendered.</param>
        </member>
        <member name="M:iFactr.UI.ListView`1.GetSubmissionValues">
            <summary>
            Returns the control values that would be submitted as parameters if the <see cref="M:iFactr.UI.ListView`1.Submit(System.String)"/> or <see cref="M:iFactr.UI.ListView`1.Submit(iFactr.UI.Link)"/> methods are called.
            </summary>
            <returns>The control values as an <see cref="T:IDictionary&lt;string, string&gt;"/>.</returns>
        </member>
        <member name="M:iFactr.UI.ListView`1.GetVisibleCells">
            <summary>
            Returns the cells that are currently attached to the visual tree.
            </summary>
            <returns>The visible cells as an <see cref="T:IEnumerable&lt;ICell&gt;"/>.</returns>
        </member>
        <member name="M:iFactr.UI.ListView`1.ReloadSections">
            <summary>
            Clears out and reloads the sections in the view while keeping the rest of the view intact.
            This is commonly called in an <see cref="E:iFactr.UI.ISearchBox.SearchPerformed"/> handler in order to
            display the filtered results.
            </summary>
        </member>
        <member name="M:iFactr.UI.ListView`1.ScrollToCell(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Programmatically scrolls to the cell located at the specified <paramref name="section"/> and <paramref name="index"/>.
            </summary>
            <param name="section">The section of the cell to scroll to.</param>
            <param name="index">The index of the cell to scroll to.</param>
            <param name="animated">Whether or not the scrolling should be animated.</param>
        </member>
        <member name="M:iFactr.UI.ListView`1.ScrollToEnd(System.Boolean)">
            <summary>
            Programmatically scrolls to the end of the list.
            This is typically the bottom for vertical lists and the far right for horizontal lists.
            </summary>
            <param name="animated">Whether or not the scrolling should be animated.</param>
        </member>
        <member name="M:iFactr.UI.ListView`1.ScrollToHome(System.Boolean)">
            <summary>
            Programmatically scrolls to the beginning of the list.
            This is typically the top for vertical lists and the far left for horizontal lists.
            </summary>
            <param name="animated">Whether or not the scrolling should be animated.</param>
        </member>
        <member name="M:iFactr.UI.ListView`1.Submit(System.String)">
            <summary>
            Submits the view, gathering the values of its controls and navigating
            to the specified URL with the gathered control values as parameters.
            </summary>
            <param name="url">The URL to navigate to after all control values have been gathered.</param>
        </member>
        <member name="M:iFactr.UI.ListView`1.Submit(iFactr.UI.Link)">
            <summary>
            Submits the view, gathering the values of its controls and navigating
            to the specified link with the gathered control values as parameters.
            </summary>
            <param name="link">The link to navigate to after all control values have been gathered.</param>
        </member>
        <member name="M:iFactr.UI.ListView`1.GetModel">
            <summary>
            Gets the model for the view.
            </summary>
        </member>
        <member name="M:iFactr.UI.ListView`1.SetModel(System.Object)">
            <summary>
            Sets the model for the view.
            </summary>
            <param name="model">The object to set the model to.</param>
            <exception cref="T:System.InvalidCastException">Thrown when the <paramref name="model"/> is of an incorrect type.</exception>
        </member>
        <member name="M:iFactr.UI.ListView`1.OnCellRequested(System.Int32,System.Int32,iFactr.UI.ICell)">
            <summary>
            Called when a cell is ready to be rendered on the screen.  Return the <see cref="T:iFactr.UI.ICell"/> instance
            that should be placed at the given index within the given section.
            </summary>
            <param name="section">The section that will contain the cell.</param>
            <param name="index">The index at which the cell will be placed in the section.</param>
            <param name="recycledCell">An already instantiated cell that is ready for reuse, or <c>null</c> if no cell has been recycled.</param>
        </member>
        <member name="M:iFactr.UI.ListView`1.OnItemIdRequested(System.Int32,System.Int32)">
            <summary>
            Called when a reuse identifier is needed for a cell.  Return the identifier that should be used
            to determine which cells may be reused for the item at the given index within the given section.
            This is only called on platforms that support recycling.  See Remarks for details.
            </summary>
            <param name="section">The section that will contain the item.</param>
            <param name="index">The index at which the item will be placed in the section.</param>
            <remarks>
            Cell recycling is an important technique for increasing performance on certain platforms.
            It is recommended to utilize this whenever possible to keep your application running at optimal efficiency.
            When a platform recycles a cell, instead of instantiating a new instance, it uses a cell that already
            resides in memory but is no longer on the screen.  Any cell with the same identifier can be chosen for
            recycling regardless of what the cell contains.  It is considered best practice to only use the same identifier
            for cells that have the same layout structure.  For instance, two cells with the same columns, rows, and element
            types would be ideal candidates for reuse, but two cells with significantly different layouts would be better
            off with different identifiers.  A recycled cell still has all of its contents from when it was last rendered,
            and it is the responsibility of the developer to remove what is no longer needed, add what is now necessary,
            and alter what needs to be changed.  Be aware that any event handlers are still attached.  If you want to replace
            the handlers with new ones, use the NullifyEvents method to detached any handlers that are currently attached.
            Using the same identifier for <see cref="T:iFactr.UI.GridCell"/>s and <see cref="T:iFactr.UI.RichContentCell"/>s is not supported and should be avoided.
            </remarks>
        </member>
        <member name="M:iFactr.UI.ListView`1.ShouldNavigateFrom(iFactr.UI.Link,iFactr.UI.NavigationType)">
            <summary>
            Called when the view is being pushed under or popped off of the top of the view stack.
            Returning a value of <c>false</c> will cancel the navigation.
            </summary>
            <param name="link">A <see cref="T:iFactr.UI.Link"/> containing the destination and any other relevant information regarding the navigation taking place.</param>
            <param name="type">The type of navigation that was initiated.</param>
            <returns><c>true</c> to proceed with the navigation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:iFactr.UI.TabView`1">
            <summary>
            Represents a native view that contains selectable tab items for separating an application into categories.
            </summary>
            <typeparam name="T">The type of the model.</typeparam>
        </member>
        <member name="F:iFactr.UI.TabView`1.SelectedIndexProperty">
            <summary>
            The name of the <see cref="P:SelectedIndex"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.TabView`1.SelectionColorProperty">
            <summary>
            The name of the <see cref="P:SelectionColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="P:iFactr.UI.TabView`1.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected item.
            </summary>
        </member>
        <member name="P:iFactr.UI.TabView`1.SelectionColor">
            <summary>
            Gets or sets the color with which to overlay the selected item.
            </summary>
        </member>
        <member name="P:iFactr.UI.TabView`1.TabItems">
            <summary>
            Gets or sets a collection of <see cref="T:iFactr.UI.ITabItem"/>s to populate the view with.
            </summary>
        </member>
        <member name="P:iFactr.UI.TabView`1.Model">
            <summary>
            Gets or sets the model containing the information that is displayed by the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.TabView`1.ModelType">
            <summary>
            Gets the type of the model displayed by the view.
            </summary>
        </member>
        <member name="M:iFactr.UI.TabView`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.TabView`1"/> class.
            </summary>
        </member>
        <member name="M:iFactr.UI.TabView`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:iFactr.UI.TabView`1"/> class.
            </summary>
            <param name="model">The model containing the information that is displayed by the view.</param>
        </member>
        <member name="M:iFactr.UI.TabView`1.GetModel">
            <summary>
            Gets the model for the view.
            </summary>
        </member>
        <member name="M:iFactr.UI.TabView`1.SetModel(System.Object)">
            <summary>
            Sets the model for the view.
            </summary>
            <param name="model">The object to set the model to.</param>
            <exception cref="T:System.InvalidCastException">Thrown when the <paramref name="model"/> is of an incorrect type.</exception>
        </member>
        <member name="T:iFactr.UI.View">
            <summary>
            Represents the base class for the <see cref="T:iFactr.UI.ListView`1"/>, <see cref="T:iFactr.UI.GridView`1"/>,
            <see cref="T:iFactr.UI.TabView`1"/>, <see cref="T:iFactr.UI.BrowserView`1"/>, and <see cref="T:iFactr.UI.CanvasView`1"/> classes.
            This class is abstract.
            </summary>
        </member>
        <member name="F:iFactr.UI.View.HeaderColorProperty">
            <summary>
            The name of the <see cref="P:HeaderColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.View.HeightProperty">
            <summary>
            The name of the <see cref="P:Height"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.View.WidthProperty">
            <summary>
            The name of the <see cref="P:Width"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.View.PreferredOrientationsProperty">
            <summary>
            The name of the <see cref="P:PreferredOrientations"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.View.TitleProperty">
            <summary>
            The name of the <see cref="P:Title"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:iFactr.UI.View.TitleColorProperty">
            <summary>
            The name of the <see cref="P:TitleColor"/> property.  Use this when binding to the property.  This field is read-only.
            </summary>
        </member>
        <member name="E:iFactr.UI.View.Rendering">
            <summary>
            Occurs when the view is being rendered.
            </summary>
        </member>
        <member name="P:iFactr.UI.View.HeaderColor">
            <summary>
            Gets or sets the color of the header bar, if there is one.
            </summary>
        </member>
        <member name="P:iFactr.UI.View.Height">
            <summary>
            Gets the current height value of the view in native coordinates.
            </summary>
        </member>
        <member name="P:iFactr.UI.View.Width">
            <summary>
            Gets the current width value of the view in native coordinates.
            </summary>
        </member>
        <member name="P:iFactr.UI.View.Metadata">
            <summary>
            Gets a collection for storing arbitrary data on the object.
            </summary>
        </member>
        <member name="P:iFactr.UI.View.PreferredOrientations">
            <summary>
            Gets or sets the orientation preference for the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.View.Title">
            <summary>
            Gets or sets the title for the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.View.TitleColor">
            <summary>
            Gets or sets the color with which to display the title.
            </summary>
        </member>
        <member name="P:iFactr.UI.View.ModelType">
            <summary>
            Gets the type of the model displayed by the view.
            </summary>
        </member>
        <member name="P:iFactr.UI.View.Pair">
            <summary>
            Gets or sets the native object that is paired with the view.  This can be set only once.
            </summary>
        </member>
        <member name="M:iFactr.UI.View.SetBackground(iFactr.UI.Color)">
            <summary>
            Sets the background of the view to the specified <see cref="T:iFactr.UI.Color"/>.
            </summary>
            <param name="color">The color to set the background to.</param>
        </member>
        <member name="M:iFactr.UI.View.SetBackground(System.String,iFactr.UI.ContentStretch)">
            <summary>
            Sets the background of the view to the image at the specified file path.
            </summary>
            <param name="imagePath">The file path of the image to set the background to.</param>
            <param name="stretch">The way the image is stretched to fill the available space.</param>
        </member>
        <member name="M:iFactr.UI.View.GetModel">
            <summary>
            Gets the model for the view.
            </summary>
        </member>
        <member name="M:iFactr.UI.View.SetModel(System.Object)">
            <summary>
            Sets the model for the view.
            </summary>
            <param name="model">The object to set the model to.</param>
            <exception cref="T:System.InvalidCastException">Thrown when the <paramref name="model"/> is of an incorrect type.</exception>
        </member>
        <member name="M:iFactr.UI.View.Render">
            <summary>
            Renders the view.  Override the <see cref="M:iFactr.UI.View.OnRender"/> method to perform view-specific application logic.
            </summary>
        </member>
        <member name="M:iFactr.UI.View.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.View.Equals(iFactr.UI.IView)">
            <summary>
            Determines whether the specified <see cref="T:iFactr.UI.IView"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:iFactr.UI.IView"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:iFactr.UI.IView"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iFactr.UI.View.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:iFactr.UI.View"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="M:iFactr.UI.View.OnRender">
            <summary>
            Called when the view is ready to be rendered.
            </summary>
        </member>
        <member name="T:iFactr.UI.Pane">
            <summary>
            The available large form-factor layout panes.
            </summary>
        </member>
        <member name="F:iFactr.UI.Pane.Tabs">
            <summary>
            A tabbed pane, for displaying navigation tabs.
            </summary>
        </member>
        <member name="F:iFactr.UI.Pane.Master">
            <summary>
            The master pane on the left side of the screen.
            </summary>
        </member>
        <member name="F:iFactr.UI.Pane.Detail">
            <summary>
            The detail pane on the right side of the screen.
            </summary>
        </member>
        <member name="F:iFactr.UI.Pane.Popover">
            <summary>
            A popover pane that is superimposed over the other panes.
            </summary>
        </member>
        <member name="T:iFactr.UI.PaneExtensions">
            <summary>
            Provides helpers for the <see cref="T:iFactr.UI.Pane"/> enum.
            </summary>
        </member>
        <member name="M:iFactr.UI.PaneExtensions.FindTarget(MonoCross.Navigation.IMXController)">
            <summary>
            Finds the target pane for the layer according to its interface.
            </summary>
            <param name="layer">The controller implementing a pane management interface.</param>
            <returns>The <see cref="T:iFactr.UI.Pane"/> to which the controller's view renders.</returns>
        </member>
        <member name="T:iFactr.UI.NavigationType">
            <summary>
            The types of navigation.
            </summary>
        </member>
        <member name="F:iFactr.UI.NavigationType.Back">
            <summary>
            The navigation occurred because the back button has been pressed.
            </summary>
        </member>
        <member name="F:iFactr.UI.NavigationType.Forward">
            <summary>
            The navigation occurred because an iApp navigation has been initiated.
            </summary>
        </member>
        <member name="F:iFactr.UI.NavigationType.Tab">
            <summary>
            The navigation occurred because a tab has been selected.
            </summary>
        </member>
        <member name="T:System.EventHandlerExtensions">
            <summary>
            Provides methods for executing an <see cref="T:System.EventHandler"/> on <see cref="T:iFactr.UI.IPairable"/> objects.
            </summary>
        </member>
        <member name="M:System.EventHandlerExtensions.Raise(System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Raises the event.
            </summary>
            <param name="handler">The delegate to invoke.</param>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.EventHandlerExtensions.RaiseEvent(iFactr.UI.IPairable,System.String,System.EventArgs)">
            <summary>
            Attempts to raise the event with the specified name and <see cref="T:System.EventArgs"/> on the current instance.
            </summary>
            <param name="obj">The current object.</param>
            <param name="eventName">The name of the event to be raised.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <returns><c>true</c> if the event is successfully raised, otherwise <c>false</c>.</returns>
        </member>
    </members>
</doc>
