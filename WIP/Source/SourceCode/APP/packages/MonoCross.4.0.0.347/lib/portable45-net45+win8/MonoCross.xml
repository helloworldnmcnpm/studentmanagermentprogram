<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoCross</name>
    </assembly>
    <members>
        <member name="T:MonoCross.Navigation.MXApplication">
            <summary>
            Represents a cross-platform MonoCross application.  This class is abstract.
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.MXApplication.NavigateOnLoad">
            <summary>
            Gets or sets the URI to navigate to once the application has loaded.
            </summary>
            <value>The URL as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:MonoCross.Navigation.MXApplication.Title">
            <summary>
            Gets or sets the application's title.
            </summary>
            <value>The title as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:MonoCross.Navigation.MXApplication.NavigationMap">
            <summary>
            Gets the navigation map that associates the application's controllers to their respective URIs.
            </summary>
            <value>The navigation map as a <see cref="T:MonoCross.Navigation.NavigationList"/> instance.</value>
        </member>
        <member name="M:MonoCross.Navigation.MXApplication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Navigation.MXApplication"/> class.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXApplication.OnAppLoad">
            <summary>
            Called when the application instance is loaded. This method is meant to be overridden in consuming applications 
            for application-level initialization code.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXApplication.OnAppLoadComplete">
            <summary>
            Called by the container when the application load is complete. This method is meant to be overridden in consuming applications 
            for application-level initialization code.
            </summary>
        </member>
        <member name="T:MonoCross.Navigation.MXNavigationExtensions">
            <summary>
            Extension methods for <see cref="T:MonoCross.Navigation.IMXView"/> that add navigation.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXNavigationExtensions.Navigate(MonoCross.Navigation.IMXView,System.String)">
            <summary>
            Initiates a navigation to the specified URL.
            </summary>
            <param name="view">The <see cref="T:MonoCross.Navigation.IMXView"/> that kicked off the navigation.</param>
            <param name="url">A <see cref="T:System.String"/> representing the URL to navigate to.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXNavigationExtensions.Navigate(MonoCross.Navigation.IMXView,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initiates a navigation to the specified URL.
            </summary>
            <param name="view">The <see cref="T:MonoCross.Navigation.IMXView"/> that kicked off the navigation.</param>
            <param name="url">A <see cref="T:System.String"/> representing the URL to navigate to.</param>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing any parameters such as submitted values.</param>
        </member>
        <member name="T:MonoCross.Navigation.MXContainer">
            <summary>
            Represents the platform-specific instance of the MonoCross container.
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.MXContainer.LastNavigationDate">
            <summary>
            Gets the date and time of the last navigation that occurred.
            </summary>
            <value>The last navigation date.</value>
        </member>
        <member name="P:MonoCross.Navigation.MXContainer.LastNavigationUrl">
            <summary>
            Gets or sets the URL of last navigation that occurred.
            </summary>
            <value>The last navigation URL.</value>
        </member>
        <member name="F:MonoCross.Navigation.MXContainer.CancelLoad">
            <summary>
            The cancel load.
            </summary>
        </member>
        <member name="F:MonoCross.Navigation.MXContainer.ThreadedLoad">
            <summary>
            Load containers on a separate thread.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.OnControllerLoadBegin(MonoCross.Navigation.IMXController)">
            <summary>
            Raises the controller load begin event.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.OnControllerLoadBegin(MonoCross.Navigation.IMXController,MonoCross.Navigation.IMXView)">
            <summary>
            Called when a controller is about to be loaded.
            </summary>
            <param name="controller">The controller to be loaded.</param>
            <param name="fromView">The view that initiated the navigation that resulted in the controller being loaded.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.OnControllerLoadFailed(MonoCross.Navigation.IMXController,System.Exception)">
            <summary>
            Raises the controller load failed event.
            </summary>
            <param name="controller">The controller that failed to load.</param>
            <param name="ex">The exception that caused the load to fail.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.OnSetDefinitions">
            <summary>
            Called when the IoC container is ready to be populated with its default entries.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.OnControllerLoadComplete(MonoCross.Navigation.IMXView,MonoCross.Navigation.IMXController,System.String,System.String)">
            <summary>
            Raises the load complete event after the Controller has completed loading its Model. The View may be populated,
            and the derived class should check if it exists and do something with it if needed for the platform: either free it,
            pop off the views in a stack above it or whatever makes sense to the platform.
            </summary>
            <param name="fromView">
            The view that raised the navigation.
            </param>
            <param name='controller'>
            The newly loaded controller.
            </param>
            <param name='perspective'>
            The view perspective returned by the controller load.
            </param>
            <param name="navigatedUri">
            A <see cref="T:System.String"/> that represents the uri used to navigate to the controller.
            </param>
        </member>
        <member name="P:MonoCross.Navigation.MXContainer.Views">
            <summary>
            Gets the view map.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.#ctor(MonoCross.Navigation.MXApplication)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Navigation.MXContainer"/> class.
            </summary>
            <param name="theApp">The application to contain.</param>
        </member>
        <member name="P:MonoCross.Navigation.MXContainer.App">
            <summary>
            Gets the MonoCross application in the container.
            </summary>
            <value>The application as a <see cref="T:MonoCross.Navigation.MXApplication"/> instance.</value>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.SetApp(MonoCross.Navigation.MXApplication)">
            <summary>
            Sets the MonoCross application in the container.
            </summary>
        </member>
        <member name="T:MonoCross.Navigation.MXContainer.SessionIdDelegate">
            <summary>
            A delegate for retrieving a container session identifier.
            </summary>
            <returns>A <see cref="T:System.String"/> that uniquely identifies the container's session.</returns>
        </member>
        <member name="F:MonoCross.Navigation.MXContainer.GetSessionId">
            <summary>
            Gets the container session identifier
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.InitializeContainer(MonoCross.Navigation.MXContainer)">
            <summary>
            Initializes the <see cref="P:MonoCross.Navigation.MXContainer.Instance"/>.
            </summary>
            <param name="theContainer">The container instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="theContainer"/> is <c>null</c>.</exception>
        </member>
        <member name="P:MonoCross.Navigation.MXContainer.Instance">
            <summary>
            Gets or sets the application instance.
            </summary>
            <value>The application instance.</value>
        </member>
        <member name="P:MonoCross.Navigation.MXContainer.Session">
            <summary>
            Gets the current session settings.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.AddView``1(MonoCross.Navigation.IMXView)">
            <summary>
            Adds the specified view to the view map.
            </summary>
            <param name="view">The initialized view value.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.AddView``1(MonoCross.Navigation.IMXView,System.String)">
            <summary>
            Adds the specified view to the view map.
            </summary>
            <param name="perspective">The view's perspective.</param>
            <param name="view">The initialized view value.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.AddView``1(System.Type)">
            <summary>
            Adds the specified view to the view map.
            </summary>
            <param name="viewType">The view's type.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.AddView``1(System.Type,System.String)">
            <summary>
            Adds the specified view to the view map.
            </summary>
            <param name="viewType">The view's type.</param>
            <param name="perspective">The view's perspective.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.AddView(System.Type,System.Type,System.String)">
            <summary>
            Adds the specified view to the view map.
            </summary>
            <param name="modelType">The type of the view's model.</param>
            <param name="viewType">The view's type.</param>
            <param name="perspective">The view's perspective.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.AddView(System.Type,System.Type,System.String,MonoCross.Navigation.IMXView)">
            <summary>
            Adds the specified view to the view map.
            </summary>
            <param name="modelType">The type of the view's model.</param>
            <param name="viewType">The view's type.</param>
            <param name="perspective">The view perspective.</param>
            <param name="view">The initialized view value.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Navigate(System.String)">
            <summary>
            Initiates a navigation to the specified URL.
            </summary>
            <param name="url">A <see cref="T:System.String"/> representing the URL to navigate to.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Navigate(MonoCross.Navigation.IMXView,System.String)">
            <summary>
            Initiates a navigation to the specified URL.
            </summary>
            <param name="view">The <see cref="T:MonoCross.Navigation.IMXView"/> that kicked off the navigation.</param>
            <param name="url">A <see cref="T:System.String"/> representing the URL to navigate to.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Navigate(MonoCross.Navigation.IMXView,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initiates a navigation to the specified URL.
            </summary>
            <param name="view">The <see cref="T:MonoCross.Navigation.IMXView"/> that kicked off the navigation.</param>
            <param name="url">A <see cref="T:System.String"/> representing the URL to navigate to.</param>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing any parameters such as submitted values.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.TryLoadController(MonoCross.Navigation.MXContainer,MonoCross.Navigation.IMXView,MonoCross.Navigation.IMXController,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Tries to execute the Load method of the specified controller using eventing.
            </summary>
            <param name="container">The container that loads the controller.</param>
            <param name="fromView">The view that activated the navigation.</param>
            <param name="controller">The controller to load.</param>
            <param name="navigatedUri">A <see cref="T:System.String"/> that represents the uri used to navigate to the controller.</param>
            <param name="parameters">The parameters to use with the controller's Load method.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Redirect(System.String)">
            <summary>
            Cancels loading of the current controller and navigates to the specified url.
            </summary>
            <param name="url">The url of the controller to navigate to.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.GetController(System.String,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Gets the controller.
            </summary>
            <param name="url">The URL pattern of the controller.</param>
            <param name="parameters">The parameters to load into the controller.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">url</exception>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.RenderViewFromPerspective(MonoCross.Navigation.IMXController,System.String)">
            <summary>
            Renders the view described by the perspective.
            </summary>
            <param name="controller">The controller requesting the view.</param>
            <param name="perspective">The perspective describing the view.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.RenderViewFromPerspective(System.Type,System.String,System.Object)">
            <summary>
            Renders the view described by the perspective.
            </summary>
            <param name="modelType">The type of the view's model.</param>
            <param name="perspective">The perspective describing the view.</param>
            <param name="model">The model for the view.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Register``1(System.Type)">
            <summary>
            Registers the specified abstract type and class type for <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <typeparam name="T">The abstract type to associate with the class type.</typeparam>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Register``1(System.Type,System.String)">
            <summary>
            Registers the specified abstract type and class type for <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <typeparam name="T">The abstract type to associate with the class type.</typeparam>
            <param name="namedInstance">An optional unique identifier for the abstract type.</param>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Register``1(System.Type,System.Func{System.Object})">
            <summary>
            Registers the specified abstract type and class type for <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <typeparam name="T">The abstract type to associate with the class type.</typeparam>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
            <param name="initialization">A method that initializes the object.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Register``1(System.Type,System.String,System.Func{System.Object})">
            <summary>
            Registers the specified abstract type and class type for <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <typeparam name="T">The abstract type to associate with the class type.</typeparam>
            <param name="namedInstance">An optional unique identifier for the abstract type.</param>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
            <param name="initialization">A method that initializes the object.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Register``1(System.Type,System.Func{System.Object[],System.Object})">
            <summary>
            Registers the specified abstract type and class type for <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <typeparam name="T">The abstract type to associate with the class type.</typeparam>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
            <param name="initialization">A method that initializes the object.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Register``1(System.Type,System.String,System.Func{System.Object[],System.Object})">
            <summary>
            Registers the specified abstract type and class type for <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <typeparam name="T">The abstract type to associate with the class type.</typeparam>
            <param name="namedInstance">An optional unique identifier for the abstract type.</param>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
            <param name="initialization">A method that initializes the object.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Register(System.Type,System.Type)">
            <summary>
            Registers the specified abstract type and class type for <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <param name="keyType">The key type to associate with the value type.</param>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Register(System.Type,System.Type,System.String)">
            <summary>
            Registers the specified abstract type and class type for <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <param name="keyType">The key type to associate with the value type.</param>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
            <param name="namedInstance">An optional unique identifier for the abstract type.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Register(System.Type,System.Type,System.Func{System.Object})">
            <summary>
            Registers the specified abstract type and class type for <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <param name="keyType">The key type to associate with the value type.</param>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
            <param name="initialization">A method that initializes the object.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Register(System.Type,System.Type,System.String,System.Func{System.Object})">
            <summary>
            Registers the specified abstract type and class type for <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <param name="keyType">The key type to associate with the value type.</param>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
            <param name="namedInstance">An optional unique identifier for the abstract type.</param>
            <param name="initialization">A method that initializes the object.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Register(System.Type,System.Type,System.String,System.Func{System.Object},System.Boolean)">
            <summary>
            Registers the specified key type and class type for <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <param name="keyType">The key type to associate with the value type.</param>
            <param name="namedInstance">An optional unique identifier for the key type.</param>
            <param name="nativeType">The type of the class to associate with the key type.</param>
            <param name="initialization">A method that initializes the object.</param>
            <param name="singletonInstance"><c>true</c> to create and cache the instance; otherwise <c>false</c> to create every time.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Register(System.Type,System.Type,System.Func{System.Object[],System.Object})">
            <summary>
            Registers the specified abstract type and class type for <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <param name="keyType">The key type to associate with the value type.</param>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
            <param name="initialization">A method that initializes the object.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Register(System.Type,System.Type,System.String,System.Func{System.Object[],System.Object})">
            <summary>
            Registers the specified abstract type and class type for <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <param name="keyType">The key type to associate with the value type.</param>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
            <param name="namedInstance">An optional unique identifier for the abstract type.</param>
            <param name="initialization">A method that initializes the object.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Register(System.Type,System.Type,System.String,System.Func{System.Object[],System.Object},System.Boolean)">
            <summary>
            Registers the specified key type and class type for <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <param name="keyType">The key type to associate with the value type.</param>
            <param name="namedInstance">An optional unique identifier for the key type.</param>
            <param name="nativeType">The type of the class to associate with the key type.</param>
            <param name="initialization">A method that initializes the object.</param>
            <param name="singletonInstance"><c>true</c> to create and cache the instance; otherwise <c>false</c> to create every time.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.RegisterSingleton``1(System.Type)">
            <summary>
            Registers the specified abstract type and class type for a singleton <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <typeparam name="T">The abstract type to associate with the class type.</typeparam>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.RegisterSingleton``1(System.Type,System.String)">
            <summary>
            Registers the specified abstract type and class type for a singleton <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <typeparam name="T">The abstract type to associate with the class type.</typeparam>
            <param name="namedInstance">An optional unique identifier for the abstract type.</param>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.RegisterSingleton``1(System.Type,System.Func{System.Object})">
            <summary>
            Registers the specified abstract type and class type for a singleton <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <typeparam name="T">The abstract type to associate with the class type.</typeparam>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
            <param name="initialization">A method that initializes the object.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.RegisterSingleton``1(System.Type,System.String,System.Func{System.Object})">
            <summary>
            Registers the specified abstract type and class type for a singleton <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <typeparam name="T">The abstract type to associate with the class type.</typeparam>
            <param name="namedInstance">An optional unique identifier for the abstract type.</param>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
            <param name="initialization">A method that initializes the object.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.RegisterSingleton``1(System.Type,System.Func{System.Object[],System.Object})">
            <summary>
            Registers the specified abstract type and class type for a singleton <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <typeparam name="T">The abstract type to associate with the class type.</typeparam>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
            <param name="initialization">A method that initializes the object.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.RegisterSingleton``1(System.Type,System.String,System.Func{System.Object[],System.Object})">
            <summary>
            Registers the specified abstract type and class type for a singleton <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <typeparam name="T">The abstract type to associate with the class type.</typeparam>
            <param name="namedInstance">An optional unique identifier for the abstract type.</param>
            <param name="nativeType">The type of the class to associate with the abstract type.</param>
            <param name="initialization">A method that initializes the object.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.RegisterSingleton``1(System.Object)">
            <summary>
            Registers the specified abstract type and class type for a singleton <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <typeparam name="T">The abstract type to associate with the class type.</typeparam>
            <param name="instance">The object to associate with the abstract type.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.RegisterSingleton``1(System.Object,System.String)">
            <summary>
            Registers the specified abstract type and class type for a singleton <see cref="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <typeparam name="T">The abstract type to associate with the class type.</typeparam>
            <param name="instance">The object to associate with the abstract type.</param>
            <param name="namedInstance">An optional unique identifier for the abstract type.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Resolve``1(System.Object[])">
            <summary>
            Resolves the specified abstract type as a concrete instance.
            </summary>
            <param name="parameters">An array of constructor parameters for initialization.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Resolve``1(System.String,System.Object[])">
            <summary>
            Resolves the specified abstract type as a concrete instance.
            </summary>
            <param name="name">An optional unique identifier for the abstract type.</param>
            <param name="parameters">An array of constructor parameters for initialization.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXContainer.Resolve(System.Type,System.String,System.Object[])">
            <summary>
            Resolves the specified abstract type as a concrete instance.
            </summary>
            <param name="type">The abstract type to resolve.</param>
            <param name="name">An optional unique identifier for the abstract type.</param>
            <param name="parameters">An array of constructor parameters for initialization.</param>
        </member>
        <member name="T:MonoCross.Navigation.IMXController">
            <summary>
            Describes a navigation controller.
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.IMXController.ModelType">
            <summary>
            The type of the model used by this controller.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.IMXController.GetModel">
            <summary>
            Gets the model for the controller.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.IMXController.Load(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads this instance with the specified parameters.
            </summary>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing any parameters such as submitted values.</param>
        </member>
        <member name="M:MonoCross.Navigation.IMXController.Load(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads this instance with the specified parameters.
            </summary>
            <param name="uri">A <see cref="T:System.String"/> that represents the uri used to navigate to the controller.</param>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing any parameters such as submitted values.</param>
        </member>
        <member name="T:MonoCross.Navigation.MXController`1">
            <summary>
            Represents the base implementation of a navigation controller. This class is abstract.
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.MXController`1.Model">
            <summary>
            Gets or sets the model for the controller.
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.MXController`1.ModelType">
            <summary>
            Gets the type of the model used by this controller.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXController`1.GetModel">
            <summary>
            Gets the model for the controller.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXController`1.Load(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads this instance with the specified parameters.
            </summary>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing any parameters such as submitted values.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXController`1.Load(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads this instance with the specified parameters.
            </summary>
            <param name="uri">A <see cref="T:System.String"/> that represents the uri used to navigate to the controller.</param>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing any parameters such as submitted values.</param>
        </member>
        <member name="T:MonoCross.Navigation.MXNavigation">
            <summary>
            Represents a mapping of a URL pattern to a particular <see cref="T:MonoCross.Navigation.IMXController"/> instance
            along with any default parameters needed for initialization of the controller.
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.MXNavigation.Controller">
            <summary>
            Gets the controller for this instance.
            </summary>
            <value>The controller as an <see cref="T:MonoCross.Navigation.IMXController"/> instance.</value>
        </member>
        <member name="P:MonoCross.Navigation.MXNavigation.Pattern">
            <summary>
            Gets or sets the navigation URL pattern for the controller.
            </summary>
            <value>The URL pattern as a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:MonoCross.Navigation.MXNavigation.Parameters">
            <summary>
            Gets or sets any parameters to add to the controller.
            </summary>
            <value>
            The parameters as a <see cref="T:System.Collections.Generic.Dictionary`2"/> instance.
            </value>
        </member>
        <member name="M:MonoCross.Navigation.MXNavigation.#ctor(System.String,MonoCross.Navigation.IMXController,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes an instance of the <see cref="T:MonoCross.Navigation.MXNavigation"/> class.
            </summary>
            <param name="pattern">The navigation pattern to associate with the controller.</param>
            <param name="controller">The controller to add to the navigation list.</param>
            <param name="parameters">Any default parameters to include when the controller is loaded.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXNavigation.#ctor(System.String,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes an instance of the <see cref="T:MonoCross.Navigation.MXNavigation"/> class.
            </summary>
            <param name="pattern">The navigation pattern to associate with the controller.</param>
            <param name="controllerType">The tpye of the controller to add to the navigation list.</param>
            <param name="parameters">Any default parameters to include when the controller is loaded.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXNavigation.RegexPattern">
            <summary>
            Converts the <see cref="P:MonoCross.Navigation.MXNavigation.Pattern"/> into a regex string.
            </summary>
            <returns>A regex string that represents the pattern.</returns>
        </member>
        <member name="M:MonoCross.Navigation.MXNavigation.ExtractParameters(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Parses the specified URL for parameters and adds them to the specified dictionary.
            </summary>
            <param name="url">The URL to parse for parameters.</param>
            <param name="parameters">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to add the parsed parameters to.</param>
            <exception cref="T:System.ArgumentException">Thrown if the segment count of the <paramref name="url"/> is not equal to the segment count of this instance.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parameters"/> is <c>null</c>.</exception>
        </member>
        <member name="T:MonoCross.Navigation.MXNavigation.Segment">
            <summary>
            Represents a part of a URL.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXNavigation.Segment.Split(System.String)">
            <summary>
            Splits the specified URL into segments and returns the result.
            </summary>
            <param name="url">The URL to split into segments.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXNavigation.Segment.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Navigation.MXNavigation.Segment"/> class.
            </summary>
            <param name="segment">The URL part to initialize with.</param>
        </member>
        <member name="P:MonoCross.Navigation.MXNavigation.Segment.IsParameter">
            <summary>
            Gets whether this instance represents a parameter in the URL.
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.MXNavigation.Segment.SegmentValue">
            <summary>
            Gets the value of this instance.
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.MXNavigation.Parts">
            <summary>
            Gets an array of <see cref="T:MonoCross.Navigation.MXNavigation.Segment"/>s that make up the URL pattern.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXNavigation.Equals(MonoCross.Navigation.MXNavigation)">
            <summary>
            Determines if the specified object is equal to this instance.
            </summary>
            <param name="mapping">The object to test for equality.</param>
            <returns><c>true</c> if the object is equal to this instance; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.MXNavigation.Equals(System.Object)">
            <summary>
            Determines if the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to test for equality.</param>
            <returns><c>true</c> if the object is equal to this instance; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.MXNavigation.GetHashCode">
            <summary>
            Serves as a hash function for a MXNavigation. 
            </summary>
            <returns>
            A hash code for the current MXNavigation.
            </returns>
        </member>
        <member name="M:MonoCross.Navigation.MXNavigation.op_Equality(MonoCross.Navigation.MXNavigation,MonoCross.Navigation.MXNavigation)">
            <summary>
            Tests for equality between two <see cref="T:MonoCross.Navigation.MXNavigation"/> instances.
            </summary>
            <param name="a">The first MXNavigation to test.</param>
            <param name="b">The second MXNavigation to test.</param>
            <returns><c>true</c> if the MXNavigations are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.MXNavigation.op_Inequality(MonoCross.Navigation.MXNavigation,MonoCross.Navigation.MXNavigation)">
            <summary>
            Tests for inequality between two <see cref="T:MonoCross.Navigation.MXNavigation"/> instances.
            </summary>
            <param name="a">The first MXNavigation to test.</param>
            <param name="b">The second MXNavigation to test.</param>
            <returns><c>true</c> if the MXNavigations are not equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.MXNavigation.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:MonoCross.Navigation.MXNavigation"/>.
            </summary>
        </member>
        <member name="T:MonoCross.Navigation.NavigationList">
            <summary>
            Represents a collection of <see cref="T:MonoCross.Navigation.MXNavigation"/>s for controllers in an application.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.NavigationList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Navigation.NavigationList"/> class.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.NavigationList.#ctor(System.Collections.Generic.IEnumerable{MonoCross.Navigation.MXNavigation})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Navigation.NavigationList"/> class.
            </summary>
            <param name="source">The source to create this list from.</param>
        </member>
        <member name="E:MonoCross.Navigation.NavigationList.Added">
            <summary>
            Occurs when a controller is added.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.NavigationList.OnAdded(MonoCross.Navigation.NavAddedEventArgs)">
            <summary>
            Raises the <see cref="E:MonoCross.Navigation.NavigationList.Added" /> event.
            </summary>
            <param name="e">The <see cref="T:MonoCross.Navigation.NavAddedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:MonoCross.Navigation.NavigationList.GetControllerForPattern(System.String)">
            <summary>
            Gets the controller for the specified URI pattern.
            </summary>
            <param name="pattern">The URI pattern of the controller.</param>
            <returns>The <see cref="T:MonoCross.Navigation.IMXController"/> in this instance that matches the pattern.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NavigationList.GetPatternForModelType(System.Type)">
            <summary>
            Gets the pattern for the specified model type.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns>A <see cref="T:System.String"/> pattern in this instance with a model that matches the type.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NavigationList.GetControllerForModelType(System.Type)">
            <summary>
            Gets the controller for the specified model type.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns>A <see cref="T:MonoCross.Navigation.IMXController"/> in this instance with a model that matches the type.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NavigationList.Contains(System.String)">
            <summary>
            Determines whether this instance contains the specified pattern.
            </summary>
            <param name="pattern">The pattern.</param>
            <returns><c>true</c> if the pattern is already defined in this instance; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NavigationList.Add(System.String,MonoCross.Navigation.IMXController)">
            <summary>
            Adds the specified controller to the navigation list with the specified string pattern.
            </summary>
            <param name="pattern">The navigation pattern to associate with the controller.</param>
            <param name="controller">The controller to add to the navigation list.</param>
        </member>
        <member name="M:MonoCross.Navigation.NavigationList.Add(System.String,MonoCross.Navigation.IMXController,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds the specified controller to the navigation list with the specified string pattern.
            </summary>
            <param name="pattern">The navigation pattern to associate with the controller.</param>
            <param name="controller">The controller to add to the navigation list.</param>
            <param name="parameters">Any default parameters to include when the controller is loaded.</param>
        </member>
        <member name="M:MonoCross.Navigation.NavigationList.Add(System.String,System.Type)">
            <summary>
            Adds the specified controller type to the navigation list with the specified string pattern.
            </summary>
            <param name="pattern">The navigation pattern to associate with the controller.</param>
            <param name="controllerType">The type of the controller to add to the navigation list.</param>
        </member>
        <member name="M:MonoCross.Navigation.NavigationList.Add(System.String,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds the specified controller type to the navigation list with the specified string pattern.
            </summary>
            <param name="pattern">The navigation pattern to associate with the controller.</param>
            <param name="controllerType">The type of the controller to add to the navigation list.</param>
            <param name="parameters">Any default parameters to include when the controller is loaded.</param>
        </member>
        <member name="M:MonoCross.Navigation.NavigationList.InternalAdd(MonoCross.Navigation.MXNavigation)">
            <summary>
            Adds the specified navigation to the list.
            </summary>
            <param name="item">The navigation entry to add.</param>
        </member>
        <member name="M:MonoCross.Navigation.NavigationList.MatchUrl(System.String)">
            <summary>
            Returns a <see cref="T:MonoCross.Navigation.MXNavigation"/> from the Navigation List that matches the specified URL.
            </summary>
            <param name="url">A <see cref="T:System.String"/> representing the URL to match.</param>
            <returns>A <see cref="T:MonoCross.Navigation.MXNavigation"/> that matches the URL.</returns>
        </member>
        <member name="T:MonoCross.Navigation.NavigationAddedDelegate">
            <summary>
            A delegate for <see cref="T:MonoCross.Navigation.NavigationList"/> events.
            </summary>
            <param name="sender">The <see cref="T:MonoCross.Navigation.NavigationList"/> source of the event.</param>
            <param name="e">The <see cref="T:MonoCross.Navigation.NavAddedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:MonoCross.Navigation.NavAddedEventArgs">
            <summary>
            Contains data for events involving <see cref="T:MonoCross.Navigation.MXNavigation"/> sources.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.NavAddedEventArgs.#ctor(MonoCross.Navigation.MXNavigation)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Navigation.NavAddedEventArgs"/> class.
            </summary>
            <param name="navItem">The added navigation item.</param>
        </member>
        <member name="F:MonoCross.Navigation.NavAddedEventArgs.NavigationItem">
            <summary>
            The navigation item source of the event.
            </summary>
        </member>
        <member name="T:MonoCross.Navigation.ModelEventHandler">
            <summary>
            Delegate type for handling model events from the view
            </summary>
        </member>
        <member name="T:MonoCross.Navigation.IMXView">
            <summary>
            Interface that marks a class as being a View
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.IMXView.ModelType">
            <summary>
            The type of the model displayed by this view
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.IMXView.GetModel">
            <summary>
            Gets the model for the view.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.IMXView.SetModel(System.Object)">
            <summary>
            Sets the model for the view.
            </summary>
            <param name="model">The model to associate with the view.</param>
            <exception cref="T:System.InvalidCastException">Thrown if a model of the wrong type is set.</exception>
        </member>
        <member name="M:MonoCross.Navigation.IMXView.Render">
            <summary>
            Displays the view according to the state of the model.
            </summary>
        </member>
        <member name="T:MonoCross.Navigation.IMXView`1">
            <summary>
            Interface that marks an <see cref="T:MonoCross.Navigation.IMXView" /> that displays models of type T.
            </summary>
            <typeparam name="T">The type of the Model.</typeparam>
        </member>
        <member name="P:MonoCross.Navigation.IMXView`1.Model">
            <summary>
            Gets or sets the model for the view.
            </summary>
        </member>
        <member name="T:MonoCross.Navigation.MXView`1">
            <summary>
            Base class for helping to implement Views that display models of type T. 
            You can chooses to either inherit from this base class or re-implement the IMXView from scratch. 
            Alternatively your view class can have a member that inherits from this class and is delegated to
            for the IMXView implementation (Bridge Pattern).
            </summary>
            <typeparam name="T">The type of Model that the view displays</typeparam>
        </member>
        <member name="P:MonoCross.Navigation.MXView`1.ModelType">
            <summary>
            The type of the model displayed by this view
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXView`1.GetModel">
            <summary>
            Gets the model for the view.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXView`1.SetModel(System.Object)">
            <summary>
            Sets the model for the view. An InvalidCastException may be thrown if a model of the wrong type is set.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXView`1.Render">
            <summary>
            This implementaion does nothing but fire the event.
            If you plan to override this method you should call the base implementation after
            you have done your Render().
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.MXView`1.Model">
            <summary>
            Gets or sets the model for the view.
            </summary>
        </member>
        <member name="T:MonoCross.Navigation.MXViewMap">
            <summary>
            Represents a mapping of a model type and perspective to <see cref="T:MonoCross.Navigation.IMXView`1"/>s in a container.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.MXViewMap.CheckEntry(System.String@,System.Type,System.Type)">
            <summary>
            Performs type constraints on new entries.
            </summary>
            <param name="name">The entry name passed by reference so that it may be changed.</param>
            <param name="key">The key <see cref="T:System.Type"/>.</param>
            <param name="value">the value <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXViewMap.Add(System.String,MonoCross.Navigation.IMXView)">
            <summary>
            Adds the specified view to the view map.
            </summary>
            <param name="perspective">The view perspective key.</param>
            <param name="view">The initialized view value.</param>
        </member>
        <member name="M:MonoCross.Navigation.MXViewMap.GetViewType(System.Type,System.String)">
            <summary>
            Gets the type of the view described by a view perspective.
            </summary>
            <param name="modelType">The view's model type.</param>
            <param name="perspective">The view perspective.</param>
            <returns>The type associated with the view perspective.</returns>
        </member>
        <member name="M:MonoCross.Navigation.MXViewMap.GetView(System.Type,System.String)">
            <summary>
            Gets the view described by a view perspective.
            </summary>
            <param name="modelType">The view's model type.</param>
            <param name="perspective">The view perspective.</param>
            <returns>The view associated with the view perspective.</returns>
        </member>
        <member name="M:MonoCross.Navigation.MXViewMap.GetOrCreateView(System.Type,System.String)">
            <summary>
            Gets the view or creates it if it has not been created.
            </summary>
            <param name="modelType">The view's model type.</param>
            <param name="perspective">The view perspective.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown when no view or view type is found in the view map</exception>
        </member>
        <member name="M:MonoCross.Navigation.MXViewMap.ContainsView(System.Type,System.String)">
            <summary>
            Determines whether a view has been registered for a model and perspective.
            </summary>
            <param name="modelType">The view's model type.</param>
            <param name="perspective">The view perspective.</param>
            <returns><c>true</c> if a view has been registered to the model type and perspective; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:MonoCross.Navigation.NamedTypeMap">
            <summary>
            Represents a mapping of abstract types to native class types to each platform that the abstract types represent.
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.NamedTypeMap.Items">
            <summary>
            The map from a named type to a type loader.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Navigation.NamedTypeMap"/> class.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.Add(System.Type,System.Type)">
            <summary>
            Adds an entry with the specified abstract type and class type to the collection.
            </summary>
            <param name="abstractType">The type of the abstract to associate with the class type.</param>
            <param name="concreteType">The type of the class to associate with the abstract type.</param>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.Add(System.String,System.Type,System.Type)">
            <summary>
            Adds an entry with the specified abstract type and class type to the collection.
            </summary>
            <param name="name">A unique identifier for the abstract type.</param>
            <param name="abstractType">The type of the abstract to associate with the class type.</param>
            <param name="concreteType">The type of the class to associate with the abstract type.</param>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.Add(System.String,System.Type,MonoCross.Navigation.TypeLoader)">
            <summary>
            Adds an entry with the specified abstract type and class type to the collection.
            </summary>
            <param name="name">A unique identifier for the abstract type.</param>
            <param name="abstractType">The type of the abstract to associate with the class type.</param>
            <param name="typeLoader">The type loader to associate with the abstract type.</param>
        </member>
        <member name="P:MonoCross.Navigation.NamedTypeMap.Count">
            <summary>
            Gets the number of entries contained in the collection.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.ContainsKey(System.Type)">
            <summary>
            Determines whether the collection contains an entry with the specified abstract type.
            </summary>
            <param name="abstractType">The abstract type to locate in the collection.</param>
            <returns><c>true</c> if the abstract type was located in the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.ContainsKey(System.Type,System.String)">
            <summary>
            Determines whether the collection contains an entry with the specified abstract type.
            </summary>
            <param name="abstractType">The abstract type to locate in the collection.</param>
            <param name="name">A unique identifier for the abstract type.</param>
            <returns><c>true</c> if the abstract type was located in the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.Clear">
            <summary>
            Removes all custom entries from the collection.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.Remove(System.Type)">
            <summary>
            Removes the entry with the specified abstract type from the collection.
            </summary>
            <param name="abstractType">The abstract type of the entry to remove.</param>
            <returns><c>true</c> if the entry was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.Remove(System.Type,System.String)">
            <summary>
            Removes the entry with the specified abstract type from the collection.
            </summary>
            <param name="abstractType">The abstract type of the entry to remove.</param>
            <param name="name">A unique identifier for the abstract type.</param>
            <returns><c>true</c> if the entry was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.TryGetValue(System.Type,System.Type@)">
            <summary>
            Gets the class type associated with the specified abstract type.
            </summary>
            <param name="abstractType">The abstract type whose associated class type to get.</param>
            <param name="classType">When the method returns, the class type associated with the specified abstract type, if the abstract type was found; otherwise, <c>null</c>."/></param>
            <returns><c>true</c> if the class type was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.TryGetValue(System.String,System.Type@)">
            <summary>
            Gets the class type associated with the specified name.
            </summary>
            <param name="name">A unique identifier for the abstract type.</param>
            <param name="classType">When the method returns, the class type associated with the specified abstract type, if the abstract type was found; otherwise, <c>null</c>."/></param>
            <returns><c>true</c> if the class type was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.TryGetValue(System.Type,System.String,System.Type@)">
            <summary>
            Gets the class type associated with the specified abstract type.
            </summary>
            <param name="abstractType">The abstract type whose associated class type to get.</param>
            <param name="name">A unique identifier for the abstract type.</param>
            <param name="classType">When the method returns, the class type associated with the specified abstract type, if the abstract type was found; otherwise, <c>null</c>."/></param>
            <returns><c>true</c> if the class type was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.TryGetInstance(System.Type,System.Object@)">
            <summary>
            Gets the instance associated with the specified abstract type.
            </summary>
            <param name="abstractType">The abstract type whose associated class type to get.</param>
            <param name="instance">When the method returns, the instance associated with the specified abstract type, if the abstract type was found; otherwise, <c>null</c>."/></param>
            <returns><c>true</c> if the class type was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.TryGetInstance(System.String,System.Object@)">
            <summary>
            Gets the instance associated with the specified name.
            </summary>
            <param name="name">A unique identifier for the abstract type.</param>
            <param name="instance">When the method returns, the instance associated with the specified abstract type, if the abstract type was found; otherwise, <c>null</c>."/></param>
            <returns><c>true</c> if the class type was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.TryGetInstance(System.Type,System.String,System.Object@)">
            <summary>
            Gets the instance associated with the specified abstract type.
            </summary>
            <param name="abstractType">The abstract type whose associated class type to get.</param>
            <param name="name">A unique identifier for the abstract type.</param>
            <param name="instance">When the method returns, the instance associated with the specified abstract type, if the abstract type was found; otherwise, <c>null</c>."/></param>
            <returns><c>true</c> if the class type was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:MonoCross.Navigation.NamedTypeMap.Item(System.Type)">
            <summary>
            Gets or sets the class type associated with the specified interface type.
            </summary>
            <param name="abstractType">The interface type associated with the class type to get or set.</param>
            <returns>The class type associated with the <paramref name="abstractType"/>.</returns>
        </member>
        <member name="P:MonoCross.Navigation.NamedTypeMap.Item(System.Type,System.String)">
            <summary>
            Gets or sets the class type associated with the specified interface type.
            </summary>
            <param name="abstractType">The interface type associated with the class type to get or set.</param>
            <param name="name">A unique identifier for the abstract type.</param>
            <returns>The class type associated with the <paramref name="abstractType"/>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.CheckEntry(System.String@,System.Type,System.Type)">
            <summary>
            Performs type constraints on new entries.
            </summary>
            <param name="name">The entry name passed by reference so that it may be changed.</param>
            <param name="key">The key <see cref="T:System.Type"/>.</param>
            <param name="value">the value <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.Resolve(System.Type,System.String,System.Object[])">
            <summary>
            Resolves the specified abstract type as a concrete instance.
            </summary>
            <param name="type">The abstract type to resolve.</param>
            <param name="name">An optional unique identifier for the abstract type.</param>
            <param name="parameters">An array of constructor parameters for initialization.</param>
            <exception cref="T:System.TypeLoadException">Thrown if the type cannot be found in the map.</exception>
            <returns>The object instance.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.Register(System.Type,System.Type)">
            <summary>
            Registers the specified key type and class type for <see cref="M:MonoCross.Navigation.NamedTypeMap.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <param name="keyType">The key type to associate with the value type.</param>
            <param name="mappedType">The type of the class to associate with the key type.</param>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.Register(System.Type,System.Type,System.String)">
            <summary>
            Registers the specified key type and class type for <see cref="M:MonoCross.Navigation.NamedTypeMap.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <param name="keyType">The key type to associate with the value type.</param>
            <param name="mappedType">The type of the class to associate with the key type.</param>
            <param name="namedInstance">An optional unique identifier for the key type.</param>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.Register(System.Type,System.Type,System.String,System.Func{System.Object},System.Boolean)">
            <summary>
            Registers the specified key type and class type for <see cref="M:MonoCross.Navigation.NamedTypeMap.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <param name="keyType">The key type to associate with the value type.</param>
            <param name="namedInstance">An optional unique identifier for the key type.</param>
            <param name="nativeType">The type of the class to associate with the key type.</param>
            <param name="initialization">A method that initializes the object.</param>
            <param name="singletonInstance"><c>true</c> to create and cache the instance; otherwise <c>false</c> to create every time.</param>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.Register(System.Type,System.Type,System.String,System.Func{System.Object[],System.Object},System.Boolean)">
            <summary>
            Registers the specified key type and class type for <see cref="M:MonoCross.Navigation.NamedTypeMap.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <param name="keyType">The key type to associate with the value type.</param>
            <param name="namedInstance">An optional unique identifier for the key type.</param>
            <param name="nativeType">The type of the class to associate with the key type.</param>
            <param name="initialization">A method that initializes the object.</param>
            <param name="singletonInstance"><c>true</c> to create and cache the instance; otherwise <c>false</c> to create every time.</param>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.Register(System.Type,System.Object)">
            <summary>
            Registers the specified key type and object for <see cref="M:MonoCross.Navigation.NamedTypeMap.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <param name="keyType">The key type to associate with the value type.</param>
            <param name="mappedObject">The type of the class to associate with the key type.</param>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.Register(System.Type,System.Object,System.String)">
            <summary>
            Registers the specified key type and object for <see cref="M:MonoCross.Navigation.NamedTypeMap.Resolve(System.Type,System.String,System.Object[])"/>.
            </summary>
            <param name="keyType">The key type to associate with the value type.</param>
            <param name="mappedObject">The type of the class to associate with the key type.</param>
            <param name="namedInstance">An optional unique identifier for the key type.</param>
        </member>
        <member name="T:MonoCross.Navigation.NamedTypeMap.NamedType">
            <summary>
            A key containing a type and optional name.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.NamedType.#ctor(System.Type)">
            <summary>
            Initializes a new <see cref="T:MonoCross.Navigation.NamedTypeMap.NamedType"/> instance.
            </summary>
            <param name="type">The mapped <see cref="F:MonoCross.Navigation.NamedTypeMap.NamedType.Type"/>.</param>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.NamedType.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new <see cref="T:MonoCross.Navigation.NamedTypeMap.NamedType"/> instance.
            </summary>
            <param name="type">The mapped <see cref="F:MonoCross.Navigation.NamedTypeMap.NamedType.Type"/>.</param>
            <param name="id">An optional name describing the type.</param>
        </member>
        <member name="F:MonoCross.Navigation.NamedTypeMap.NamedType.Type">
            <summary>
            The type for this instance. This field is readonly.
            </summary>
        </member>
        <member name="F:MonoCross.Navigation.NamedTypeMap.NamedType.Id">
            <summary>
            An optional identifier. This field is readonly.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.NamedType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.NamedType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.NamedType.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.NamedType.Equals(MonoCross.Navigation.NamedTypeMap.NamedType,MonoCross.Navigation.NamedTypeMap.NamedType)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:MonoCross.Navigation.NamedTypeMap.NamedType"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:MonoCross.Navigation.NamedTypeMap.NamedType"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.NamedType.GetHashCode(MonoCross.Navigation.NamedTypeMap.NamedType)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.NamedType.op_Equality(MonoCross.Navigation.NamedTypeMap.NamedType,MonoCross.Navigation.NamedTypeMap.NamedType)">
            <summary>
            Checks the specified NamedTypes for equality.
            </summary>
            <param name="a">The first <see cref="T:MonoCross.Navigation.NamedTypeMap.NamedType"/> to check.</param>
            <param name="b">The second <see cref="T:MonoCross.Navigation.NamedTypeMap.NamedType"/> to check.</param>
            <returns><c>true</c> if the parameters are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.NamedTypeMap.NamedType.op_Inequality(MonoCross.Navigation.NamedTypeMap.NamedType,MonoCross.Navigation.NamedTypeMap.NamedType)">
            <summary>
            Checks the specified NamedTypes for inequality.
            </summary>
            <param name="a">The first <see cref="T:MonoCross.Navigation.NamedTypeMap.NamedType"/> to check.</param>
            <param name="b">The second <see cref="T:MonoCross.Navigation.NamedTypeMap.NamedType"/> to check.</param>
            <returns><c>true</c> if the parameters are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MonoCross.Navigation.SerializableDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs with serialization logic.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> class with the default equality comparer.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> class that contains elements
            copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> and uses the default equality comparer.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/>.</param>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> class that uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys.</param>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> class with the specified capacity.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> can contain.</param>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> class that contains elements
            copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> and uses the specified equality comparer.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys.</param>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> class with the specified capacity
            and that uses the specified equality comparer.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys.</param>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add to the collection.</param>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The item to locate in the collection.</param>
            <returns><c>true</c> if the item is found in the collection; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an <see cref="T:System.Array"/>, starting at a particular index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the collection.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns><c>true</c> if the item was successfully removed from the collection; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an <see cref="T:System.Array"/>, starting at a particular index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the collection.</param>
            <param name="index">The index in the array at which copying begins.</param>
        </member>
        <member name="P:MonoCross.Navigation.SerializableDictionary`2.IsSynchronized">
            <summary>
            Gets whether this instance is synchronized across threads.
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.SerializableDictionary`2.SyncRoot">
            <summary>
            Gets an object that can be used for synchronization.
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.SerializableDictionary`2.Count">
            <summary>
            Gets the number of elements contained within the collection.
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.SerializableDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns><c>true</c> if the dictionary contains an element with the key; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><c>true</c> if the element was successfully removed from the dictionary; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When the method returns, the value of the specified key.</param>
            <returns><c>true</c> if the dictionary contains an element with the key; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:MonoCross.Navigation.SerializableDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
        </member>
        <member name="P:MonoCross.Navigation.SerializableDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys of the dictionary.
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.SerializableDictionary`2.Values">
            <summary>
            Gets a collection containing the values of the dictionary.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.Contains(System.Object)">
            <summary>
            Determines whether the dictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns><c>true</c> if the dictionary contains an element with the key; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="P:MonoCross.Navigation.SerializableDictionary`2.IsFixedSize">
            <summary>
            Gets whether this instance is of a fixed size and cannot be resized to fit more elements.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates a dictionary element from the XML that is at the current position of the specified <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the element is deserialized.</param>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an element into its XML representation and writes it to the specified <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.op_Implicit(MonoCross.Navigation.SerializableDictionary{`0,`1})~System.Collections.Generic.Dictionary{`0,`1}">
            <summary>
            Implicitly converts a <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> instance to a <see cref="T:System.Collections.Generic.Dictionary`2"/> instance.
            </summary>
            <param name="d">The <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> instance to convert.</param>
        </member>
        <member name="M:MonoCross.Navigation.SerializableDictionary`2.op_Implicit(System.Collections.Generic.Dictionary{`0,`1})~MonoCross.Navigation.SerializableDictionary{`0,`1}">
            <summary>
            Implicitly converts a <see cref="T:System.Collections.Generic.Dictionary`2"/> instance to a <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> instance.
            </summary>
            <param name="d">The <see cref="T:System.Collections.Generic.Dictionary`2"/> instance to convert.</param>
        </member>
        <member name="T:MonoCross.Navigation.ISession">
            <summary>
            Defines an application's session settings.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.ISession.Abandon">
            <summary>
            Removes or resets all session settings.
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.ISession.SafeKeys">
            <summary>
            Gets a collection of entries to persist through a <see cref="M:System.Collections.Generic.ICollection`1.Clear"/>
            </summary>
        </member>
        <member name="T:MonoCross.Navigation.SessionDictionary">
            <summary>
            Represents a <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> that stores an application's session settings.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.SessionDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Navigation.SessionDictionary"/> class.
            </summary>
        </member>
        <member name="F:MonoCross.Navigation.SessionDictionary.ContainerKey">
            <summary>
            The key used to keep the <see cref="T:MonoCross.Navigation.MXContainer"/> instance in session.
            </summary>
        </member>
        <member name="F:MonoCross.Navigation.SessionDictionary.NavKey">
            <summary>
            The key used to keep the <see cref="T:MonoCross.Navigation.NavigationList"/> instance in session.
            </summary>
        </member>
        <member name="F:MonoCross.Navigation.SessionDictionary.ViewsKey">
            <summary>
            The key used to keep the <see cref="T:MonoCross.Navigation.MXViewMap"/> instance in session.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.SessionDictionary.Clear">
            <summary>
            Removes all keys and values from the <see cref="T:MonoCross.Navigation.SessionDictionary"/> with the exception of the application and navigation map objects.
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.SessionDictionary.SafeKeys">
            <summary>
            Gets a collection of entries to persist through a <see cref="M:MonoCross.Navigation.SessionDictionary.Clear"/>
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.SessionDictionary.Abandon">
            <summary>
            Removes or resets all session settings.
            </summary>
        </member>
        <member name="T:MonoCross.Navigation.TypeLoader">
            <summary>
            A wrapper for initializing and managing objects by type.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.TypeLoader.#ctor(System.Type)">
            <summary>
            Initializes a new <see cref="T:MonoCross.Navigation.TypeLoader"/> instance.
            </summary>
            <param name="instanceType">The <see cref="T:System.Type"/> to manage.</param>
        </member>
        <member name="M:MonoCross.Navigation.TypeLoader.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:MonoCross.Navigation.TypeLoader"/> instance.
            </summary>
            <param name="instanceType">The <see cref="T:System.Type"/> to manage.</param>
            <param name="isSingleton"><c>true</c> to create and cache the instance; otherwise <c>false</c> to create every time.</param>
        </member>
        <member name="M:MonoCross.Navigation.TypeLoader.#ctor(System.Type,System.Func{System.Object})">
            <summary>
            Initializes a new <see cref="T:MonoCross.Navigation.TypeLoader"/> instance.
            </summary>
            <param name="instanceType">The <see cref="T:System.Type"/> to manage.</param>
            <param name="initialization">A method that initializes the object.</param>
        </member>
        <member name="M:MonoCross.Navigation.TypeLoader.#ctor(System.Type,System.Func{System.Object[],System.Object})">
            <summary>
            Initializes a new <see cref="T:MonoCross.Navigation.TypeLoader"/> instance.
            </summary>
            <param name="instanceType">The <see cref="T:System.Type"/> to manage.</param>
            <param name="initialization">A method that initializes the object.</param>
        </member>
        <member name="M:MonoCross.Navigation.TypeLoader.#ctor(System.Type,System.Boolean,System.Func{System.Object})">
            <summary>
            Initializes a new <see cref="T:MonoCross.Navigation.TypeLoader"/> instance.
            </summary>
            <param name="instanceType">The <see cref="T:System.Type"/> to manage.</param>
            <param name="isSingleton"><c>true</c> to create and cache the instance; otherwise <c>false</c> to create every time.</param>
            <param name="initialization">A method that initializes the object.</param>
        </member>
        <member name="M:MonoCross.Navigation.TypeLoader.#ctor(System.Type,System.Boolean,System.Func{System.Object[],System.Object})">
            <summary>
            Initializes a new <see cref="T:MonoCross.Navigation.TypeLoader"/> instance.
            </summary>
            <param name="instanceType">The <see cref="T:System.Type"/> to manage.</param>
            <param name="isSingleton"><c>true</c> to create and cache the instance; otherwise <c>false</c> to create every time.</param>
            <param name="initialization">A method that initializes the object.</param>
        </member>
        <member name="M:MonoCross.Navigation.TypeLoader.#ctor(System.Object)">
            <summary>
            Initializes a new <see cref="T:MonoCross.Navigation.TypeLoader"/> instance.
            </summary>
            <param name="instance">The singleton object to manage.</param>
        </member>
        <member name="P:MonoCross.Navigation.TypeLoader.Instance">
            <summary>
            The initialized object of type <see cref="P:MonoCross.Navigation.TypeLoader.Type"/>, if it exists.
            </summary>
        </member>
        <member name="P:MonoCross.Navigation.TypeLoader.Type">
            <summary>
            The type managed by this instance.
            </summary>
        </member>
        <member name="M:MonoCross.Navigation.TypeLoader.Load``1(System.Object[])">
            <summary>
            Returns the managed instance.
            </summary>
            <typeparam name="T">The type for casting the result.</typeparam>
            <param name="parameters">An array of constructor parameters for initialization.</param>
            <returns>The object instance cast to a <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:MonoCross.Navigation.TypeLoader.Load(System.Object[])">
            <summary>
            Returns the managed instance.
            </summary>
            <param name="parameters">An array of constructor parameters for initialization.</param>
            <returns>The object instance.</returns>
        </member>
        <member name="T:MonoCross.Navigation.ViewPerspective">
            <summary>
            Static class containing common perspectives returned by a <see cref="T:MonoCross.Navigation.IMXController"/>
            </summary>
        </member>
        <member name="F:MonoCross.Navigation.ViewPerspective.Default">
            <summary>
            The default ViewPerspective for a model when none is specified.
            </summary>
            <remarks>This perspective is usually associated with lists or dashboards that describe collections of a model.</remarks>
        </member>
        <member name="F:MonoCross.Navigation.ViewPerspective.Read">
            <summary>
            The ViewPerspective for reading from a model.
            </summary>
        </member>
        <member name="F:MonoCross.Navigation.ViewPerspective.Create">
            <summary>
            The ViewPerspective for creating a model.
            </summary>
        </member>
        <member name="F:MonoCross.Navigation.ViewPerspective.Update">
            <summary>
            The ViewPerspective for modifying a model.
            </summary>
        </member>
        <member name="F:MonoCross.Navigation.ViewPerspective.Delete">
            <summary>
            The ViewPerspective for deleting a model.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.NetworkResponseEvent">
            <summary>
            Represents a method that handles network response events.
            </summary>
            <param name="networkResponse">Contains information about the network response.</param>
        </member>
        <member name="T:MonoCross.Utilities.Device">
            <summary>
            Represents a collection of platform-specific utilities in the abstract.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Device.#cctor">
            <summary>
            Initializes a static instance of the <see cref="T:MonoCross.Utilities.Device"/> class.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Device.Initialize(MonoCross.Utilities.Device)">
            <summary>
            Initializes the singleton device instance.
            </summary>
            <param name="newInstance">The singleton device instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="newInstance"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MonoCross.Utilities.Device.Initialize">
            <summary>
            Initializes this instance with platform-specific implementations.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Device.Instance">
            <summary>
            Gets or sets the Device instance stored on the session.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Device.Session">
            <summary>
            Gets the current session settings.
            </summary>
        </member>
        <member name="E:MonoCross.Utilities.Device.OnNetworkResponse">
            <summary>
            Occurs when a network response is received.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Device.LastActivityDate">
            <summary>
            Gets the date and time of the last attempted controller navigation.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Device.NetworkGetMethod">
            <summary>
            Gets or sets the restrictions to impose on network GET methods.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Device.NetworkPostMethod">
            <summary>
            Gets or sets the restrictions to impose on network POST methods.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Device.SessionDataRoot">
            <summary>
            Gets the session-scoped root path for application data.
            </summary>
            <value>The data path as a <see cref="T:System.String"/> instance.</value>
        </member>
        <member name="P:MonoCross.Utilities.Device.SessionDataAppend">
            <summary>
            Gets or sets the session-scoped appended path for application data.
            </summary>
            <value>The data path as a <see cref="T:System.String"/> instance.</value>
        </member>
        <member name="P:MonoCross.Utilities.Device.SessionDataPath">
            <summary>
            Gets the session-scoped path for application data.
            </summary>
            <value>The data path as a <see cref="T:System.String"/> instance.</value>
        </member>
        <member name="P:MonoCross.Utilities.Device.RequestInjectionHeaders">
            <summary>
            Gets or sets the request injection headers within the current session.
            </summary>
            <value>A <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> representing the request injection headers.</value>
        </member>
        <member name="P:MonoCross.Utilities.Device.Encryption">
            <summary>
            Gets or sets the data encryptor.
            </summary>
            <value>The encryptor as an <see cref="T:MonoCross.Utilities.Encryption.IEncryption"/> instance.</value>
        </member>
        <member name="P:MonoCross.Utilities.Device.File">
            <summary>
            Gets or sets the file system interface.
            </summary>
            <value>File system access as an <see cref="T:MonoCross.Utilities.Storage.IFile"/> instance.</value>
        </member>
        <member name="P:MonoCross.Utilities.Device.ImageCache">
            <summary>
            Gets or sets the image cache.
            </summary>
            <value>The image cache as an <see cref="T:MonoCross.IImageCache"/> instance.</value>
        </member>
        <member name="P:MonoCross.Utilities.Device.Log">
            <summary>
            Gets or sets the logging utility.
            </summary>
            <value>The logger as an <see cref="T:MonoCross.Utilities.Logging.ILog"/> instance.</value>
        </member>
        <member name="P:MonoCross.Utilities.Device.Reflector">
            <summary>
            Gets or sets the reflector utility.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Device.Resources">
            <summary>
            Gets or sets the resources utility.
            </summary>
            <value>The resrouces utility as an <see cref="T:MonoCross.Utilities.Resources.IResources"/> instance.</value>
        </member>
        <member name="P:MonoCross.Utilities.Device.Thread">
            <summary>
            Gets or sets the threading utility.
            </summary>
            <value>The threading utility as an <see cref="T:MonoCross.Utilities.Threading.IThread"/> instance.</value>
        </member>
        <member name="P:MonoCross.Utilities.Device.Network">
            <summary>
            Gets the networking utility.
            </summary>
            <value>The networking utility as an <see cref="T:MonoCross.Utilities.Network.INetwork"/> instance.</value>
        </member>
        <member name="P:MonoCross.Utilities.Device.ApplicationPath">
            <summary>
            Gets the read-only path for application assets.
            </summary>
            <value>The application path as a <see cref="T:System.String"/> instance.</value>
        </member>
        <member name="P:MonoCross.Utilities.Device.DataPath">
            <summary>
            Gets the path for read/write global data.
            </summary>
            <value>The data path as a <see cref="T:System.String"/> instance.</value>
        </member>
        <member name="P:MonoCross.Utilities.Device.DirectorySeparatorChar">
            <summary>
            Gets the appropriate directory separator character for the platform.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Device.Platform">
            <summary>
            Gets the device platform.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Device.PostNetworkResponse(MonoCross.NetworkResponse)">
            <summary>
            Invokes the <see cref="E:MonoCross.Utilities.Device.OnNetworkResponse"/> event using the specified network response.
            </summary>
            <param name="networkResponse">The network response from a previous request.</param>
        </member>
        <member name="T:MonoCross.Utilities.EncryptionMode">
            <summary>
            The available modes of data encryption.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.EncryptionMode.Default">
            <summary>
            Encryption is determined by the application.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.EncryptionMode.NoEncryption">
            <summary>
            No encryption will be done.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.EncryptionMode.Encryption">
            <summary>
            The data will be encrypted.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.Encryption.IEncryption">
            <summary>
            Defines the MonoCross abstract encryption utility.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Encryption.IEncryption.Required">
            <summary>
            Gets or sets whether encryption is required.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Encryption.IEncryption.Key">
            <summary>
            Gets or sets the keyword that, combined with the Salt, will generate the encryption key.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Encryption.IEncryption.Salt">
            <summary>
            Gets or sets the salt that, combined with the Key, will generate the encryption key.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.IEncryption.EncryptString(System.String)">
            <summary>
            Encrypts the specified text.
            </summary>
            <param name="txt">The text to encrypt.</param>
            <returns>The encrypted text.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.IEncryption.EncryptString(System.String,System.String,System.Byte[])">
            <summary>
            Encrypts the specified text.
            </summary>
            <param name="txt">The text to encrypt.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
            <returns>The encrypted text.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.IEncryption.DecryptString(System.String)">
            <summary>
            Decrypts the specified text.
            </summary>
            <param name="cipher">The text to decrypt.</param>
            <returns>The decrypted text.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.IEncryption.DecryptString(System.String,System.String,System.Byte[])">
            <summary>
            Decrypts the specified text.
            </summary>
            <param name="cipher">The text to decrypt.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
            <returns>The decrypted text.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.IEncryption.EncryptBytes(System.Byte[])">
            <summary>
            Encrypts the specified byte array.
            </summary>
            <param name="bytes">The byte array to encrypt.</param>
            <returns>The encrypted byte array.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.IEncryption.EncryptBytes(System.Byte[],System.String,System.Byte[])">
            <summary>
            Encrypts the specified byte array.
            </summary>
            <param name="bytes">The byte array to encrypt.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
            <returns>The encrypted byte array.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.IEncryption.DecryptBytes(System.Byte[])">
            <summary>
            Decrypts the specified byte array.
            </summary>
            <param name="cipher">The byte array to decrypt.</param>
            <returns>The decrypted byte array.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.IEncryption.DecryptBytes(System.Byte[],System.String,System.Byte[])">
            <summary>
            Decrypts the specified byte array.
            </summary>
            <param name="cipher">The byte array to decrypt.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
            <returns>The decrypted byte array.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.IEncryption.EncryptStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Reads the contents of the specified input stream and writes an encrypted version of the contents to the specified output stream.
            </summary>
            <param name="inputStream">The stream that contains the unencrypted data.</param>
            <param name="outputStream">The stream to write the encrypted data to.</param>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.IEncryption.EncryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
            <summary>
            Reads the contents of the specified input stream and writes an encrypted version of the contents to the specified output stream.
            </summary>
            <param name="inputStream">The stream that contains the unencrypted data.</param>
            <param name="outputStream">The stream to write the encrypted data to.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.IEncryption.DecryptStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Reads the contents of the specified input stream and writes a decrypted version of the contents to the specified output stream.
            </summary>
            <param name="inputStream">The stream that contains the encrypted data.</param>
            <param name="outputStream">The stream to write the decrypted data to.</param>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.IEncryption.DecryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
            <summary>
            Reads the contents of the specified input stream and writes a decrypted version of the contents to the specified output stream.
            </summary>
            <param name="inputStream">The stream that contains the encrypted data.</param>
            <param name="outputStream">The stream to write the decrypted data to.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
        </member>
        <member name="T:MonoCross.Utilities.Encryption.MockEncryption">
            <summary>
            <see cref="T:MonoCross.Utilities.Encryption.IEncryption"/> implementation that skips encryption.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Encryption.MockEncryption.Required">
            <summary>
            Gets or sets whether encryption is required.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Encryption.MockEncryption.Key">
            <summary>
            Gets or sets the keyword that, combined with the Salt, will generate the encryption key.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Encryption.MockEncryption.Salt">
            <summary>
            Gets or sets the salt that, combined with the Key, will generate the encryption key.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.MockEncryption.EncryptString(System.String)">
            <summary>
            Encrypts the specified text.
            </summary>
            <param name="txt">The text to encrypt.</param>
            <returns>
            The encrypted text.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.MockEncryption.EncryptString(System.String,System.String,System.Byte[])">
            <summary>
            Encrypts the specified text.
            </summary>
            <param name="txt">The text to encrypt.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
            <returns>
            The encrypted text.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.MockEncryption.DecryptString(System.String)">
            <summary>
            Decrypts the specified text.
            </summary>
            <param name="cipher">The text to decrypt.</param>
            <returns>
            The decrypted text.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.MockEncryption.DecryptString(System.String,System.String,System.Byte[])">
            <summary>
            Decrypts the specified text.
            </summary>
            <param name="cipher">The text to decrypt.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
            <returns>
            The decrypted text.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.MockEncryption.EncryptBytes(System.Byte[])">
            <summary>
            Encrypts the specified byte array.
            </summary>
            <param name="bytes">The byte array to encrypt.</param>
            <returns>
            The encrypted byte array.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.MockEncryption.EncryptBytes(System.Byte[],System.String,System.Byte[])">
            <summary>
            Encrypts the specified byte array.
            </summary>
            <param name="bytes">The byte array to encrypt.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
            <returns>
            The encrypted byte array.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.MockEncryption.DecryptBytes(System.Byte[])">
            <summary>
            Decrypts the specified byte array.
            </summary>
            <param name="cipher">The byte array to decrypt.</param>
            <returns>
            The decrypted byte array.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.MockEncryption.DecryptBytes(System.Byte[],System.String,System.Byte[])">
            <summary>
            Decrypts the specified byte array.
            </summary>
            <param name="cipher">The byte array to decrypt.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
            <returns>
            The decrypted byte array.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.MockEncryption.EncryptStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Reads the contents of the specified input stream and writes an encrypted version of the contents to the specified output stream.
            </summary>
            <param name="inputStream">The stream that contains the unencrypted data.</param>
            <param name="outputStream">The stream to write the encrypted data to.</param>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.MockEncryption.EncryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
            <summary>
            Reads the contents of the specified input stream and writes an encrypted version of the contents to the specified output stream.
            </summary>
            <param name="inputStream">The stream that contains the unencrypted data.</param>
            <param name="outputStream">The stream to write the encrypted data to.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.MockEncryption.DecryptStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Reads the contents of the specified input stream and writes a decrypted version of the contents to the specified output stream.
            </summary>
            <param name="inputStream">The stream that contains the encrypted data.</param>
            <param name="outputStream">The stream to write the decrypted data to.</param>
        </member>
        <member name="M:MonoCross.Utilities.Encryption.MockEncryption.DecryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
            <summary>
            Reads the contents of the specified input stream and writes a decrypted version of the contents to the specified output stream.
            </summary>
            <param name="inputStream">The stream that contains the encrypted data.</param>
            <param name="outputStream">The stream to write the decrypted data to.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
        </member>
        <member name="T:MonoCross.Utilities.Events">
            <summary>
            Provides methods for event invocation.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Events.AddEventHandler(System.Object,System.String,System.Object,System.String)">
            <summary>
            Adds a handler to an event using reflection.
            </summary>
            <param name="eventObject">The object instance with the event to modify.</param>
            <param name="eventName">The name of the event.</param>
            <param name="handlerObject">The object instance that contains the event handler.</param>
            <param name="handlerName">The name of the event handler method.</param>
        </member>
        <member name="M:MonoCross.Utilities.Events.AddEventHandler(System.Object,System.String,System.Delegate)">
            <summary>
            Adds a handler to an event using reflection.
            </summary>
            <param name="eventObject">The object instance with the event to modify.</param>
            <param name="eventName">The name of the event.</param>
            <param name="eventHandler">The handler to add to the event.</param>
        </member>
        <member name="M:MonoCross.Utilities.Events.RemoveEventHandler(System.Object,System.String,System.Object,System.String)">
            <summary>
            Removes a handler from an event using reflection.
            </summary>
            <param name="eventObject">The object instance with the event to modify.</param>
            <param name="eventName">The name of the event.</param>
            <param name="handlerObject">The object instance that contains the event handler.</param>
            <param name="handlerName">The name of the event handler method.</param>
        </member>
        <member name="M:MonoCross.Utilities.Events.RemoveEventHandler(System.Object,System.String,System.Delegate)">
            <summary>
            Removes a handler from an event using reflection.
            </summary>
            <param name="eventObject">The object instance with the event to modify.</param>
            <param name="eventName">The name of the event.</param>
            <param name="eventHandler">The handler to remove from the event.</param>
        </member>
        <member name="M:MonoCross.Utilities.Events.RaiseEvent(System.Object,System.String,System.EventArgs)">
            <summary>
            Attempts to raise the event with the specified name and <see cref="T:System.EventArgs"/> on the current instance.
            </summary>
            <param name="obj">The current object.</param>
            <param name="eventName">The name of the event to be raised.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <returns><c>true</c> if the event is successfully raised, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Events.HasEvent(System.Object,System.String)">
            <summary>
            Determines whether an object has a delegate wired up to an event.
            </summary>
            <param name="obj">The current object.</param>
            <param name="eventName">The name of the event.</param>
            <returns><c>true</c> if the event is present, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:MonoCross.Utilities.StringExtensions">
            <summary>
            Represents methods for manipulating strings.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.AppendPath(System.String,System.String)">
            <summary>
            Appends the specified path and returns the result.
            </summary>
            <param name="basePath">The path to be appended to.</param>
            <param name="relativePath">The path to append.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.Clean(System.String)">
            <summary>
            Returns a lowercase representation or an empty string if null.
            </summary>
            <param name="str">The string to get a lowercase representation of.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.ToTitleCase(System.String)">
            <summary>
            Changes the first character to uppercase and the rest of the characters to lowercase, then returns the result.
            </summary>
            <param name="str">The string to modify.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.IsNullOrEmptyOrWhiteSpace(System.String)">
            <summary>
            A "String.IsNullOrWhiteSpace()" implementation for pre-.NET 4.0 projects
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.IsRemotePath(System.String)">
            <summary>
            Returns a value indicating whether the string is a path to a remote resource.
            </summary>
            <returns><c>true</c> if the string is a path to a remote resource; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.CleanEntities(System.String)">
            <summary>
            Replaces certain characters with their equivalent HTML representations and returns the result.
            </summary>
            <param name="str">The string to replace the characters of.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.RemoveLeadingSlash(System.String)">
            <summary>
            Removes the leading slash from a string.
            </summary>
            <param name="value">The string value to process.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.RemoveTrailingSlash(System.String)">
            <summary>
            Removes the trailing slash.
            </summary>
            <param name="value">The value.</param>
            <returns>A string without a trailing slash.</returns>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseInt32(System.String)">
            <summary>
            Attempts to parse the string into a 32-bit signed integer and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseInt32(System.String,System.Int32)">
            <summary>
            Attempts to parse the string into a 32-bit signed integer and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
            <param name="defaultValue">The value to return if parsing fails.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseInt16(System.String)">
            <summary>
            Attempts to parse the string into a 16-bit signed integer and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseInt16(System.String,System.Int16)">
            <summary>
            Attempts to parse the string into a 16-bit signed integer and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
            <param name="defaultValue">The value to return if parsing fails.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseInt64(System.String)">
            <summary>
            Attempts to parse the string into a 64-bit signed integer and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseInt64(System.String,System.Int64)">
            <summary>
            Attempts to parse the string into a 64-bit signed integer and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
            <param name="defaultValue">The value to return if parsing fails.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseByte(System.String)">
            <summary>
            Attempts to parse the string into a 8-bit signed integer and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseByte(System.String,System.Byte)">
            <summary>
            Attempts to parse the string into a 8-bit signed integer and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
            <param name="defaultValue">The value to return if parsing fails.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseBoolean(System.String)">
            <summary>
            Attempts to parse the string into a boolean and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseBoolean(System.String,System.Boolean)">
            <summary>
            Attempts to parse the string into a boolean and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
            <param name="defaultValue">The value to return if parsing fails.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseSingle(System.String)">
            <summary>
            Attempts to parse the string into a 32-bit floating point number and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseSingle(System.String,System.Single)">
            <summary>
            Attempts to parse the string into a 32-bit floating point number and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
            <param name="defaultValue">The value to return if parsing fails.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseDouble(System.String)">
            <summary>
            Attempts to parse the string into a 64-bit floating point number and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseDouble(System.String,System.Double)">
            <summary>
            Attempts to parse the string into a 64-bit floating point number and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
            <param name="defaultValue">The value to return if parsing fails.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseDecimal(System.String)">
            <summary>
            Attempts to parse the string into a decimal number and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseDecimal(System.String,System.Decimal)">
            <summary>
            Attempts to parse the string into a decimal number and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
            <param name="defaultValue">The value to return if parsing fails.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseDateTime(System.String)">
            <summary>
            Attempts to parse the string into a <see cref="T:System.DateTime"/> object and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseDateTime(System.String,System.DateTime)">
            <summary>
            Attempts to parse the string into a <see cref="T:System.DateTime"/> object and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
            <param name="defaultValue">The value to return if parsing fails.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseDateTimeUtc(System.String)">
            <summary>
            Attempts to parse the string into a <see cref="T:System.DateTime"/> object set to UTC and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.TryParseDateTimeUtc(System.String,System.DateTime)">
            <summary>
            Attempts to parse the string into a <see cref="T:System.DateTime"/> object set to UTC and returns the parsed value.
            </summary>
            <param name="value">The string to attempt to parse.</param>
            <param name="defaultValue">The value to return if parsing fails.</param>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.SubstringAfter(System.String,System.String)">
            <summary>
            Returns the substring after the value.
            </summary>
            <param name="source">The source.</param>
            <param name="value">The value.</param>
            <returns>The substring after the value/</returns>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.SubstringBefore(System.String,System.String)">
            <summary>
            Returns the substring before the value provided.
            </summary>
            <param name="source">The source string.</param>
            <param name="value">The string value to search for.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.EncodeParameter(System.String)">
            <summary>
            Encodes the parameter.
            </summary>
            <param name="parameterToEncode">The parameter to encode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.DecodeParameter(System.String)">
            <summary>
            Decodes the parameter.
            </summary>
            <param name="parameterToDecode">The parameter to decode.</param>
            <returns></returns>
        </member>
        <member name="T:MonoCross.Utilities.StringExtensions.UrlHelper">
            <summary>
            Contains Utility Url helper methods.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.UrlHelper.Encode(System.String)">
            <summary>
            URI Encodes the specified string.
            </summary>
            <param name="str">The string.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.UrlHelper.Decode(System.String)">
            <summary>
            URI Decodes the specified string.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.UrlHelper.EncodeEvaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Encodes the evaluator.
            </summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.StringExtensions.UrlHelper.DecodeEvaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Decodes the evaluator.
            </summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="T:MonoCross.Utilities.HttpUtility">
            <summary>
            Represents a utility class for HTTP methods.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Utilities.HttpUtility"/> class.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)">
            <summary>
            Encodes the specified string into an HTML compatible string and then writes it to the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="s">The string to encode.</param>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> to write the encoded string to.</param>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.HtmlAttributeEncode(System.String)">
            <summary>
            Encodes the specified string into an HTML compatible string.
            </summary>
            <param name="s">The string to encode.</param>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.UrlDecode(System.String)">
            <summary>
            Decodes the specified URL string into a user-readable string.
            </summary>
            <param name="str">The string to decode.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            Decodes the specified URL string into a user-readable string.
            </summary>
            <param name="s">The string to decode.</param>
            <param name="e">The <see cref="T:System.Text.Encoding"/> type to decode the string with.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.UrlDecode(System.Byte[],System.Text.Encoding)">
            <summary>
            Decodes the bytes of a URL string into a user-readable string.
            </summary>
            <param name="bytes">The bytes to decode.</param>
            <param name="e">The <see cref="T:System.Text.Encoding"/> type to decode the byte array with.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.UrlDecode(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Decodes the bytes of a URL string into a user-readable string.
            </summary>
            <param name="bytes">The bytes to decode.</param>
            <param name="offset">The index in the byte array at which decoding begins.</param>
            <param name="count">The number of bytes to decode.</param>
            <param name="e">The <see cref="T:System.Text.Encoding"/> type to decode the byte array with.</param>
            <returns>The decoded string.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> is less than 0 or greater than the length of the byte array.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="count"/> is less than 0 or the sum of <paramref name="count"/> and <paramref name="offset"/> is greater than the legnth of the byte array.</exception>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.UrlDecodeToBytes(System.Byte[])">
            <summary>
            Decodes the bytes of a URL string into a byte array.
            </summary>
            <param name="bytes">The bytes to decode.</param>
            <returns>The decoded byte array.</returns>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.UrlDecodeToBytes(System.String)">
            <summary>
            Decodes the specified URL string into a byte array.
            </summary>
            <param name="str">The string to decode.</param>
            <returns>The decoded byte array.</returns>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.UrlDecodeToBytes(System.String,System.Text.Encoding)">
            <summary>
            Decodes the specified URL string into a byte array.
            </summary>
            <param name="str">The string to decode.</param>
            <param name="e">The <see cref="T:System.Text.Encoding"/> type to decode the string with.</param>
            <returns>The decoded byte array.</returns>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes the bytes of a URL string into a byte array.
            </summary>
            <param name="bytes">The bytes to decode.</param>
            <param name="offset">The index in the byte array at which decoding begins.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>The decoded byte array.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> is less than 0 or greater than the length of the byte array.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="count"/> is less than 0 or the sum of <paramref name="count"/> and <paramref name="offset"/> is greater than the legnth of the byte array.</exception>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.UrlEncode(System.String)">
            <summary>
            Encodes the specified string into a URL.
            </summary>
            <param name="str">The string to encode.</param>
            <returns>The encoded URL string.</returns>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            Encodes the specified string into a URL.
            </summary>
            <param name="s">The string to encode.</param>
            <param name="Enc">The <see cref="T:System.Text.Encoding"/> type to use for encoding.</param>
            <returns>The encoded URL string.</returns>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.UrlEncodeToBytes(System.String)">
            <summary>
            Encodes the specified string into a byte array.
            </summary>
            <param name="str">The string to encode.</param>
            <returns>The encoded byte array.</returns>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.UrlEncodeToBytes(System.String,System.Text.Encoding)">
            <summary>
            Encodes the specified string into a byte array.
            </summary>
            <param name="str">The string to encode.</param>
            <param name="e">The <see cref="T:System.Text.Encoding"/> type to use for encoding.</param>
            <returns>The encoded byte array.</returns>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.UrlEncodeToBytes(System.Byte[])">
            <summary>
            Encodes the specified byte array into a URL-encoded bytes.
            </summary>
            <param name="bytes">The byte array to encode.</param>
            <returns>The URL-encoded bytes.</returns>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes the specified byte array into a URL-encoded bytes.
            </summary>
            <param name="bytes">The byte array to encode.</param>
            <param name="offset">The index in the byte array at which encoding begins.</param>
            <param name="count">The number of bytes to encode.</param>
            <returns>The URL-encoded bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> is less than 0 or greater than the length of the byte array.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="count"/> is less than 0 or the sum of <paramref name="count"/> and <paramref name="offset"/> is greater than the legnth of the byte array.</exception>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.UrlEncodeUnicodeToBytes(System.String)">
            <summary>
            Encodes the specified string into a byte array.
            </summary>
            <param name="str">The string to encode.</param>
            <returns>The encoded byte array.</returns>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.HtmlDecode(System.String)">
            <summary>
            Decodes the specified HTML-encoded string and returns the decoded string.
            </summary>
            <param name="s">The HTML string to decode.</param>
            <returns>The decoded text.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="s"/> is <c>null</c> or an empty string.</exception>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            Decodes the specified HTML-encoded string and writes the decoded string to the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="s">The HTML string to decode</param>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> to write the decoded string to.</param>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.HtmlEncode(System.String)">
            <summary>
            Encodes the specified string into an HTML string and returns the encoded string.
            </summary>
            <param name="s">The string to encode.</param>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            Encodes the specified string into an HTML compatible string and writes the encoded string to the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="s">The string to encode.</param>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> to write the encoded string to.</param>
        </member>
        <member name="T:MonoCross.Utilities.HttpUtility.QueryStringCollection">
            <summary>
            Represents a collection of parameters extracted from a URL string.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.QueryStringCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this instance.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.ParseQueryString(System.String)">
            <summary>
            Parses the specified string and returns a new <see cref="T:MonoCross.Utilities.HttpUtility.QueryStringCollection"/> instance containing the extracted parameters.
            </summary>
            <param name="query">The string to parse.</param>
        </member>
        <member name="M:MonoCross.Utilities.HttpUtility.ParseQueryString(System.String,System.Text.Encoding)">
            <summary>
            Parses the specified string and returns a new <see cref="T:MonoCross.Utilities.HttpUtility.QueryStringCollection"/> instance containing the extracted parameters.
            </summary>
            <param name="query">The string to parse.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> type to parse the string with.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="query"/> or <paramref name="encoding"/> is <c>null</c>.</exception>
        </member>
        <member name="T:MonoCross.Utilities.ImageComposition.ICompositor">
            <summary>
            Defines an image compositor.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.ImageComposition.ICompositor.CreateCompositeImage(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Generates a composite image from the image files at the specified paths.
            </summary>
            <param name="paths">The fully-qualified paths of the images, in order of lowest z-index to highest, to layer together using alpha blending.</param>
            <param name="saveLocation">The fully-qualified path to save the composited image. If the file already exists, it will not be overwritten.</param>
            <remarks>This method assumes that all of the images passed in are the same size. If not, they are resized to fit to the first image.</remarks>
        </member>
        <member name="M:MonoCross.Utilities.ImageComposition.ICompositor.CreateCompositeImage(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            Generates a composite image from the image files at the specified paths.
            </summary>
            <param name="paths">The fully-qualified paths of the images, in order of lowest z-index to highest, to layer together using alpha blending.</param>
            <param name="saveLocation">The fully-qualified path to save the composited image.</param>
            <param name="overwrite"><c>true</c> to overwrite an existing file; otherwise <c>false</c>.</param>
            <remarks>This method assumes that all of the images passed in are the same size. If not, they are resized to fit to the first image.</remarks>
        </member>
        <member name="T:MonoCross.Utilities.ImageComposition.NullCompositor">
            <summary>
            Represents an image compositor with no implementation.  This is compatible with all platforms and targets, and it is useful
            for when a concrete class is required but no implementation is necessary.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.ImageComposition.NullCompositor.CreateCompositeImage(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Generates a composite image from the image files at the specified paths.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.ImageComposition.NullCompositor"/> instance.
            </summary>
            <param name="paths">The fully-qualified paths of the images, in order of lowest z-index to highest, to layer together using alpha blending.</param>
            <param name="saveLocation">The fully-qualified path to save the composited image.</param>
        </member>
        <member name="M:MonoCross.Utilities.ImageComposition.NullCompositor.CreateCompositeImage(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            Generates a composite image from the image files at the specified paths.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.ImageComposition.NullCompositor"/> instance.
            </summary>
            <param name="paths">The fully-qualified paths of the images, in order of lowest z-index to highest, to layer together using alpha blending.</param>
            <param name="saveLocation">The fully-qualified path to save the composited image.</param>
            <param name="overwrite"><c>true</c> to overwrite an existing file; otherwise <c>false</c>.</param>
        </member>
        <member name="T:MonoCross.Utilities.ImageUtility">
            <summary>
            Represents a utility class with methods for image stream manipulation.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.ImageUtility.DecodeImage(System.String)">
            <summary>
            Converts the specified Base64 string to a byte array containing an image.
            </summary>
            <param name="imageData">The string to convert back into an image.</param>
        </member>
        <member name="M:MonoCross.Utilities.ImageUtility.EncodeImageToDataUri(System.Byte[],System.String)">
            <summary>
            Converts the specified byte array representing an image into a data URI.
            </summary>
            <param name="image">The bytes of the image to convert.</param>
            <param name="extension">The extension of the image file.</param>
            <returns>A data URI representing the image.</returns>
        </member>
        <member name="M:MonoCross.Utilities.ImageUtility.DecodeImageFromDataUri(System.String,System.String@)">
            <summary>
            Converts the specified data URI into a byte array representing an image.
            </summary>
            <param name="imageData">The data URI to convert.</param>
            <param name="extension">The extension of the resulting image.</param>
            <returns>A byte array representing the image.</returns>
        </member>
        <member name="M:MonoCross.Utilities.ImageUtility.FromBase64String(System.String)">
            <summary>
            Converts the specified Base64 string to a byte array.
            </summary>
            <param name="s">The Base64 string to convert.</param>
            <returns>The decoded byte array.</returns>
        </member>
        <member name="M:MonoCross.Utilities.ImageUtility.EncodeImage(System.Byte[])">
            <summary>
            Converts the specified byte array representing an image into a Base64 and UrlEncoded string.
            </summary>
            <param name="image">The bytes of the image to convert.</param>
            <returns>The encoded string.</returns>
        </member>
        <member name="T:MonoCross.Utilities.Logging.DiagnosticDebugLogger">
            <summary>
            <see cref="T:MonoCross.Utilities.Logging.ILog"/> implementation that stores no log files and outputs messages using <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)"/>
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Utilities.Logging.DiagnosticDebugLogger"/> class.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.AppendLog(System.Exception,MonoCross.Utilities.Logging.LogMessageType)">
            <summary>
            Appends the specified <see cref="T:System.Exception"/> to the current log file.
            </summary>
            <param name="ex">The exception to append to the current log file.</param>
            <param name="messageType">The type of log message.  If this is less than the current logging level, the exception will not be appended.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.LogEvent(MonoCross.Utilities.Logging.LogEventArgs)">
            <summary>
            Called when a message has been logged.
            </summary>
            <param name="logEventArgs">Contains information about the message that was logged.</param>
        </member>
        <member name="E:MonoCross.Utilities.Logging.DiagnosticDebugLogger.OnLogEvent">
            <summary>
            Occurs when a message has been logged.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Logging.DiagnosticDebugLogger.LogPath">
            <summary>
            Gets the path in which log files are saved.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Logging.DiagnosticDebugLogger.LoggingLevel">
            <summary>
            Gets or sets the level of verbosity for the logger.
            </summary>
            <value>
            The logging level as a <see cref="P:MonoCross.Utilities.Logging.DiagnosticDebugLogger.LoggingLevel" /> value.
            </value>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Info(System.String,System.Object[])">
            <summary>
            Logs an informational message.  This is a level 4 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Info(System.Exception)">
            <summary>
            Logs an informational message.  This is a level 4 logging operation.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Info(System.String,System.Exception,System.Object[])">
            <summary>
            Logs an informational message.  This is a level 4 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="ex">The <see cref="T:System.Exception"/> to append to the message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Warn(System.String,System.Object[])">
            <summary>
            Logs a warning message.  This is a level 5 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Warn(System.Exception)">
            <summary>
            Logs a warning message.  This is a level 5 logging operation.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Warn(System.String,System.Exception,System.Object[])">
            <summary>
            Logs a warning message.  This is a level 5 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="ex">The <see cref="T:System.Exception"/> to append to the message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Debug(System.String,System.Object[])">
            <summary>
            Logs a debug message.  This is a level 2 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Debug(System.Exception)">
            <summary>
            Logs a debug message.  This is a level 2 logging operation.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Debug(System.String,System.Exception,System.Object[])">
            <summary>
            Logs a debug message.  This is a level 2 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="ex">The <see cref="T:System.Exception"/> to append to the message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Error(System.String,System.Object[])">
            <summary>
            Logs an error message.  This is a level 6 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Error(System.Exception)">
            <summary>
            Logs an error message.  This is a level 6 logging operation.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Error(System.String,System.Exception,System.Object[])">
            <summary>
            Logs an error message.  This is a level 6 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="ex">The <see cref="T:System.Exception"/> to append to the message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Fatal(System.String,System.Object[])">
            <summary>
            Logs a fatal error message.  This is a level 7 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Fatal(System.Exception)">
            <summary>
            Logs a fatal error message.  This is a level 7 logging operation.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
            Logs a fatal error message.  This is a level 7 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="ex">The <see cref="T:System.Exception"/> to append to the message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Metric(System.String,System.Object[])">
            <summary>
            Logs a metric message.  This is a level 3 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Metric(System.String,System.Double,System.Object[])">
            <summary>
            Logs a metric message.  This is a level 3 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="milliseconds">The number of milliseconds that an operation took.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Platform(System.String,System.Object[])">
            <summary>
            Logs a message about the current platform.  This is a level 1 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Platform(System.Exception)">
            <summary>
            Logs a message about the current platform.  This is a level 1 logging operation.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.Platform(System.String,System.Exception,System.Object[])">
            <summary>
            Logs a message about the current platform.  This is a level 1 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="ex">The <see cref="T:System.Exception"/> to append to the message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.GetLogFiles">
            <summary>
            Returns a list of log files that current exist in the log path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Logging.DiagnosticDebugLogger.DeleteLogFiles(System.Int32)">
            <summary>
            Deletes any log files that are older than the specified number of days.
            </summary>
            <param name="days">The number of days.  If a log file's age is equal to or greater than this, it will be deleted.</param>
        </member>
        <member name="T:MonoCross.Utilities.Logging.ILog">
            <summary>
            Defines the MonoCross abstract logging utility.
            </summary>
        </member>
        <member name="E:MonoCross.Utilities.Logging.ILog.OnLogEvent">
            <summary>
            Occurs when a message has been logged.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Logging.ILog.LogPath">
            <summary>
            Gets the path in which log files are saved.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Logging.ILog.LoggingLevel">
            <summary>
            Gets or sets the level of verbosity for the logger.
            </summary>
            <value>The logging level as a <see cref="P:MonoCross.Utilities.Logging.ILog.LoggingLevel"/> value.</value>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Info(System.String,System.Object[])">
            <summary>
            Logs an informational message.  This is a level 4 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Info(System.Exception)">
            <summary>
            Logs an informational message.  This is a level 4 logging operation.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Info(System.String,System.Exception,System.Object[])">
            <summary>
            Logs an informational message.  This is a level 4 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="ex">The <see cref="T:System.Exception"/> to append to the message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Debug(System.String,System.Object[])">
            <summary>
            Logs a debug message.  This is a level 2 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Debug(System.Exception)">
            <summary>
            Logs a debug message.  This is a level 2 logging operation.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Debug(System.String,System.Exception,System.Object[])">
            <summary>
            Logs a debug message.  This is a level 2 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="ex">The <see cref="T:System.Exception"/> to append to the message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Warn(System.String,System.Object[])">
            <summary>
            Logs a warning message.  This is a level 5 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Warn(System.Exception)">
            <summary>
            Logs a warning message.  This is a level 5 logging operation.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Warn(System.String,System.Exception,System.Object[])">
            <summary>
            Logs a warning message.  This is a level 5 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="ex">The <see cref="T:System.Exception"/> to append to the message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Error(System.String,System.Object[])">
            <summary>
            Logs an error message.  This is a level 6 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Error(System.Exception)">
            <summary>
            Logs an error message.  This is a level 6 logging operation.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Error(System.String,System.Exception,System.Object[])">
            <summary>
            Logs an error message.  This is a level 6 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="ex">The <see cref="T:System.Exception"/> to append to the message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Fatal(System.String,System.Object[])">
            <summary>
            Logs a fatal error message.  This is a level 7 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Fatal(System.Exception)">
            <summary>
            Logs a fatal error message.  This is a level 7 logging operation.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
            Logs a fatal error message.  This is a level 7 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="ex">The <see cref="T:System.Exception"/> to append to the message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Metric(System.String,System.Object[])">
            <summary>
            Logs a metric message.  This is a level 3 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Metric(System.String,System.Double,System.Object[])">
            <summary>
            Logs a metric message.  This is a level 3 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="milliseconds">The number of milliseconds that an operation took.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Platform(System.String,System.Object[])">
            <summary>
            Logs a message about the current platform.  This is a level 1 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Platform(System.Exception)">
            <summary>
            Logs a message about the current platform.  This is a level 1 logging operation.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.Platform(System.String,System.Exception,System.Object[])">
            <summary>
            Logs a message about the current platform.  This is a level 1 logging operation.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="ex">The <see cref="T:System.Exception"/> to append to the message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.GetLogFiles">
            <summary>
            Returns a list of log files that currently exist in the log path.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Logging.ILog.DeleteLogFiles(System.Int32)">
            <summary>
            Deletes any log files that are older than the specified number of days.
            </summary>
            <param name="days">The number of days.  If a log file's age is equal to or greater than this, it will be deleted.</param>
        </member>
        <member name="T:MonoCross.Utilities.Logging.LogEvent">
            <summary>
            Represents the method that will handle the OnLogEvent event.
            </summary>
            <param name="logEventArgs">Contains information about the message that was logged.</param>
        </member>
        <member name="T:MonoCross.Utilities.Logging.LogEventArgs">
            <summary>
            Provides data for the OnLogEvent event.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Logging.LogEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Utilities.Logging.LogEventArgs"/> class.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Logging.LogEventArgs.#ctor(System.String,MonoCross.Utilities.Logging.LogMessageType)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Utilities.Logging.LogEventArgs"/> class.
            </summary>
            <param name="message">The message that was logged.</param>
            <param name="logLevel">The log level of the message.</param>
        </member>
        <member name="P:MonoCross.Utilities.Logging.LogEventArgs.LogLevel">
            <summary>
            Gets or sets the logging level of the message that was logged.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Logging.LogEventArgs.Message">
            <summary>
            Gets or sets the message that was logged.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Logging.LogEventArgs.Exception">
            <summary>
            Gets or sets the Exception that was logged (if available)
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.Logging.LogHelper">
            <summary>
            Helper methods for building log messages.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Logging.LogHelper.GetFileNameYYYMMDD(System.String,System.String)">
            <summary>
            Gets the file name in the format: YYYMMDD
            </summary>
            <param name="suffix">The suffix after the date.</param>
            <param name="extension">The extension after the suffix.</param>
            <returns>A <see cref="T:System.String"/> representation of the file date.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Logging.LogHelper.BuildExceptionMessage(System.Exception,MonoCross.Utilities.Logging.LogMessageType)">
            <summary>
            Builds a log entry for an exception message.
            </summary>
            <param name="ex">The exception to format.</param>
            <param name="logMessageType">Level of the log message.</param>
            <returns>A <see cref="T:System.String"/> representation of the exception formatted for logging.</returns>
        </member>
        <member name="T:MonoCross.Utilities.Logging.LogMessageType">
            <summary>
            The available logger message levels.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Logging.LogMessageType.Info">
            <summary>
            An informational message.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Logging.LogMessageType.Warn">
            <summary>
            A warning message.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Logging.LogMessageType.Debug">
            <summary>
            A message for debugging.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Logging.LogMessageType.Error">
            <summary>
            A non-fatal error message.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Logging.LogMessageType.Fatal">
            <summary>
            A fatal error message.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Logging.LogMessageType.Metric">
            <summary>
            A metric message.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Logging.LogMessageType.Platform">
            <summary>
            A message about the current platform.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.Logging.LoggingLevel">
            <summary>
            The level of verbosity when logging messages.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Logging.LoggingLevel.Platform">
             <summary>
            Logging level 1.  Platform messages and above are logged.  This is the most verbose logging level.
             </summary>
        </member>
        <member name="F:MonoCross.Utilities.Logging.LoggingLevel.Debug">
             <summary>
            Logging level 2.  Debug messages and above are logged.
             </summary>
        </member>
        <member name="F:MonoCross.Utilities.Logging.LoggingLevel.Metric">
             <summary>
            Logging level 3.  Metric messages and above are logged.
             </summary>
        </member>
        <member name="F:MonoCross.Utilities.Logging.LoggingLevel.Info">
             <summary>
            Logging level 4.  Info messages and above are logged.  
             </summary>
        </member>
        <member name="F:MonoCross.Utilities.Logging.LoggingLevel.Warn">
             <summary>
            Logging level 5.  Warning messages and above are logged.
             </summary>
        </member>
        <member name="F:MonoCross.Utilities.Logging.LoggingLevel.Error">
             <summary>
            Logging level 6.  Error messages and above are logged.
             </summary>
        </member>
        <member name="F:MonoCross.Utilities.Logging.LoggingLevel.Fatal">
             <summary>
            Logging level 7.  Only fatal messages are logged.  This is the least verbose logging level.
             </summary>
        </member>
        <member name="T:MonoCross.Utilities.Network.FetcherAsynch">
            <summary>
            Represents a network fetch utility that performs asynchronously.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.Network.FetcherAsynch.NetworkingEventHandler">
            <summary>
            Represents the method that will handle networking events.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.Network.FetcherAsynch.NetworkingErrorHandler">
            <summary>
            Represents the method that will handle network error events.
            </summary>
            <param name="state"></param>
        </member>
        <member name="E:MonoCross.Utilities.Network.FetcherAsynch.OnDownloadComplete">
            <summary>
            Occurs when an asynch download completes.
            </summary>
        </member>
        <member name="E:MonoCross.Utilities.Network.FetcherAsynch.OnError">
            <summary>
            Occurs when an error happens.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherAsynch.Fetch(System.String)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherAsynch.Fetch(System.String,System.Int32)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="timeout">The request timeout value in milliseconds.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherAsynch.Fetch(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="headers">The headers to be added to the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherAsynch.Fetch(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="headers">The headers to be added to the request.</param>
            <param name="timeout">The request timeout value in milliseconds.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherAsynch.Fetch(System.String,System.String)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="filename">The name of the file to be fetched.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherAsynch.Fetch(System.String,System.String,System.Int32)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="filename">The name of the file to be fetched.</param>
            <param name="timeout">The request timeout value in milliseconds.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherAsynch.Fetch(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="filename">The name of the file to be fetched.</param>
            <param name="headers">The headers to be added to the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherAsynch.Fetch(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="filename">The name of the file to be fetched.</param>
            <param name="headers">The headers to be added to the request.</param>
            <param name="timeout">The request timeout value in milliseconds.</param>
        </member>
        <member name="T:MonoCross.Utilities.Network.FetcherAsynch.FetchParameters">
            <summary>
            Represents a collection of parameters for network fetch calls.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.FetchParameters.Uri">
            <summary>
            Gets or sets the URI of the resource.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.FetchParameters.Headers">
            <summary>
            Gets or sets the headers added to the request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.FetchParameters.FileName">
            <summary>
            Gets or sets the file name of the resource. 
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.FetchParameters.Timeout">
            <summary>
            Gets or sets the timeout value in milliseconds.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.Network.FetcherAsynch.RequestState">
            <summary>
            Represents the state of a network fetch request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.RequestState.FileName">
            <summary>
            Gets or sets the file name of the resource.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.RequestState.Request">
            <summary>
            Gets or sets the web request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.RequestState.Response">
            <summary>
            Gets or sets the web response.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.RequestState.ResponseString">
            <summary>
            Gets or sets the body of the response from the server as a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.RequestState.ResponseBytes">
            <summary>
            Gets or sets the body of the response from the server as an array of <see cref="T:System.Byte"/>s.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.RequestState.Expiration">
            <summary>
            Gets or sets the expiration date and time of the request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.RequestState.Downloaded">
            <summary>
            Gets or sets the date and time that the content of the request was downloaded.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.RequestState.AbsoluteUri">
            <summary>
            Gets or sets the URI of the request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.RequestState.Verb">
            <summary>
            Gets or sets the HTTP verb for the request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.RequestState.StatusCode">
            <summary>
            Gets or sets the status of the response.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.RequestState.WebExceptionStatusCode">
            <summary>
            Gets or sets the status of the response when an exception has occurred during the request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.RequestState.Exception">
            <summary>
            Gets or sets the exception that occurred during the request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.RequestState.ErrorMessage">
            <summary>
            Gets or sets a message describing the error that occurred during the request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.RequestState.Data">
            <summary>
            Gets or sets the headers that are associated with the response.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherAsynch.RequestState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Utilities.Network.FetcherAsynch.RequestState"/> class.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.RequestState.AttemptToRefresh">
            <summary>
            Gets or sets the date and time of the last attempt to refresh.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.FetcherAsynch.RequestState.ResponseHeaders">
            <summary>
            Gets the headers contained in the server's response.
            </summary>
            <value>The response headers.</value>
        </member>
        <member name="T:MonoCross.Utilities.Network.FetcherSynch">
            <summary>
            Represents a network fetch utility that performs synchronously.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherSynch.Fetch(System.String)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherSynch.Fetch(System.String,System.Int32)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="timeout">The request timeout value in milliseconds.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherSynch.Fetch(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="headers">The headers to be added to the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherSynch.Fetch(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="headers">The headers to be added to the request.</param>
            <param name="timeout">The request timeout value in milliseconds.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherSynch.Fetch(System.String,System.String)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="filename">The name of the file to be fetched.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherSynch.Fetch(System.String,System.String,System.Int32)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="filename">The name of the file to be fetched.</param>
            <param name="timeout">The request timeout value in milliseconds.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherSynch.Fetch(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="filename">The name of the file to be fetched.</param>
            <param name="headers">The headers to be added to the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.FetcherSynch.Fetch(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="filename">The name of the file to be fetched.</param>
            <param name="headers">The headers to be added to the request.</param>
            <param name="timeout">The request timeout value in milliseconds.</param>
            <exception cref="T:System.NotSupportedException">Thrown on platforms that do not support <see cref="T:MonoCross.Utilities.Network.FetcherSynch"/>.</exception>
        </member>
        <member name="T:MonoCross.Utilities.Network.IFetcher">
            <summary>
            Defines an abstract network fetch utility.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Network.IFetcher.Fetch(System.String)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.IFetcher.Fetch(System.String,System.Int32)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="timeout">The request timeout value in milliseconds.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.IFetcher.Fetch(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="headers">The headers to be added to the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.IFetcher.Fetch(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="headers">The headers to be added to the request.</param>
            <param name="timeout">The request timeout value in milliseconds.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.IFetcher.Fetch(System.String,System.String)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="filename">The name of the file to be fetched.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.IFetcher.Fetch(System.String,System.String,System.Int32)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="filename">The name of the file to be fetched.</param>
            <param name="timeout">The request timeout value in milliseconds.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.IFetcher.Fetch(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="filename">The name of the file to be fetched.</param>
            <param name="headers">The headers to be added to the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.IFetcher.Fetch(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Fetches the specified URI.
            </summary>
            <param name="uri">The URI of the resource to fetch.</param>
            <param name="filename">The name of the file to be fetched.</param>
            <param name="headers">The headers to be added to the request.</param>
            <param name="timeout">The request timeout value in milliseconds.</param>
        </member>
        <member name="T:MonoCross.Utilities.Network.INetwork">
            <summary>
            Defines an abstract networking interface.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.INetwork.Fetcher">
            <summary>
            Gets the network fetcher.
            </summary>
            <value>The fetcher as an <see cref="T:MonoCross.Utilities.Network.IFetcher"/> instance.</value>
        </member>
        <member name="P:MonoCross.Utilities.Network.INetwork.Poster">
            <summary>
            Gets the network poster.
            </summary>
            <value>The poster as an <see cref="T:MonoCross.Utilities.Network.IPoster"/> instance.</value>
        </member>
        <member name="M:MonoCross.Utilities.Network.INetwork.Get(System.String)">
            <summary>
            Returns the response string of the specified URI.
            </summary>
            <param name="uri">The URI to get the response string of.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.INetwork.Get(System.String,System.Int32)">
            <summary>
            Returns the response string of the specified URI.
            </summary>
            <param name="uri">The URI to get the response string of.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.INetwork.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns the response string of the specified URI.
            </summary>
            <param name="uri">The URI to get the response string of.</param>
            <param name="headers">The headers for the request.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.INetwork.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            Returns the response string of the specified URI.
            </summary>
            <param name="uri">The URI to get the response string of.</param>
            <param name="headers">The headers for the request.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.INetwork.GetBytes(System.String)">
            <summary>
            Returns the response bytes of the specified URI.
            </summary>
            <param name="uri">The URI to get the response bytes of.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.INetwork.GetBytes(System.String,System.Int32)">
            <summary>
            Returns the response bytes of the specified URI.
            </summary>
            <param name="uri">The URI to get the response bytes of.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
            <returns>A byte array representing the response.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.INetwork.GetBytes(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns the response bytes of the specified URI.
            </summary>
            <param name="uri">The URI to get the response bytes of.</param>
            <param name="headers">The headers for the request.</param>
            <returns>A byte array representing the response.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.INetwork.GetBytes(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            Returns the response bytes of the specified URI.
            </summary>
            <param name="uri">The URI to get the response bytes of.</param>
            <param name="headers">The headers for the request.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
            <returns>A byte array representing the response.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.INetwork.PostBytes(System.String,System.Byte[],System.String)">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.INetwork.PostBytes(System.String,System.Byte[],System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="headers">The headers for the request.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.INetwork.PostObject(System.String,System.Object)">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.INetwork.PostObject(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <param name="headers">The headers for the request.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.INetwork.PostString(System.String,System.String)">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.INetwork.PostString(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="headers">The headers for the request.</param>
            <returns></returns>
        </member>
        <member name="P:MonoCross.Utilities.Network.INetwork.RequestInjectionHeaders">
            <summary>
            Gets or sets the request injection headers within the current session.
            </summary>
            <value>A <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> representing the request injection headers.</value>
        </member>
        <member name="T:MonoCross.Utilities.Network.NetworkAsynch">
            <summary>
            Represents a network utility that performs asynchronously.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.NetworkAsynch.Fetcher">
            <summary>
            Gets the network fetcher.
            </summary>
            <value>The fetcher as an <see cref="T:MonoCross.Utilities.Network.IFetcher"/> instance.</value>
        </member>
        <member name="P:MonoCross.Utilities.Network.NetworkAsynch.Poster">
            <summary>
            Gets the network poster.
            </summary>
            <value>The poster as an <see cref="T:MonoCross.Utilities.Network.IPoster"/> instance.</value>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkAsynch.Get(System.String)">
            <summary>
            Returns the response string of the specified URI.
            </summary>
            <param name="uri">The URI to get the response string of.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkAsynch.Get(System.String,System.Int32)">
            <summary>
            Returns the response string of the specified URI.
            </summary>
            <param name="uri">The URI to get the response string of.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkAsynch.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns the response string of the specified URI.
            </summary>
            <param name="uri">The URI to get the response string of.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkAsynch.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            Returns the response string of the specified URI.
            </summary>
            <param name="uri">The URI to get the response string of.</param>
            <param name="headers">The headers for the request.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkAsynch.GetBytes(System.String)">
            <summary>
            Returns the response bytes of the specified URI.
            </summary>
            <param name="uri">The URI to get the response bytes of.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkAsynch.GetBytes(System.String,System.Int32)">
            <summary>
            Returns the response bytes of the specified URI.
            </summary>
            <param name="uri">The URI to get the response bytes of.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
            <returns>
            A byte array representing the response.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkAsynch.GetBytes(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns the response bytes of the specified URI.
            </summary>
            <param name="uri">The URI to get the response bytes of.</param>
            <param name="headers">The headers for the request.</param>
            <returns>
            A byte array representing the response.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkAsynch.GetBytes(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            Returns the response bytes of the specified URI.
            </summary>
            <param name="uri">The URI to get the response bytes of.</param>
            <param name="headers">The headers for the request.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
            <returns>
            A byte array representing the response.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkAsynch.PostBytes(System.String,System.Byte[],System.String)">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkAsynch.PostBytes(System.String,System.Byte[],System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkAsynch.PostObject(System.String,System.Object)">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkAsynch.PostObject(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkAsynch.PostString(System.String,System.String)">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkAsynch.PostString(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="P:MonoCross.Utilities.Network.NetworkAsynch.RequestInjectionHeaders">
            <summary>
            Gets or sets the request injection headers within the current session.
            </summary>
            <value>A <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> representing the request injection headers.</value>
        </member>
        <member name="T:MonoCross.Utilities.Network.NetworkGetMethod">
            <summary>
            The available restrictions that can be imposed on network GET methods.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Network.NetworkGetMethod.Any">
            <summary>
            No restrictions.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Network.NetworkGetMethod.NoCache">
            <summary>
            Caching is not allowed.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.Network.NetworkPostMethod">
            <summary>
            The available restrictions that can be imposed on network POST methods.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Network.NetworkPostMethod.Any">
            <summary>
            No restrictions.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Network.NetworkPostMethod.ImmediateSynchronous">
            <summary>
            Synchronous methods are allowed.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Network.NetworkPostMethod.QueuedAsynchronous">
            <summary>
            Asynchronous methods are allowed.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.Network.NetworkSynch">
            <summary>
            Represents a networking utility that performs synchronously.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.NetworkSynch.Fetcher">
            <summary>
            Gets the network fetcher.
            </summary>
            <value>The fetcher as an <see cref="T:MonoCross.Utilities.Network.IFetcher"/> instance.</value>
        </member>
        <member name="P:MonoCross.Utilities.Network.NetworkSynch.Poster">
            <summary>
            Gets the network poster.
            </summary>
            <value>The poster as an <see cref="T:MonoCross.Utilities.Network.IPoster"/> instance.</value>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkSynch.Get(System.String)">
            <summary>
            Returns the response string of the specified URI.
            </summary>
            <param name="uri">The URI to get the response string of.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkSynch.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns the response string of the specified URI.
            </summary>
            <param name="uri">The URI to get the response string of.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkSynch.Get(System.String,System.Int32)">
            <summary>
            Returns the response string of the specified URI.
            </summary>
            <param name="uri">The URI to get the response string of.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkSynch.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            Returns the response string of the specified URI.
            </summary>
            <param name="uri">The URI to get the response string of.</param>
            <param name="headers">The headers for the request.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkSynch.GetBytes(System.String)">
            <summary>
            Returns the response bytes of the specified URI.
            </summary>
            <param name="uri">The URI to get the response bytes of.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkSynch.GetBytes(System.String,System.Int32)">
            <summary>
            Returns the response bytes of the specified URI.
            </summary>
            <param name="uri">The URI to get the response bytes of.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
            <returns>
            A byte array representing the response.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkSynch.GetBytes(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns the response bytes of the specified URI.
            </summary>
            <param name="uri">The URI to get the response bytes of.</param>
            <param name="headers">The headers for the request.</param>
            <returns>
            A byte array representing the response.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkSynch.GetBytes(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            Returns the response bytes of the specified URI.
            </summary>
            <param name="uri">The URI to get the response bytes of.</param>
            <param name="headers">The headers for the request.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
            <returns>
            A byte array representing the response.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkSynch.PostBytes(System.String,System.Byte[],System.String)">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkSynch.PostBytes(System.String,System.Byte[],System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkSynch.PostObject(System.String,System.Object)">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkSynch.PostObject(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkSynch.PostString(System.String,System.String)">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkSynch.PostString(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="P:MonoCross.Utilities.Network.NetworkSynch.RequestInjectionHeaders">
            <summary>
            Gets or sets the request injection headers within the current session.
            </summary>
            <value>A <see cref="T:MonoCross.Navigation.SerializableDictionary`2"/> representing the request injection headers.</value>
        </member>
        <member name="T:MonoCross.Utilities.Network.NetworkUtils">
            <summary>
            Provides methods for handling HTTP web responses.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkUtils.XmlSerializeObjectToBytes(System.Object)">
            <summary>
            Converts the specified object into a serialized XML string.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>The byte array from the object.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkUtils.StrToByteArray(System.String)">
            <summary>
            Converts the specified string into a byte array using UTF8 encoding.
            </summary>
            <param name="str">The string to convert to a byte array.</param>
            <returns>The byte array from the string.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkUtils.ByteArrayToStr(System.Byte[])">
            <summary>
            Converts the specified byte array into a string using UTF8 encoding.  If the conversion fails, null is returned.
            </summary>
            <param name="byteData">The byte array to convert to a string.</param>
            <returns>The string from the byte array, or null if the conversion fails.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkUtils.StreamToByteArray(System.IO.Stream)">
            <summary>
            Reads data from the specified stream until the end is reached and returns the data as a byte array.
            An IOException is thrown if any of the underlying IO calls fail.
            </summary>
            <param name="stream">The stream to read data from.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkUtils.ExtractResponse(System.Net.HttpWebResponse)">
            <summary>
            Returns a <see cref="T:MonoCross.Utilities.Network.WebResponse"/> object from the specified <see cref="T:System.Net.HttpWebResponse"/>.
            </summary>
            <param name="response">The <see cref="T:System.Net.HttpWebResponse"/> from which to create the <see cref="T:MonoCross.Utilities.Network.WebResponse"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.NetworkUtils.ExtractResponse(System.Net.HttpWebResponse,System.String)">
            <summary>
            Returns a <see cref="T:MonoCross.Utilities.Network.WebResponse"/> object from the specified <see cref="T:System.Net.HttpWebResponse"/> and optionally saves the response bytes to a file.
            </summary>
            <param name="response">The <see cref="T:System.Net.HttpWebResponse"/> from which to create the <see cref="T:MonoCross.Utilities.Network.WebResponse"/>.</param>
            <param name="filename">The name of the file to save the response bytes to, or null if saving is not desired.</param>
            <returns></returns>
        </member>
        <member name="T:MonoCross.Utilities.Network.WebResponse">
            <summary>
            Represents a network response from a web server.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.WebResponse.ResponseBytes">
            <summary>
            Gets or sets the body of the response from the server as an array of <see cref="T:System.Byte"/>s.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.WebResponse.ResponseString">
            <summary>
            Gets or sets the body of the response from the server as a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.WebResponse.ResponseHeaders">
            <summary>
            Gets the headers contained in the server's response.
            </summary>
            <value>The response headers.</value>
        </member>
        <member name="T:MonoCross.Utilities.Network.IPoster">
            <summary>
            Defines an abstract network post utility.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostBytes(System.String,System.Byte[],System.String)">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostBytes(System.String,System.Byte[],System.String,System.String)">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostBytes(System.String,System.Byte[],System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="headers">The headers for the request.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostBytes(System.String,System.Byte[],System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostBytes(System.String,System.Byte[],System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Object)">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
            <param name="postObject">The object to post.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostBytes(System.String,System.Byte[],System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Object,System.Int32)">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
            <param name="postObject">The object to post.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostObject(System.String,System.Object)">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostObject(System.String,System.Object,System.String)">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostObject(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <param name="headers">The headers for the request.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostObject(System.String,System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostObject(System.String,System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostString(System.String,System.String)">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostString(System.String,System.String,System.String)">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostString(System.String,System.String,System.String,System.String)">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostString(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="headers">The headers for the request.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostString(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="headers">The headers for the request.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Network.IPoster.PostString(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
            <returns></returns>
        </member>
        <member name="T:MonoCross.Utilities.Network.PosterAsynch">
            <summary>
            Represents a network post utility that performs asynchronously.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.Network.PosterAsynch.PostRequestEventHandler">
            <summary>
            Represents the method that will handle network post events.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.Network.PosterAsynch.PostRequestErrorHandler">
            <summary>
            Represents the method that will handle network post error events.
            </summary>
            <param name="state"></param>
        </member>
        <member name="E:MonoCross.Utilities.Network.PosterAsynch.OnComplete">
            <summary>
            Occurs when an asynch download completes.
            </summary>
        </member>
        <member name="E:MonoCross.Utilities.Network.PosterAsynch.OnError">
            <summary>
            Occurs when an error occurs.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostString(System.String,System.String)">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostString(System.String,System.String,System.String)">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="contentType">The type of the content being posted.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostString(System.String,System.String,System.String,System.String)">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostString(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostString(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostString(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostObject(System.String,System.Object)">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostObject(System.String,System.Object,System.String)">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <param name="verb">The HTTP verb for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostObject(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostObject(System.String,System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostObject(System.String,System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostBytes(System.String,System.Byte[],System.String)">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostBytes(System.String,System.Byte[],System.String,System.String)">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostBytes(System.String,System.Byte[],System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostBytes(System.String,System.Byte[],System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostBytes(System.String,System.Byte[],System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Object)">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
            <param name="postObject">The object to post.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.PostBytes(System.String,System.Byte[],System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Object,System.Int32)">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
            <param name="postObject">The object to post.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
        </member>
        <member name="T:MonoCross.Utilities.Network.PosterAsynch.RequestParameters">
            <summary>
            Represents a collection of parameters for network post calls.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestParameters.PostBytes">
            <summary>
            Gets or sets the bytes being posted.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestParameters.Uri">
            <summary>
            Gets or sets the URI being posted to.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestParameters.ContentType">
            <summary>
            Gets or sets the type of the content being posted.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestParameters.Verb">
            <summary>
            Gets or sets the HTTP verb for the request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestParameters.Headers">
            <summary>
            Gets or sets the headers added to the request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestParameters.Timeout">
            <summary>
            Gets or sets the timeout value in milliseconds.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.Network.PosterAsynch.RequestState">
            <summary>
            Represents the state of a network post request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestState.Request">
            <summary>
            Gets or sets the web request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestState.Uri">
            <summary>
            Gets or sets the URI of the request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestState.PostBytes">
            <summary>
            Gets or sets the bytes being posted.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestState.ResponseString">
            <summary>
            Gets or sets the body of the response from the server as a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestState.ResponseBytes">
            <summary>
            Gets or sets the body of the response from the server as an array of <see cref="T:System.Byte"/>s.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestState.Expiration">
            <summary>
            Gets or sets the expiration date and time of the request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestState.Downloaded">
            <summary>
            Gets or sets the date and time that the content of the request was downloaded.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestState.Verb">
            <summary>
            Gets or sets the HTTP verb for the request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestState.StatusCode">
            <summary>
            Gets or sets the status of the response.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestState.WebExceptionStatusCode">
            <summary>
            Gets or sets the status of the response when an exception has occurred during the request.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestState.Exception">
            <summary>
            Gets or sets the exception that occurred during the request.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.Network.PosterAsynch.RequestState.RegisteredWaitHandle">
            <summary>
             Represents a handle that has been registered when calling
             System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean).
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Network.PosterAsynch.RequestState.Handle">
            <summary>
            The handle to register when calling RegisterWaitForSingleObject.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestState.ErrorMessage">
            <summary>
            Gets or sets a message describing the error that occurred during the request.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterAsynch.RequestState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Utilities.Network.PosterAsynch.RequestState"/> class.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestState.AttemptToRefresh">
            <summary>
            Gets or sets the date and time of the last attempt to refresh.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Network.PosterAsynch.RequestState.ResponseHeaders">
            <summary>
            Gets the headers contained in the server's response.
            </summary>
            <value>The response headers.</value>
        </member>
        <member name="T:MonoCross.Utilities.Network.PosterSynch">
            <summary>
            Represents a network post utility that performs synchronously.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostString(System.String,System.String)">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostString(System.String,System.String,System.String)">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="contentType">The type of the content being posted.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostString(System.String,System.String,System.String,System.String)">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostString(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostString(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostString(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified string to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postString">The string to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostObject(System.String,System.Object)">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostObject(System.String,System.Object,System.String)">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <param name="verb">The HTTP verb for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostObject(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostObject(System.String,System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostObject(System.String,System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Posts the specified object to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postObject">The object to post.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostBytes(System.String,System.Byte[],System.String)">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostBytes(System.String,System.Byte[],System.String,System.String)">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostBytes(System.String,System.Byte[],System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostBytes(System.String,System.Byte[],System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostBytes(System.String,System.Byte[],System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Object)">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
            <param name="postObject">The object to post.</param>
        </member>
        <member name="M:MonoCross.Utilities.Network.PosterSynch.PostBytes(System.String,System.Byte[],System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Object,System.Int32)">
            <summary>
            Posts the specified bytes to the specified URI.
            </summary>
            <param name="uri">The URI to post to.</param>
            <param name="postBytes">The bytes to post.</param>
            <param name="contentType">The type of the content being posted.</param>
            <param name="verb">The HTTP verb for the request.</param>
            <param name="headers">The headers for the request.</param>
            <param name="postObject">The object to post.</param>
            <param name="timeout">The timeout value in milliseconds.</param>
            <exception cref="T:System.NotSupportedException">Thrown on platforms that do not support <see cref="T:MonoCross.Utilities.Network.PosterSynch"/>.</exception>
        </member>
        <member name="T:MonoCross.Utilities.BasicReflector">
            <summary>
            Represents an object that is able to perform real-time reflection on a <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetAssembly(System.Type)">
            <summary>
            Gets the assembly in which the specified <see cref="T:System.Type"/> is declared.
            </summary>
            <param name="type">The type for which to get the declaring assembly.</param>
            <returns>The <see cref="T:System.Reflection.Assembly"/> in which the specified <see cref="T:System.Type"/> is declared.</returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetTypes(System.Reflection.Assembly)">
            <summary>
            Gets all types for the specified <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The assembly to check.</param>
            <returns>An enumeration of <see cref="T:System.Type"/> objects in the specified <see cref="T:System.Reflection.Assembly"/>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetBaseType(System.Type)">
            <summary>
            Gets the type from which the specified <see cref="T:System.Type"/> directly inherits.
            </summary>
            <param name="type">The child type.</param>
            <returns>
            The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <c>null</c> if the current <c>Type</c> represents the <see cref="T:System.Object" /> class or an interface.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetEvent(System.Type,System.String)">
            <summary>
            Searches for the event with the specified name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The name of the event.</param>
            <returns>
            An object that represents the event with the specified name, if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetEvents(System.Type)">
            <summary>
            Gets all events of the specified <see cref="T:System.Type" />.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            An enumeration of <see cref="T:System.Reflection.EventInfo" /> objects representing all events of the specified <see cref="T:System.Type" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetField(System.Type,System.String)">
            <summary>
            Searches for the field with the specified name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The name of the field.</param>
            <returns>
            An object that represents the field with the specified name, if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetFields(System.Type)">
            <summary>
            Gets all fields of the specified <see cref="T:System.Type" />.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            An enumeration of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields of the specified <see cref="T:System.Type" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetMembers(System.Type)">
            <summary>
            Gets all members of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns>An enumeration of <see cref="T:System.Reflection.MemberInfo"/> objects representing all members of the specified <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetMethod(System.Type,System.String)">
            <summary>
            Searches for the method with the specified name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The name of the method.</param>
            <returns>
            An object that represents the method with the specified name, if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            Searches for the method with the specified name and parameter types.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The name of the method.</param>
            <param name="parameterTypes">The types of the parameters in the order in which they appear in the method signature.</param>
            <returns>An object that represents the method with the specified name and parameter types, if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetMethods(System.Type)">
            <summary>
            Gets all methods of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            An enumeration of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods of the specified <see cref="T:System.Type" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetInterface(System.Type,System.String,System.Boolean)">
            <summary>
            Searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The string containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
            <param name="ignoreCase"><c>true</c> to ignore the case of that part of name that specifies the simple interface name (the part that specifies the namespace must be correctly cased); otherwise <c>false</c> to perform a case-sensitive search for all parts of name.</param>
            <returns>
            An object representing the interface with the specified name, implemented or inherited by <paramref name="type" />, if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetInterfaces(System.Type)">
            <summary>
            Gets all the interfaces implemented or inherited by the specified Type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            An enumeration of Type objects representing all the interfaces implemented or inherited by the specified <see cref="T:System.Type" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetProperty(System.Type,System.String)">
            <summary>
            Searches for the property with the specified name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The name of the property.</param>
            <returns>
            An object representing the property with the specified name, if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetProperties(System.Type)">
            <summary>
            Gets all properties of the specified <see cref="T:System.Type" />.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            An enumeration of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the specified <see cref="T:System.Type" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetCustomAttribute``1(System.Type,System.Boolean)">
            <summary>
            Gets the first instance of a custom attribute applied to the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="type">The type to check.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="type"/>'s inheritance chain to find the attribute; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>The first attribute found that is assignable to <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes applied to the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to check.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="type"/>'s inheritance chain to find the attributes; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>
            An enumeration of custom attributes applied to the <paramref name="type"/>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetCustomAttributes(System.Type,System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes applied to the specified <see cref="T:System.Type"/> and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to check.</param>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="type"/>'s inheritance chain to find the attributes; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>
            An enumeration of custom attributes applied to the <paramref name="type"/>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the first instance of a custom attribute applied to the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="member">The member to check.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="member"/>'s inheritance chain to find the attribute; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>The first attribute found that is assignable to <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the custom attributes applied to the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="member">The member to check.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="member"/>'s inheritance chain to find the attributes; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>
            An enumeration of custom attributes applied to the <paramref name="member"/>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes applied to the specified <see cref="T:System.Type"/> and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="member">The member to check.</param>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="member"/>'s inheritance chain to find the attributes; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>
            An enumeration of custom attributes applied to the <paramref name="member"/>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.HasAttribute(System.Type,System.Type,System.Boolean)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> has an attribute defined.
            </summary>
            <param name="type">The type to check.</param>
            <param name="attributeType">The type of the attribute to look for.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="type"/>'s inheritance chain to find the attributes; otherwise <c>false</c>.</param>
            <returns><c>true</c> if the <see cref="T:System.Type"/> has the attribute defined; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.HasAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> has an attribute defined.
            </summary>
            <param name="member">The member to check.</param>
            <param name="attributeType">The type of the attribute to look for.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="member"/>'s inheritance chain to find the attributes; otherwise <c>false</c>.</param>
            <returns><c>true</c> if the <see cref="T:System.Type"/> has the attribute defined; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.HasInterface(System.Type,System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> implements an interface.
            </summary>
            <param name="type">The type to check.</param>
            <param name="interfaceType">The type of the interface to look for.</param>
            <returns><c>true</c> if the <see cref="T:System.Type"/> implements the interface; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.IsAbstract(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type" /> is abstract and must be overridden.
            </summary>
            <param name="type">The type to check for abstractness.</param>
            <returns>
              <c>true</c> if the <see cref="T:System.Type" /> is abstract; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether another type is assignable from the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="c">The type to compare.</param>
            <returns>
              <c>true</c> if <paramref name="type" /> and <paramref name="c" /> represent the same type,
            or if <paramref name="type" /> is in the inheritance hierarchy of <paramref name="c" />,
            or if <paramref name="type" /> is an interface that <paramref name="c" /> implements,
            or if <paramref name="c" /> is a generic type parameter and <paramref name="type" /> represents one of the constraints of c,
            or if <paramref name="c" /> represents a value type and <paramref name="type" /> represents <see cref="T:System.Nullable`1" />.
            <c>false</c> if none of these conditions are true, or if <paramref name="c" /> is <c>null</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.IsClass(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type" /> is a class; that is, not a value type or interface.
            </summary>
            <param name="type">The type to check for classhood.</param>
            <returns>
              <c>true</c> if the <see cref="T:System.Type" /> is a class; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.IsEnum(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> is an enum.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if the <see cref="T:System.Type"/> is an enum; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.IsInterface(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type" /> is interface; that is, not a class or a value type.
            </summary>
            <param name="type">The type to check as an interface.</param>
            <returns>
              <c>true</c> if the <see cref="T:System.Type" /> is an interface; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.IsPrimitive(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> is a primitive.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if the <see cref="T:System.Type"/> is a primitive; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.IsSubclassOf(System.Type,System.Type)">
            <summary>
            Determines whether the class represented by the current <see cref="T:System.Type" /> derives from the class represented by the specified <see cref="T:System.Type" />.
            </summary>
            <param name="type">The type.</param>
            <param name="baseType">Type of the base.</param>
            <returns>
              <c>true</c> if the <c>Type</c> represented by the <paramref name="type" /> parameter and the <c>Type</c> represented by the <paramref name="baseType" /> parameter represent classes, and <paramref name="type" />'s class derives from <paramref name="baseType" />; otherwise <c>false</c>.
            This method also returns <c>false</c> if <paramref name="type" /> and <paramref name="baseType" /> represent the same class.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.BasicReflector.IsValueType(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> is a value type.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if the <see cref="T:System.Type"/> is a value type; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:MonoCross.Utilities.NullReflector">
            <summary>
            Represents a type reflection utility with no implementation.  This is compatible with all platforms and targets, and it is useful
            for when a concrete class is required but no implementation is necessary.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetTypes(System.Reflection.Assembly)">
            <summary>
            Gets all types for the specified <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The assembly to check.</param>
            <returns>An enumeration of <see cref="T:System.Type"/> objects in the specified <see cref="T:System.Reflection.Assembly"/>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetBaseType(System.Type)">
            <summary>
            Gets the type from which the specified <see cref="T:System.Type" /> directly inherits.
            </summary>
            <param name="type">The child type.</param>
            <returns>
            The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <c>null</c> if the current <c>Type</c> represents the <see cref="T:System.Object" /> class or an interface.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetEvent(System.Type,System.String)">
            <summary>
            Searches for the event with the specified name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The name of the event.</param>
            <returns>
            An object that represents the event with the specified name, if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetEvents(System.Type)">
            <summary>
            Gets all events of the specified <see cref="T:System.Type" />.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            An enumeration of <see cref="T:System.Reflection.EventInfo" /> objects representing all events of the specified <see cref="T:System.Type" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetField(System.Type,System.String)">
            <summary>
            Searches for the field with the specified name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The name of the field.</param>
            <returns>
            An object that represents the field with the specified name, if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetFields(System.Type)">
            <summary>
            Gets all fields of the specified <see cref="T:System.Type" />.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            An enumeration of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields of the specified <see cref="T:System.Type" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetMembers(System.Type)">
            <summary>
            Gets all members of the specified <see cref="T:System.Type" />.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            An enumeration of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members of the specified <see cref="T:System.Type" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetMethod(System.Type,System.String)">
            <summary>
            Searches for the method with the specified name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The name of the method.</param>
            <returns>
            An object that represents the method with the specified name, if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetMethods(System.Type)">
            <summary>
            Gets all methods of the specified <see cref="T:System.Type" />.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            An enumeration of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods of the specified <see cref="T:System.Type" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetInterface(System.Type,System.String,System.Boolean)">
            <summary>
            Searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The string containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
            <param name="ignoreCase"><c>true</c> to ignore the case of that part of name that specifies the simple interface name (the part that specifies the namespace must be correctly cased); otherwise <c>false</c> to perform a case-sensitive search for all parts of name.</param>
            <returns>
            An object representing the interface with the specified name, implemented or inherited by <paramref name="type" />, if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetInterfaces(System.Type)">
            <summary>
            Gets all the interfaces implemented or inherited by the specified Type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            An enumeration of Type objects representing all the interfaces implemented or inherited by the specified <see cref="T:System.Type" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetProperty(System.Type,System.String)">
            <summary>
            Searches for the property with the specified name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The name of the property.</param>
            <returns>
            An object representing the property with the specified name, if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetProperties(System.Type)">
            <summary>
            Gets all properties of the specified <see cref="T:System.Type" />.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            An enumeration of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the specified <see cref="T:System.Type" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetCustomAttribute``1(System.Type,System.Boolean)">
            <summary>
            Gets the first instance of a custom attribute applied to the specified <see cref="T:System.Type" />.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="type">The type to check.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="type" />'s inheritance chain to find the attribute; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>
            The first attribute found that is assignable to <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes applied to the specified <see cref="T:System.Type" />.
            </summary>
            <param name="type">The type to check.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="type" />'s inheritance chain to find the attributes; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>
            An enumeration of custom attributes applied to the <paramref name="type" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetCustomAttributes(System.Type,System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes applied to the specified <see cref="T:System.Type" /> and identified by <see cref="T:System.Type" />.
            </summary>
            <param name="type">The type to check.</param>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="type" />'s inheritance chain to find the attributes; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>
            An enumeration of custom attributes applied to the <paramref name="type" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the first instance of a custom attribute applied to the specified <see cref="T:System.Type" />.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="member">The member to check.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="member" />'s inheritance chain to find the attribute; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>
            The first attribute found that is assignable to <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the custom attributes applied to the specified <see cref="T:System.Type" />.
            </summary>
            <param name="member">The member to check.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="member" />'s inheritance chain to find the attributes; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>
            An enumeration of custom attributes applied to the <paramref name="member" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes applied to the specified <see cref="T:System.Type" /> and identified by <see cref="T:System.Type" />.
            </summary>
            <param name="member">The member to check.</param>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="member" />'s inheritance chain to find the attributes; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>
            An enumeration of custom attributes applied to the <paramref name="member" />.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.HasInterface(System.Type,System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type" /> implements an interface.
            </summary>
            <param name="type">The type to check.</param>
            <param name="interfaceType">The type of the interface to look for.</param>
            <returns>
              <c>true</c> if the <see cref="T:System.Type" /> implements the interface; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.IsAbstract(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type" /> is abstract and must be overridden.
            </summary>
            <param name="type">The type to check for abstractness.</param>
            <returns>
              <c>true</c> if the <see cref="T:System.Type" /> is abstract; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether another type is assignable from the specified <see cref="T:System.Type" />.
            </summary>
            <param name="type">The type.</param>
            <param name="c">The type to compare.</param>
            <returns>
            <c>true</c> if <paramref name="type" /> and <paramref name="c" /> represent the same type,
            or if <paramref name="type" /> is in the inheritance hierarchy of <paramref name="c" />,
            or if <paramref name="type" /> is an interface that <paramref name="c" /> implements,
            or if <paramref name="c" /> is a generic type parameter and <paramref name="type" /> represents one of the constraints of c,
            or if <paramref name="c" /> represents a value type and <paramref name="type" /> represents <see cref="T:System.Nullable`1" />.
            <c>false</c> if none of these conditions are true, or if <paramref name="c" /> is <c>null</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.IsClass(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type" /> is a class; that is, not a value type or interface.
            </summary>
            <param name="type">The type to check for classhood.</param>
            <returns>
              <c>true</c> if the <see cref="T:System.Type" /> is a class; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.IsInterface(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type" /> is interface; that is, not a class or a value type.
            </summary>
            <param name="type">The type to check as an interface.</param>
            <returns>
              <c>true</c> if the <see cref="T:System.Type" /> is an interface; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.IsSubclassOf(System.Type,System.Type)">
            <summary>
            Determines whether the class represented by the specified <see cref="T:System.Type" /> derives from the class represented by the another <see cref="T:System.Type" />.
            </summary>
            <param name="type">The type.</param>
            <param name="baseType">Type of the base.</param>
            <returns>
            <c>true</c> if the <c>Type</c> represented by the <paramref name="type" /> parameter and the <c>Type</c> represented by the <paramref name="baseType" /> parameter represent classes, and <paramref name="type" />'s class derives from <paramref name="baseType" />; otherwise <c>false</c>.
            This method also returns <c>false</c> if <paramref name="type" /> and <paramref name="baseType" /> represent the same class.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.IsPrimitive(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type" /> is a primitive.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
              <c>true</c> if the <see cref="T:System.Type" /> is a primitive; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.IsEnum(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type" /> is an enum.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
              <c>true</c> if the <see cref="T:System.Type" /> is an enum; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.IsValueType(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type" /> is a value type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
              <c>true</c> if the <see cref="T:System.Type" /> is a value type; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            Searches for the method with the specified name and parameter types.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The name of the method.</param>
            <param name="parameterTypes">The types of the parameters in the order in which they appear in the method signature.</param>
            <returns>
            An object that represents the method with the specified name and parameter types, if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.HasAttribute(System.Type,System.Type,System.Boolean)">
            <summary>
            Determines whether the specified <see cref="T:System.Type" /> has an attribute defined.
            </summary>
            <param name="type">The type to check.</param>
            <param name="attributeType">The type of the attribute to look for.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="type" />'s inheritance chain to find the attributes; otherwise <c>false</c>.</param>
            <returns>
              <c>true</c> if the <see cref="T:System.Type" /> has the attribute defined; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.HasAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Determines whether the specified <see cref="T:System.Type" /> has an attribute defined.
            </summary>
            <param name="member">The type to check.</param>
            <param name="attributeType">The type of the attribute to look for.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="member" />'s inheritance chain to find the attributes; otherwise <c>false</c>.</param>
            <returns>
              <c>true</c> if the <see cref="T:System.Type" /> has the attribute defined; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.NullReflector.GetAssembly(System.Type)">
            <summary>
            Gets the assembly in which the specified <see cref="T:System.Type" /> is declared.
            </summary>
            <param name="type">The type for which to get the declaring assembly.</param>
            <returns>
            The <see cref="T:System.Reflection.Assembly" /> in which the specified <see cref="T:System.Type" /> is declared.
            </returns>
        </member>
        <member name="T:MonoCross.Utilities.Resources.BasicResources">
            <summary>
            An <see cref="T:MonoCross.Utilities.Resources.IResources"/> implementation that provides support for getting strings.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Resources.BasicResources.Resources">
            <summary>
            The resources managed by this instance.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Resources.BasicResources.Count">
            <summary>
            Gets the number of resource providers contained in this instance.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Resources.BasicResources.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Utilities.Resources.BasicResources"/> class.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Resources.BasicResources.RemoveAllResources">
            <summary>
            Removes all resource providers from this instance.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Resources.BasicResources.AddResources(System.String,System.Reflection.Assembly)">
            <summary>
            Adds a resource manager that provides convenient access to culture-specific resources at run time.
            </summary>
            <param name="baseName">The root name of the resource file without its extension but including any fully qualified namespace name. For example, the root name for the resource file named MyApplication.MyResource.en-US.resources is MyApplication.MyResource.</param>
            <param name="assembly">The main assembly for the resources.</param>
        </member>
        <member name="M:MonoCross.Utilities.Resources.BasicResources.AddResources(System.Reflection.Assembly)">
            <summary>
            Adds resource managers that provide convenient access to culture-specific resources at run time.
            </summary>
            <param name="assembly">The main assembly for the resources.</param>
        </member>
        <member name="M:MonoCross.Utilities.Resources.BasicResources.GetObject(System.String)">
            <summary>
            Gets the value of the specified non-string resource localized for the current culture.
            </summary>
            <param name="key">The name of the resource to retrieve.</param>
            <returns>
            The value of the resource localized for the current culture, or <c>null</c> if <paramref name="key" /> cannot be found in a resource set.
            </returns>
            <exception cref="T:System.NotSupportedException">GetObject is not supported in BasicResources</exception>
        </member>
        <member name="M:MonoCross.Utilities.Resources.BasicResources.GetObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the value of the specified non-string resource localized for the specified culture.
            </summary>
            <param name="key">The name of the resource to retrieve.</param>
            <param name="culture">An object that represents the culture for which the resource is localized.</param>
            <returns>
            The value of the resource localized for the specified culture, or <c>null</c> if <paramref name="key" /> cannot be found in a resource set.
            </returns>
            <exception cref="T:System.NotSupportedException">GetObject is not supported in BasicResources</exception>
        </member>
        <member name="M:MonoCross.Utilities.Resources.BasicResources.GetString(System.String)">
            <summary>
            Returns the value of the string resource localized for the current culture.
            </summary>
            <param name="key">The name of the resource to retrieve.</param>
            <returns>
            The value of the resource localized for the current culture, or <c>null</c> if <paramref name="key" /> cannot be found in a resource set.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Resources.BasicResources.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the value of the string resource localized for the specified culture.
            </summary>
            <param name="key">The name of the resource to retrieve.</param>
            <param name="culture">An object that represents the culture for which the resource is localized.</param>
            <returns>
            The value of the resource localized for the specified culture, or <c>null</c> if <paramref name="key" /> cannot be found in a resource set.
            </returns>
        </member>
        <member name="T:MonoCross.Utilities.Resources.IResources">
            <summary>
            Describes the functionality of a Resources provider.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Resources.IResources.Count">
            <summary>
            Gets the number of resource providers contained in this instance.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Resources.IResources.RemoveAllResources">
            <summary>
            Removes all resource providers from this instance.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Resources.IResources.AddResources(System.String,System.Reflection.Assembly)">
            <summary>
            Adds a resource manager that provides convenient access to culture-specific resources at run time.
            </summary>
            <param name="baseName">The root name of the resource file without its extension but including any fully qualified namespace name. For example, the root name for the resource file named MyApplication.MyResource.en-US.resources is MyApplication.MyResource. </param>
            <param name="assembly">The main assembly for the resources.</param>
        </member>
        <member name="M:MonoCross.Utilities.Resources.IResources.AddResources(System.Reflection.Assembly)">
            <summary>
            Adds a resource manager that provides convenient access to culture-specific resources at run time.
            </summary>
            <param name="assembly">The main assembly for the resources.</param>
        </member>
        <member name="M:MonoCross.Utilities.Resources.IResources.GetObject(System.String)">
            <summary>
            Gets the value of the specified non-string resource localized for the current culture.
            </summary>
            <param name="key">The name of the resource to retrieve.</param>
            <returns>The value of the resource localized for the current culture, or <c>null</c> if <paramref name="key"/> cannot be found in a resource set.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Resources.IResources.GetObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the value of the specified non-string resource localized for the specified culture.
            </summary>
            <param name="key">The name of the resource to retrieve.</param>
            <param name="culture">An object that represents the culture for which the resource is localized.</param>
            <returns>The value of the resource localized for the specified culture, or <c>null</c> if <paramref name="key"/> cannot be found in a resource set.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Resources.IResources.GetString(System.String)">
            <summary>
            Returns the value of the string resource localized for the current culture.
            </summary>
            <param name="key">The name of the resource to retrieve.</param>
            <returns>The value of the resource localized for the current culture, or <c>null</c> if <paramref name="key"/> cannot be found in a resource set.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Resources.IResources.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the value of the string resource localized for the specified culture.
            </summary>
            <param name="key">The name of the resource to retrieve.</param>
            <param name="culture">An object that represents the culture for which the resource is localized.</param>
            <returns>The value of the resource localized for the specified culture, or <c>null</c> if <paramref name="key"/> cannot be found in a resource set.</returns>
        </member>
        <member name="T:MonoCross.Utilities.Resources.NullResources">
            <summary>
            An <see cref="T:MonoCross.Utilities.Resources.IResources"/> implementation that does not provide resources.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Resources.NullResources.Count">
            <summary>
            Gets the number of resource providers contained in this instance.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Resources.NullResources.RemoveAllResources">
            <summary>
            Removes all resource providers from this instance.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Resources.NullResources.AddResources(System.String,System.Reflection.Assembly)">
            <summary>
            Adds a resource manager that provides convenient access to culture-specific resources at run time.
            </summary>
            <param name="baseName">The root name of the resource file without its extension but including any fully qualified namespace name. For example, the root name for the resource file named MyApplication.MyResource.en-US.resources is MyApplication.MyResource.</param>
            <param name="assembly">The main assembly for the resources.</param>
        </member>
        <member name="M:MonoCross.Utilities.Resources.NullResources.AddResources(System.Reflection.Assembly)">
            <summary>
            Adds a resource manager that provides convenient access to culture-specific resources at run time.
            </summary>
            <param name="assembly">The main assembly for the resources.</param>
        </member>
        <member name="M:MonoCross.Utilities.Resources.NullResources.GetObject(System.String)">
            <summary>
            Gets the value of the specified non-string resource localized for the current culture.
            </summary>
            <param name="key">The name of the resource to retrieve.</param>
            <returns>
            The value of the resource localized for the current culture, or <c>null</c> if <paramref name="key" /> cannot be found in a resource set.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Resources.NullResources.GetObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the value of the specified non-string resource localized for the specified culture.
            </summary>
            <param name="key">The name of the resource to retrieve.</param>
            <param name="culture">An object that represents the culture for which the resource is localized.</param>
            <returns>
            The value of the resource localized for the specified culture, or <c>null</c> if <paramref name="key" /> cannot be found in a resource set.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Resources.NullResources.GetString(System.String)">
            <summary>
            Returns the value of the string resource localized for the current culture.
            </summary>
            <param name="key">The name of the resource to retrieve.</param>
            <returns>
            The value of the resource localized for the current culture, or <c>null</c> if <paramref name="key" /> cannot be found in a resource set.
            </returns>
        </member>
        <member name="M:MonoCross.Utilities.Resources.NullResources.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the value of the string resource localized for the specified culture.
            </summary>
            <param name="key">The name of the resource to retrieve.</param>
            <param name="culture">An object that represents the culture for which the resource is localized.</param>
            <returns>
            The value of the resource localized for the specified culture, or <c>null</c> if <paramref name="key" /> cannot be found in a resource set.
            </returns>
        </member>
        <member name="T:MonoCross.Utilities.Serialization.BaseSerializer`1">
            <summary>
            Represents a base serializer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.SerializeObject(`0)">
            <summary>
            Serializes the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.SerializeObject(`0,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Serializes the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="mode">The encryption mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.SerializeObject(`0,System.String,System.Byte[])">
            <summary>
            Serializes the object.
            </summary>
            <param name="obj">The obj to serialize.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.SerializeObjectClear(`0)">
            <summary>
            Serializes the object clear.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.SerializeObjectToBytes(`0)">
            <summary>
            Serializes the object to bytes.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.SerializeObjectToBytes(`0,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Serializes the object to bytes.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="mode">The encription mode of the serialization.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.SerializeObjectToBytes(`0,System.String,System.Byte[])">
            <summary>
            Serializes the object to bytes.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.SerializeObjectToBytesClear(`0)">
            <summary>
            Serializes the object to bytes clear.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.SerializeList(System.Collections.Generic.List{`0})">
            <summary>
            Serializes the list.
            </summary>
            <param name="list">The list to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.SerializeList(System.Collections.Generic.List{`0},MonoCross.Utilities.EncryptionMode)">
            <summary>
            Serializes the list.
            </summary>
            <param name="list">The list to serialize.</param>
            <param name="mode">The encryption mode of the serialization.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.SerializeList(System.Collections.Generic.List{`0},System.String,System.Byte[])">
            <summary>
            Serializes the list.
            </summary>
            <param name="list">The list to serialize.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.SerializeListClear(System.Collections.Generic.List{`0})">
            <summary>
            Serializes the list clear.
            </summary>
            <param name="list">The list to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.SerializeListToBytes(System.Collections.Generic.List{`0})">
            <summary>
            Serializes the list to bytes.
            </summary>
            <param name="list">The list to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.SerializeListToBytes(System.Collections.Generic.List{`0},MonoCross.Utilities.EncryptionMode)">
            <summary>
            Serializes the list to bytes.
            </summary>
            <param name="list">The list to serialize.</param>
            <param name="mode">The encryption mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.SerializeListToBytes(System.Collections.Generic.List{`0},System.String,System.Byte[])">
            <summary>
            Serializes the list to bytes.
            </summary>
            <param name="list">The list to serialized.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
            <returns>The serialized list as an encrypted byte array.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.SerializeListToBytesClear(System.Collections.Generic.List{`0})">
            <summary>
            Serializes the list to bytes clear.
            </summary>
            <param name="list">The list to serialize.</param>
            <returns>The serialized list as a byte array.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.DeserializeObject(System.String)">
            <summary>
            Deserializes the object.
            </summary>
            <param name="value">The serialized object value.</param>
            <returns>A deserialized <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.DeserializeObject(System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Deserializes the object.
            </summary>
            <param name="value">The serialized object value.</param>
            <param name="mode">The encryption mode.</param>
            <returns>A deserialized <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.DeserializeObject(System.String,System.String,System.Byte[])">
            <summary>
            Deserializes the object.
            </summary>
            <param name="value">The serialized object value.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
            <returns>A deserialized <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.DeserializeObjectClear(System.String)">
            <summary>
            Deserializes the object clear.
            </summary>
            <param name="value">The serialized object value.</param>
            <returns>A deserialized <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.DeserializeObject(System.Byte[])">
            <summary>
            Deserializes the object.
            </summary>
            <param name="value">The serialized object value.</param>
            <returns>A deserialized <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.DeserializeObject(System.Byte[],MonoCross.Utilities.EncryptionMode)">
            <summary>
            Deserializes the object.
            </summary>
            <param name="value">The serialized object value.</param>
            <param name="mode">The encryption mode.</param>
            <returns>A deserialized <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.DeserializeObject(System.Byte[],System.String,System.Byte[])">
            <summary>
            Deserializes the object.
            </summary>
            <param name="value">The serialized object value.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
            <returns>A deserialized <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.DeserializeObjectClear(System.Byte[])">
            <summary>
            Deserializes the object clear.
            </summary>
            <param name="value">The serialized object value.</param>
            <returns>A deserialized <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.DeserializeList(System.String)">
            <summary>
            Deserializes the list.
            </summary>
            <param name="value">The serialized list value.</param>
            <returns>A deserialized <see cref="T:System.Collections.Generic.List`1"/> instance.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.DeserializeList(System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Deserializes the list.
            </summary>
            <param name="value">The serialized list value.</param>
            <param name="mode">The encryption mode.</param>
            <returns>A deserialized <see cref="T:System.Collections.Generic.List`1"/> instance.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.DeserializeList(System.String,System.String,System.Byte[])">
            <summary>
            Deserializes the list.
            </summary>
            <param name="value">The serialized list value.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
            <returns>A deserialized <see cref="T:System.Collections.Generic.List`1"/> instance.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.DeserializeList(System.Byte[])">
            <summary>
            Deserializes the list.
            </summary>
            <param name="value">The serialized list value.</param>
            <returns>A deserialized <see cref="T:System.Collections.Generic.List`1"/> instance.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.DeserializeList(System.Byte[],MonoCross.Utilities.EncryptionMode)">
            <summary>
            Deserializes the list.
            </summary>
            <param name="value">The serialized list value.</param>
            <param name="mode">The encryption mode.</param>
            <returns>A deserialized <see cref="T:System.Collections.Generic.List`1"/> instance.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.DeserializeList(System.Byte[],System.String,System.Byte[])">
            <summary>
            Deserializes the list.
            </summary>
            <param name="value">The serialized list value.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
            <returns>A deserialized <see cref="T:System.Collections.Generic.List`1"/> instance.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.DeserializeListClear(System.String)">
            <summary>
            Deserializes the list clear.
            </summary>
            <param name="value">The serialized list value.</param>
            <returns>A deserialized <see cref="T:System.Collections.Generic.List`1"/> instance.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.BaseSerializer`1.DeserializeListClear(System.Byte[])">
            <summary>
            Deserializes the list clear.
            </summary>
            <param name="value">The serialized list value.</param>
            <returns>A deserialized <see cref="T:System.Collections.Generic.List`1"/> instance.</returns>
        </member>
        <member name="T:MonoCross.Utilities.Serialization.ISerializer`1">
            <summary>
            Defines the MonoCross abstract serialization utility.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeObjectToFile(`0,System.String)">
            <summary>
            Serializes the object to file.
            </summary>
            <param name="obj">The obj.</param>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeObjectToFile(`0,System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Serializes the object to file.
            </summary>
            <param name="obj">The obj.</param>
            <param name="filename">The filename.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeObjectToFile(`0,System.String,System.String,System.Byte[])">
            <summary>
            Serializes the object to file.
            </summary>
            <param name="obj">The obj.</param>
            <param name="filename">The filename.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeListToFile(System.Collections.Generic.List{`0},System.String)">
            <summary>
            Serializes the list to file.
            </summary>
            <param name="list">The list.</param>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeListToFile(System.Collections.Generic.List{`0},System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Serializes the list to file.
            </summary>
            <param name="list">The list.</param>
            <param name="filename">The filename.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeListToFile(System.Collections.Generic.List{`0},System.String,System.String,System.Byte[])">
            <summary>
            Serializes the list to file.
            </summary>
            <param name="list">The list.</param>
            <param name="filename">The filename.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeObjectToBytes(`0)">
            <summary>
            Serializes the object to bytes.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeObjectToBytes(`0,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Serializes the object to bytes.
            </summary>
            <param name="obj">The obj.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeObjectToBytes(`0,System.String,System.Byte[])">
            <summary>
            Serializes the object to bytes.
            </summary>
            <param name="obj">The obj.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeListToBytes(System.Collections.Generic.List{`0})">
            <summary>
            Serializes the list to bytes.
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeListToBytes(System.Collections.Generic.List{`0},MonoCross.Utilities.EncryptionMode)">
            <summary>
            Serializes the list to bytes.
            </summary>
            <param name="list">The list.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeListToBytes(System.Collections.Generic.List{`0},System.String,System.Byte[])">
            <summary>
            Serializes the list to bytes.
            </summary>
            <param name="list">The list.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeObject(`0)">
            <summary>
            Serializes the object.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeObject(`0,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Serializes the object.
            </summary>
            <param name="obj">The obj.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeObject(`0,System.String,System.Byte[])">
            <summary>
            Serializes the object.
            </summary>
            <param name="obj">The obj.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeList(System.Collections.Generic.List{`0})">
            <summary>
            Serializes the list.
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeList(System.Collections.Generic.List{`0},MonoCross.Utilities.EncryptionMode)">
            <summary>
            Serializes the list.
            </summary>
            <param name="list">The list.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.SerializeList(System.Collections.Generic.List{`0},System.String,System.Byte[])">
            <summary>
            Serializes the list.
            </summary>
            <param name="list">The list.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeObjectFromFile(System.String)">
            <summary>
            Deserializes the object from file.
            </summary>
            <param name="filename">The filename.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeObjectFromFile(System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Deserializes the object from file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeObjectFromFile(System.String,System.String,System.Byte[])">
            <summary>
            Deserializes the object from file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeListFromFile(System.String)">
            <summary>
            Deserializes the list from file.
            </summary>
            <param name="filename">The filename.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeListFromFile(System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Deserializes the list from file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeListFromFile(System.String,System.String,System.Byte[])">
            <summary>
            Deserializes the list from file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeObject(System.String)">
            <summary>
            Deserializes the object.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeObject(System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Deserializes the object.
            </summary>
            <param name="value">The value.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeObject(System.String,System.String,System.Byte[])">
            <summary>
            Deserializes the object.
            </summary>
            <param name="value">The value.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeObject(System.Byte[])">
            <summary>
            Deserializes the object.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeObject(System.Byte[],MonoCross.Utilities.EncryptionMode)">
            <summary>
            Deserializes the object.
            </summary>
            <param name="value">The value.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeObject(System.Byte[],System.String,System.Byte[])">
            <summary>
            Deserializes the object.
            </summary>
            <param name="value">The value.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeList(System.String)">
            <summary>
            Deserializes the list.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeList(System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Deserializes the list.
            </summary>
            <param name="value">The value.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeList(System.String,System.String,System.Byte[])">
            <summary>
            Deserializes the list.
            </summary>
            <param name="value">The value.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeList(System.Byte[])">
            <summary>
            Deserializes the list.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeList(System.Byte[],MonoCross.Utilities.EncryptionMode)">
            <summary>
            Deserializes the list.
            </summary>
            <param name="value">The value.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.ISerializer`1.DeserializeList(System.Byte[],System.String,System.Byte[])">
            <summary>
            Deserializes the list.
            </summary>
            <param name="value">The value.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
            <returns></returns>
        </member>
        <member name="P:MonoCross.Utilities.Serialization.ISerializer`1.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="T:MonoCross.Utilities.Serialization.SerializationFormat">
            <summary>
            Specifies the valid serialization formats.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Serialization.SerializationFormat.JSON">
            <summary>
            Formats serialized objects in JSON
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Serialization.SerializationFormat.XML">
            <summary>
            Formats serialized objects in XML.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Serialization.SerializationFormat.CUSTOM">
            <summary>
            Formats serialized objects in a custom defined format.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Serialization.SerializationFormat.ODATA">
            <summary>
            Formats serialized objects in a OData JSON light.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.Serialization.SerializerFactory">
            <summary>
            Represents a factory for creating object serializers.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerFactory.Create``1">
            <summary>
            Creates this instance.
            </summary>
            <typeparam name="T">The type of the object to serialize</typeparam>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerFactory.Create``1(System.Type[])">
            <summary>
            Creates an ISerializer instance using the specified aux types.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="auxTypes">The aux types.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerFactory.Create``1(MonoCross.Utilities.Serialization.SerializationFormat)">
            <summary>
            Creates an ISerializer instance using the specified format.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerFactory.Create``1(MonoCross.Utilities.Serialization.SerializationFormat,System.Type)">
            <summary>
            Creates an ISerializer instance using the specified format.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="format">The format.</param>
            <param name="customSerializerType">Type of the custom serializer.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerFactory.Create``1(MonoCross.Utilities.Serialization.SerializationFormat,System.Type[])">
            <summary>
            Creates an ISerializer instance using the specified format.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="format">The format.</param>
            <param name="auxTypes">The aux types.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerFactory.Create``1(MonoCross.Utilities.Serialization.SerializationFormat,System.Type[],System.Type)">
            <summary>
            Creates an ISerializer instance using the specified format.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="format">The format.</param>
            <param name="auxTypes">The aux types.</param>
            <param name="customSerializerType">Type of the custom serializer.</param>
            <returns></returns>
        </member>
        <member name="T:MonoCross.Utilities.Serialization.SerializerJson`1">
            <summary>
            The JSON serializer utility.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MonoCross.Utilities.Serialization.SerializerJson`1.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.SerializeObjectToFile(`0,System.String)">
            <summary>
            Serializes the object to file.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="filename">The filename for the serialized object.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.SerializeObjectToFile(`0,System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Serializes the object to file.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="filename">The filename of the serialized object.</param>
            <param name="mode">The encryption mode for the serialization.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.SerializeObjectToFile(`0,System.String,System.String,System.Byte[])">
            <summary>
            Serializes the object to file.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="filename">The filename of the serialized object.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.SerializeObjectClear(`0)">
            <summary>
            Serializes the object clear.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.SerializeObjectToBytesClear(`0)">
            <summary>
            Serializes the object to bytes clear.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.DeserializeObjectFromFile(System.String)">
            <summary>
            Deserializes the object from file.
            </summary>
            <param name="filename">The filename.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.DeserializeObjectFromFile(System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Deserializes the object from file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="mode">The encryption mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.DeserializeObjectFromFile(System.String,System.String,System.Byte[])">
            <summary>
            Deserializes the object from file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="key">The encrtyption key.</param>
            <param name="salt">The enctryption salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.DeserializeObjectClear(System.String)">
            <summary>
            Deserializes the object clear.
            </summary>
            <param name="value">The serialized object value.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.SerializeListToFile(System.Collections.Generic.List{`0},System.String)">
            <summary>
            Serializes the list to file.
            </summary>
            <param name="list">The list to serialize.</param>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.SerializeListToFile(System.Collections.Generic.List{`0},System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Serializes the list to file.
            </summary>
            <param name="list">The list to serialize.</param>
            <param name="filename">The filename of the serialized list.</param>
            <param name="mode">The encryption mode.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.SerializeListToFile(System.Collections.Generic.List{`0},System.String,System.String,System.Byte[])">
            <summary>
            Serializes the list to file.
            </summary>
            <param name="list">The list to serialzed.</param>
            <param name="filename">The filename of the serialized list.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.SerializeListToBytesClear(System.Collections.Generic.List{`0})">
            <summary>
            Serializes the list to bytes clear.
            </summary>
            <param name="list">The list to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.SerializeListClear(System.Collections.Generic.List{`0})">
            <summary>
            Serializes the list clear.
            </summary>
            <param name="list">The list to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.DeserializeListFromFile(System.String)">
            <summary>
            Deserializes the list from file.
            </summary>
            <param name="filename">The filename of the serialized list.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.DeserializeListFromFile(System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Deserializes the list from file.
            </summary>
            <param name="filename">The filename of the serialized list.</param>
            <param name="mode">The encryption mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.DeserializeListFromFile(System.String,System.String,System.Byte[])">
            <summary>
            Deserializes the list from file.
            </summary>
            <param name="filename">The filename of the serialized list.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerJson`1.DeserializeListClear(System.String)">
            <summary>
            Deserializes the list clear.
            </summary>
            <param name="value">The serialized list value.</param>
            <returns></returns>
        </member>
        <member name="T:MonoCross.Utilities.Serialization.SerializerOdata`1">
            <summary>
            The JSON serializer utility.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MonoCross.Utilities.Serialization.SerializerOdata`1.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.SerializeObjectToFile(`0,System.String)">
            <summary>
            Serializes the object to file.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="filename">The filename for the serialized object.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.SerializeObjectToFile(`0,System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Serializes the object to file.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="filename">The filename of the serialized object.</param>
            <param name="mode">The encryption mode for the serialization.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.SerializeObjectToFile(`0,System.String,System.String,System.Byte[])">
            <summary>
            Serializes the object to file.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="filename">The filename of the serialized object.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.SerializeObjectClear(`0)">
            <summary>
            Serializes the object clear.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.SerializeObjectToBytesClear(`0)">
            <summary>
            Serializes the object to bytes clear.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.DeserializeObjectFromFile(System.String)">
            <summary>
            Deserializes the object from file.
            </summary>
            <param name="filename">The filename.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.DeserializeObjectFromFile(System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Deserializes the object from file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="mode">The encryption mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.DeserializeObjectFromFile(System.String,System.String,System.Byte[])">
            <summary>
            Deserializes the object from file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="key">The encrtyption key.</param>
            <param name="salt">The enctryption salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.DeserializeObjectClear(System.String)">
            <summary>
            Deserializes the object clear.
            </summary>
            <param name="value">The serialized object value.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.SerializeListToFile(System.Collections.Generic.List{`0},System.String)">
            <summary>
            Serializes the list to file.
            </summary>
            <param name="list">The list to serialize.</param>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.SerializeListToFile(System.Collections.Generic.List{`0},System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Serializes the list to file.
            </summary>
            <param name="list">The list to serialize.</param>
            <param name="filename">The filename of the serialized list.</param>
            <param name="mode">The encryption mode.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.SerializeListToFile(System.Collections.Generic.List{`0},System.String,System.String,System.Byte[])">
            <summary>
            Serializes the list to file.
            </summary>
            <param name="list">The list to serialzed.</param>
            <param name="filename">The filename of the serialized list.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.SerializeListToBytesClear(System.Collections.Generic.List{`0})">
            <summary>
            Serializes the list to bytes clear.
            </summary>
            <param name="list">The list to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.SerializeListClear(System.Collections.Generic.List{`0})">
            <summary>
            Serializes the list clear.
            </summary>
            <param name="list">The list to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.DeserializeListFromFile(System.String)">
            <summary>
            Deserializes the list from file.
            </summary>
            <param name="filename">The filename of the serialized list.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.DeserializeListFromFile(System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Deserializes the list from file.
            </summary>
            <param name="filename">The filename of the serialized list.</param>
            <param name="mode">The encryption mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.DeserializeListFromFile(System.String,System.String,System.Byte[])">
            <summary>
            Deserializes the list from file.
            </summary>
            <param name="filename">The filename of the serialized list.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.DeserializeListClear(System.String)">
            <summary>
            Deserializes the list clear.
            </summary>
            <param name="value">The serialized list value.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.ToJson(`0)">
            <summary>
            Serializes the specified object into a JSON string.
            </summary>
            <param name="model">The <typeparamref name="T"/> to serialize.</param>
            <returns>A JSON <see cref="T:System.String"/> that contains the serialized <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.FromJson(System.String)">
            <summary>
            Deserializes an object from the specified JSON string.
            </summary>
            <param name="json">A JSON <see cref="T:System.String"/> that contains the serialized object.</param>
            <returns>The deserialized <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.ListToJson(System.Collections.Generic.List{`0},System.String)">
            <summary>
            Serializes the specified list into a JSON string.
            </summary>
            <param name="model">The <see cref="T:System.Collections.Generic.List`1"/> to serialize.</param>
            <param name="meta">The ODATA metadata string to include in the serialized object.</param>
            <returns>A JSON <see cref="T:System.String"/> that contains the serialized list.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerOdata`1.ListFromJson(System.String)">
            <summary>
            Deserializes a list from the specified JSON string.
            </summary>
            <param name="json">A JSON <see cref="T:System.String"/> that contains the serialized list.</param>
            <returns>The deserialized <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="T:MonoCross.Utilities.Serialization.SerializerXml`1">
            <summary>
            The XML serializer utility.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Utilities.Serialization.SerializerXml`1"/> class.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Utilities.Serialization.SerializerXml`1"/> class.
            </summary>
            <param name="auxTypes">The aux types.</param>
        </member>
        <member name="P:MonoCross.Utilities.Serialization.SerializerXml`1.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.SerializeObjectToFile(`0,System.String)">
            <summary>
            Serializes the object to file.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="filename">The filename of the serialized object.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.SerializeObjectToFile(`0,System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Serializes the object to file.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="filename">The filename of the serialized object.</param>
            <param name="mode">The encryption mode of the serialization.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.SerializeObjectToFile(`0,System.String,System.String,System.Byte[])">
            <summary>
            Serializes the object to file.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="filename">The filename of the serialized object.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.SerializeObjectToBytesClear(`0)">
            <summary>
            Serializes the object to bytes clear.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.SerializeObjectClear(`0)">
            <summary>
            Serializes the object clear.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.DeserializeObjectFromFile(System.String)">
            <summary>
            Deserializes the object from file.
            </summary>
            <param name="filename">The filename.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.DeserializeObjectFromFile(System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Deserializes the object from file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="mode">The encryption mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.DeserializeObjectFromFile(System.String,System.String,System.Byte[])">
            <summary>
            Deserializes the object from file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The enryption salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.DeserializeObjectClear(System.String)">
            <summary>
            Deserializes the object clear.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.SerializeListToFile(System.Collections.Generic.List{`0},System.String)">
            <summary>
            Serializes the list to file.
            </summary>
            <param name="list">The list to serialize.</param>
            <param name="filename">The filename of the serialized list.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.SerializeListToFile(System.Collections.Generic.List{`0},System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Serializes the list to file.
            </summary>
            <param name="list">The list to serialize.</param>
            <param name="filename">The filename of the serialized list.</param>
            <param name="mode">The encryption mode.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.SerializeListToFile(System.Collections.Generic.List{`0},System.String,System.String,System.Byte[])">
            <summary>
            Serializes the list to file.
            </summary>
            <param name="list">The list to serialize.</param>
            <param name="filename">The filename of the serialized list.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.SerializeListToBytesClear(System.Collections.Generic.List{`0})">
            <summary>
            Serializes the list to bytes clear.
            </summary>
            <param name="list">The list to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.SerializeListClear(System.Collections.Generic.List{`0})">
            <summary>
            Serializes the list clear.
            </summary>
            <param name="list">The list to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.DeserializeListFromFile(System.String)">
            <summary>
            Deserializes the list from file.
            </summary>
            <param name="filename">The filename of the serialized list.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.DeserializeListFromFile(System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Deserializes the list from file.
            </summary>
            <param name="filename">The filename of the serialized list.</param>
            <param name="mode">The encryption mode.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.DeserializeListFromFile(System.String,System.String,System.Byte[])">
            <summary>
            Deserializes the list from file.
            </summary>
            <param name="filename">The filename of the serialized list.</param>
            <param name="key">The encryption key.</param>
            <param name="salt">The encryption salt.</param>
            <returns></returns>
        </member>
        <member name="M:MonoCross.Utilities.Serialization.SerializerXml`1.DeserializeListClear(System.String)">
            <summary>
            Deserializes the list clear.
            </summary>
            <param name="value">The serialized list value.</param>
            <returns></returns>
        </member>
        <member name="T:MonoCross.Utilities.Compatibility.Directory">
            <summary>
            Static helper class for working with directories.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Compatibility.Directory.Exists(System.String)">
            <summary>
            Returns a value indicating whether or not the specified directory exists.
            </summary>
            <param name="directoryName">The directory to check for.</param>
            <returns><c>true</c> if the specified directory exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Compatibility.Directory.CreateDirectory(System.String)">
            <summary>
            Creates a directory with the specified name.
            </summary>
            <param name="directoryName">The name of the directory to create.</param>
        </member>
        <member name="M:MonoCross.Utilities.Compatibility.Directory.GetFiles(System.String)">
            <summary>
            Returns the names of the files that are inside of the specified directory.
            </summary>
            <param name="directoryName">The directory to get the files of.</param>
        </member>
        <member name="M:MonoCross.Utilities.Compatibility.Directory.GetDirectories(System.String)">
            <summary>
            Returns the names of subdirectories within the specified directory.
            </summary>
            <param name="directoryName">The directory to get the subdirectories of.</param>
        </member>
        <member name="T:MonoCross.Utilities.Compatibility.File">
            <summary>
            Static helper class for working with files.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Compatibility.File.Exists(System.String)">
            <summary>
            Returns a value indicating whether or not the specified file exists.
            </summary>
            <param name="filename">The file to check for.</param>
            <returns><c>true</c> if the specified file exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Compatibility.File.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="filename">The file to delete.</param>
        </member>
        <member name="M:MonoCross.Utilities.Compatibility.File.Move(System.String,System.String)">
            <summary>
            Moves the specified file to the specified destination.
            </summary>
            <param name="sourcefilename">The file to move.</param>
            <param name="destinationfilename">The destination of the file being moved.</param>
        </member>
        <member name="M:MonoCross.Utilities.Compatibility.File.OpenRead(System.String)">
            <summary>
            Opens the specified file as a read-only <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="T:MonoCross.Utilities.Compatibility.Path">
            <summary>
            Static helper class for working with paths.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Compatibility.Path.Combine(System.String[])">
            <summary>
            Combines the specified strings into a path.
            </summary>
            <param name="paths">The parts of the path to combine.</param>
            <returns>The fully combined path.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Compatibility.Path.GetDirectoryName(System.String)">
            <summary>
            Returns the name of the directory that contains the specified file.
            </summary>
            <param name="filename">The file to get the directory of.</param>
        </member>
        <member name="M:MonoCross.Utilities.Compatibility.Path.GetFileName(System.String)">
            <summary>
            Returns the name of the file.
            </summary>
            <param name="filename">The file to get the name of.</param>
        </member>
        <member name="M:MonoCross.Utilities.Compatibility.Path.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the name of the file.
            </summary>
            <param name="filename">The file to get the name of.</param>
        </member>
        <member name="P:MonoCross.Utilities.Compatibility.Path.DirectorySeparatorChar">
            <summary>
            Gets the directory separator character for the platform.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Compatibility.Path.GetFullPath(System.String)">
            <summary>
            Gets the full path of a filename.
            </summary>
            <param name="filename">The name of the file to create a whole path.</param>
            <returns>The full path of the file.</returns>
            <remarks>
            If the file does not exist, the path is assumed to resolve to <see cref="P:MonoCross.Utilities.Device.SessionDataPath"/>.<br/>
            If the file exists in the <see cref="P:MonoCross.Utilities.Device.DataPath"/> or <see cref="P:MonoCross.Utilities.Device.ApplicationPath"/>, the
            appropriate base path will be prepended.<br/>
            Fully-qualified paths will be returned as-is.
            </remarks>
        </member>
        <member name="T:MonoCross.Utilities.Storage.IFile">
             <summary>
            Defines the MonoCross abstract file system utility. 
             </summary>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Read(System.String)">
            <summary>
            Reads the specified file and returns its contents as a byte array.
            </summary>
            <param name="filename">The file to read.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Read(System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Reads the specified file and returns its contents as a byte array.
            </summary>
            <param name="filename">The file to read.</param>
            <param name="mode">The encryption mode to use when reading the file.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Read(System.String,System.String,System.Byte[])">
            <summary>
            Reads the specified file and returns its contents as a byte array.
            </summary>
            <param name="filename">The file to read.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.ReadString(System.String)">
            <summary>
            Reads the specified file and returns its contents as a string.
            </summary>
            <param name="filename">The file to read.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.ReadString(System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Reads the specified file and returns its contents as a string.
            </summary>
            <param name="filename">The file to read.</param>
            <param name="mode">The encryption mode to use when reading the file.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.ReadString(System.String,System.String,System.Byte[])">
            <summary>
            Reads the specified file and returns its contents as a string.
            </summary>
            <param name="filename">The file to read.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Save(System.String,System.String)">
            <summary>
            Writes the specified contents to the specified file.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The contents to write to the file.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Save(System.String,System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Writes the specified contents to the specified file.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The contents to write to the file.</param>
            <param name="mode">The encryption mode to use when writing to the file.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Save(System.String,System.String,System.String,System.Byte[])">
            <summary>
            Writes the specified contents to the specified file.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The contents to write to the file.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Save(System.String,System.IO.Stream)">
            <summary>
            Writes the contents of the specified stream to the specified file.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The stream containing the contents to write to the file.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Save(System.String,System.IO.Stream,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Writes the contents of the specified stream to the specified file.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The stream containing the contents to write to the file.</param>
            <param name="mode">The encryption mode to use when writing to the file.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Save(System.String,System.IO.Stream,System.String,System.Byte[])">
            <summary>
            Writes the contents of the specified stream to the specified file.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The stream containing the contents to write to the file.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Save(System.String,System.Byte[])">
            <summary>
            Writes the contents of the specified byte array to the specified file.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The byte array containing the contents to write to the file.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Save(System.String,System.Byte[],MonoCross.Utilities.EncryptionMode)">
            <summary>
            Writes the contents of the specified byte array to the specified file.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The byte array containing the contents to write to the file.</param>
            <param name="mode">The encryption mode to use when writing to the file.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Save(System.String,System.Byte[],System.String,System.Byte[])">
            <summary>
            Writes the contents of the specified byte array to the specified file.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The byte array containing the contents to write to the file.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="filename">The file to delete.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Exists(System.String)">
            <summary>
            Returns a value indicating whether or not the specified file exists.
            </summary>
            <param name="filename">The file to check for.</param>
            <returns><c>true</c> if the specified file exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Move(System.String,System.String)">
            <summary>
            Moves the specified file to the specified destination.
            </summary>
            <param name="sourcefilename">The file to move.</param>
            <param name="destinationfilename">The destination of the file being moved.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Copy(System.String,System.String)">
            <summary>
            Copies the specified file to the specified destination.
            </summary>
            <param name="sourcefilename">The file to copy.</param>
            <param name="destinationfilename">The destination of the file being copied.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.Length(System.String)">
            <summary>
            Returns the character length of the specified file.
            </summary>
            <param name="filename">The file to get the length of.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.CreateDirectory(System.String)">
            <summary>
            Creates a directory with the specified name.
            </summary>
            <param name="directoryName">The name of the directory to create.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.DeleteDirectory(System.String)">
            <summary>
            Deletes the specified directory.
            </summary>
            <param name="directoryName">The directory to delete.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and optionally deletes all files and subdirectories within the directory.
            </summary>
            <param name='directoryName'>The directory to delete.</param>
            <param name='recursive'>Whether to delete all files and subdirectories within the directory.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.MoveDirectory(System.String,System.String)">
            <summary>
            Moves the specified directory to the specified destination.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The destination of the directory being moved.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.CopyDirectory(System.String,System.String)">
            <summary>
            Copies the specified directory to the specified destination.
            </summary>
            <param name="sourceDirectoryName">The directory to copy.</param>
            <param name="destinationDirectoryName">The destination of the directory being copied.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copies the specified directory to the specified destination.
            </summary>
            <param name="sourceDirectoryName">The directory to copy.</param>
            <param name="destinationDirectoryName">The destination of the directory being copied.</param>
            <param name="overwriteexisting">Whether to overwrite any directory that is already at the destination.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.GetFileNames(System.String)">
            <summary>
            Returns the names of the files that are inside of the specified directory.
            </summary>
            <param name="directoryName">The directory to get the files of.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.GetDirectoryNames(System.String)">
            <summary>
            Returns the names of subdirectories within the specified directory.
            </summary>
            <param name="directoryName">The directory to get the subdirectories of.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.DirectoryName(System.String)">
            <summary>
            Returns the name of the directory that contains the specified file.
            </summary>
            <param name="filename">The file to get the directory of.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.EnsureDirectoryExists(System.String)">
            <summary>
            Ensures that all directories in the specified path exist.
            </summary>
            <param name='filename'>The full path of the file or directory to check.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.IFile.EnsureDirectoryExistsForFile(System.String)">
            <summary>
            Ensures that all directories in the specified path exist.
            </summary>
            <param name='filename'>The full path of the file or directory to check.</param>
        </member>
        <member name="T:MonoCross.Utilities.Storage.NullFile">
            <summary>
            Represents a file system utility with no implementation.  This is compatible with all platforms and targets, and it is useful
            for when a concrete class is required but no implementation is necessary.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Read(System.String)">
            <summary>
            Reads the specified file and returns its contents as a byte array.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to read.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.ReadString(System.String)">
            <summary>
            Reads the specified file and returns its contents as a string.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to read.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Delete(System.String)">
            <summary>
            Deletes the specified file.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to delete.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Length(System.String)">
            <summary>
            Returns the character length of the specified file.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to get the length of.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Move(System.String,System.String)">
            <summary>
            Moves the specified file to the specified destination.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="sourcefilename">The file to move.</param>
            <param name="destinationfilename">The destination of the file being moved.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Copy(System.String,System.String)">
            <summary>
            Copies the specified file to the specified destination.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="sourcefilename">The file to copy.</param>
            <param name="destinationfilename">The destination of the file being copied.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.CreateDirectory(System.String)">
            <summary>
            Creates a directory with the specified name.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="directoryName">The name of the directory to create.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.DeleteDirectory(System.String)">
            <summary>
            Deletes the specified directory.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="directoryName">The directory to delete.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and optionally deletes all subdirectories within the directory.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name='directoryName'>The directory to delete.</param>
            <param name='recursive'>Whether to delete all subdirectories within the directory.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.MoveDirectory(System.String,System.String)">
            <summary>
            Moves the specified directory to the specified destination.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The destination of the directory being moved.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.CopyDirectory(System.String,System.String)">
            <summary>
            Copies the specified directory to the specified destination.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="sourceDirectoryName">The directory to copy.</param>
            <param name="destinationDirectoryName">The destination of the directory being copied.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copies the specified directory to the specified destination.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="sourceDirectoryName">The directory to copy.</param>
            <param name="destinationDirectoryName">The destination of the directory being copied.</param>
            <param name="overwriteexisting">Whether to overwrite any directory that is already at the destination.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.GetFileNames(System.String)">
            <summary>
            Returns the names of the files that are inside of the specified directory.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="directoryName">The directory to get the files of.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.GetDirectoryNames(System.String)">
            <summary>
            Returns the names of subdirectories within the specified directory.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="directoryName">The directory to get the subdirectories of.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Exists(System.String)">
            <summary>
            Returns a value indicating whether or not the specified file exists.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to check for.</param>
            <returns><c>true</c> if the specified file exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.DirectoryName(System.String)">
            <summary>
            Returns the name of the directory that contains the specified file.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to get the directory of.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.EnsureDirectoryExists(System.String)">
            <summary>
            Ensures that all directories in the specified path exist.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name='filename'>The full path of the file or directory to check.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.EnsureDirectoryExistsForFile(System.String)">
            <summary>
            Ensures that all directories in the specified path exist.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name='filename'>The full path of the file or directory to check.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Save(System.String,System.String)">
            <summary>
            Writes the specified contents to the specified file.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The contents to write to the file.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Save(System.String,System.IO.Stream)">
            <summary>
            Writes the contents of the specified stream to the specified file.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The stream containing the contents to write to the file.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Save(System.String,System.Byte[])">
            <summary>
            Writes the contents of the specified byte array to the specified file.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The byte array containing the contents to write to the file.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Read(System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Reads the specified file and returns its contents as a byte array.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to read.</param>
            <param name="mode">The encryption mode to use when reading the file.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Read(System.String,System.String,System.Byte[])">
            <summary>
            Reads the specified file and returns its contents as a byte array.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to read.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.ReadString(System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Reads the specified file and returns its contents as a string.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to read.</param>
            <param name="mode">The encryption mode to use when reading the file.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.ReadString(System.String,System.String,System.Byte[])">
            <summary>
            Reads the specified file and returns its contents as a string.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to read.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Save(System.String,System.String,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Writes the specified contents to the specified file.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The contents to write to the file.</param>
            <param name="mode">The encryption mode to use when writing to the file.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Save(System.String,System.String,System.String,System.Byte[])">
            <summary>
            Writes the specified contents to the specified file.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The contents to write to the file.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Save(System.String,System.IO.Stream,MonoCross.Utilities.EncryptionMode)">
            <summary>
            Writes the contents of the specified stream to the specified file.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The stream containing the contents to write to the file.</param>
            <param name="mode">The encryption mode to use when writing to the file.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Save(System.String,System.IO.Stream,System.String,System.Byte[])">
            <summary>
            Writes the contents of the specified stream to the specified file.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The stream containing the contents to write to the file.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Save(System.String,System.Byte[],MonoCross.Utilities.EncryptionMode)">
            <summary>
            Writes the contents of the specified byte array to the specified file.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The byte array containing the contents to write to the file.</param>
            <param name="mode">The encryption mode to use when writing to the file.</param>
        </member>
        <member name="M:MonoCross.Utilities.Storage.NullFile.Save(System.String,System.Byte[],System.String,System.Byte[])">
            <summary>
            Writes the contents of the specified byte array to the specified file.
            Note that this does not actually do anything in a <see cref="T:MonoCross.Utilities.Storage.NullFile"/> instance.
            </summary>
            <param name="filename">The file to write the contents to.</param>
            <param name="contents">The byte array containing the contents to write to the file.</param>
            <param name="key">The keyword to derive the encryption key from.</param>
            <param name="salt">The key salt to derive the encryption key from.</param>
        </member>
        <member name="T:MonoCross.Utilities.Threading.ThreadDelegate">
            <summary>
            Represents the method that will be invoked on a new thread.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.Threading.ParameterDelegate">
            <summary>
            Represents the method that will be invoked on a new thread with a parameter.
            </summary>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="T:MonoCross.Utilities.Threading.ParameterizedThreadStart">
            <summary>
            Represents the method that will be invoked on a new thread with a parameter.
            </summary>
            <param name="obj">The method parameter.</param>
        </member>
        <member name="T:MonoCross.Utilities.Threading.IThread">
            <summary>
            Defines an abstract threading utility.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Threading.IThread.Start(MonoCross.Utilities.Threading.ThreadDelegate)">
            <summary>
            Starts a new thread invoking the specified method.
            </summary>
            <param name="method">The method to invoke.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.IThread.Start(MonoCross.Utilities.Threading.ParameterDelegate,System.Object)">
            <summary>
            Starts a new thread invoking the specified method with the parameter provided.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.IThread.QueueWorker(MonoCross.Utilities.Threading.ParameterDelegate)">
            <summary>
            Queues a new worker thread invoking the specified method.
            </summary>
            <param name="method">The method to invoke.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.IThread.QueueWorker(MonoCross.Utilities.Threading.ParameterDelegate,System.Object)">
            <summary>
            Queues a new worker thread invoking the specified method with the parameter provided.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.IThread.QueueIdle(MonoCross.Utilities.Threading.ParameterizedThreadStart)">
            <summary>
            Queues a new worker thread invoking the specified method.
            </summary>
            <param name="method">The method to invoke.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.IThread.QueueIdle(MonoCross.Utilities.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a new worker thread invoking the specified method with the parameter provided.
            </summary>
            <param name="method">The method to invoke..</param>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.IThread.DiscardIdleThread">
            <summary>
            Discards any idle thread.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Threading.IThread.IdleQueueEnabled">
            <summary>
            Gets or sets a value indicating whether the idle queue is enabled.
            </summary>
            <value><c>true</c> if the idle queue is enabled; otherwise <c>false</c>.</value>
        </member>
        <member name="M:MonoCross.Utilities.Threading.IThread.ExecuteOnMainThread(System.Delegate)">
            <summary>
            Invokes the specified method on the main thread.
            </summary>
            <param name="method">The method to invoke.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.IThread.ExecuteOnMainThread(System.Delegate,System.Object)">
            <summary>
            Invokes the specified method on the main thread with the parameter provided.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.IThread.ExecuteOnMainThread(System.Action)">
            <summary>
            Invokes the specified method on the main thread with the parameter provided.
            </summary>
            <param name="action">The method to invoke.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.IThread.ExecuteOnMainThread(System.Action{System.Object},System.Object)">
            <summary>
            Invokes the specified method on the main thread with the parameter provided.
            </summary>
            <param name="action">The method to invoke.</param>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="T:MonoCross.Utilities.Threading.IdleQueueDelegateCall">
            <summary>
            Represents a method sitting in the idle queue and waiting to be invoked.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Threading.IdleQueueDelegateCall.Delegate">
            <summary>
            Gets or sets the method to invoke when no longer idle.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Threading.IdleQueueDelegateCall.Item">
            <summary>
            Gets or sets the parameter for the method.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.Threading.IdleThreadQueue">
            <summary>
            Queues and executes <see cref="T:MonoCross.Utilities.Threading.IdleQueueDelegateCall"/>s.
            </summary>
        </member>
        <member name="F:MonoCross.Utilities.Threading.IdleThreadQueue.MAXTHREADS">
            <summary>
            The maximum number of threads.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Threading.IdleThreadQueue.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The IdleThreadQueue instance.</value>
        </member>
        <member name="P:MonoCross.Utilities.Threading.IdleThreadQueue.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoCross.Utilities.Threading.IdleThreadQueue"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MonoCross.Utilities.Threading.IdleThreadQueue.ThreadCountSafeRead">
            <summary>
            Gets the number of active threads, in a thread-safe manner.
            </summary>
            <value>A counter to make sure all threads are started and
            blocked before any are released. An int is used to 
            remain WinCE compatible, which prevents use of the 
            64-bit Interlocked methods.</value>
        </member>
        <member name="M:MonoCross.Utilities.Threading.IdleThreadQueue.Enqueue(MonoCross.Utilities.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Enqueues the specified idle queue delegate.
            </summary>
            <param name="idleQueueDelegate">The idle queue delegate.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:MonoCross.Utilities.Threading.MockThread">
            <summary>
            Represents a threading utility for platforms that do not support threading.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Threading.MockThread.Start(MonoCross.Utilities.Threading.ThreadDelegate)">
            <summary>
            Starts a new thread invoking the specified method.
            </summary>
            <param name="method">The method to invoke.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.MockThread.Start(MonoCross.Utilities.Threading.ParameterDelegate,System.Object)">
            <summary>
            Starts a new thread invoking the specified method with the parameter provided.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.MockThread.QueueWorker(MonoCross.Utilities.Threading.ParameterDelegate)">
            <summary>
            Queues a new worker thread invoking the specified method.
            </summary>
            <param name="method">The method to invoke.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.MockThread.QueueWorker(MonoCross.Utilities.Threading.ParameterDelegate,System.Object)">
            <summary>
            Queues a new worker thread invoking the specified method with the parameter provided.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.MockThread.QueueIdle(MonoCross.Utilities.Threading.ParameterizedThreadStart)">
            <summary>
            Queues a new worker thread invoking the specified method.
            </summary>
            <param name="method">The method to invoke.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.MockThread.QueueIdle(MonoCross.Utilities.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a new worker thread invoking the specified method with the parameter provided.
            </summary>
            <param name="method">The method to invoke..</param>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.MockThread.DiscardIdleThread">
            <summary>
            Discards any idle thread.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Threading.MockThread.IdleQueueEnabled">
            <summary>
            Gets or sets a value indicating whether the idle queue is enabled.
            </summary>
            <value><c>true</c> if the idle queue is enabled; otherwise <c>false</c>.</value>
        </member>
        <member name="M:MonoCross.Utilities.Threading.MockThread.ExecuteOnMainThread(System.Delegate)">
            <summary>
            Invokes the specified method on the main thread.
            </summary>
            <param name="method">The method to invoke.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.MockThread.ExecuteOnMainThread(System.Delegate,System.Object)">
            <summary>
            Invokes the specified method on the main thread with the parameter provided.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.MockThread.ExecuteOnMainThread(System.Action)">
            <summary>
            Invokes the specified method on the main thread with the parameter provided.
            </summary>
            <param name="action">The method to invoke.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.MockThread.ExecuteOnMainThread(System.Action{System.Object},System.Object)">
            <summary>
            Invokes the specified method on the main thread with the parameter provided.
            </summary>
            <param name="action">The method to invoke.</param>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="T:MonoCross.Utilities.Threading.NullThread">
            <summary>
            Represents a threading utility with no implementation.  This is compatible with all platforms and targets, and it is useful
            for when a concrete class is required but no implementation is necessary.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.Threading.NullThread.Start(MonoCross.Utilities.Threading.ThreadDelegate)">
            <summary>
            Starts a new thread invoking the specified method.
            </summary>
            <param name="method">The method to invoke.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.NullThread.Start(MonoCross.Utilities.Threading.ParameterDelegate,System.Object)">
            <summary>
            Starts a new thread invoking the specified method with the parameter provided.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.NullThread.QueueWorker(MonoCross.Utilities.Threading.ParameterDelegate)">
            <summary>
            Queues a new worker thread invoking the specified method.
            </summary>
            <param name="method">The method to invoke.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.NullThread.QueueWorker(MonoCross.Utilities.Threading.ParameterDelegate,System.Object)">
            <summary>
            Queues a new worker thread invoking the specified method with the parameter provided.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.NullThread.QueueIdle(MonoCross.Utilities.Threading.ParameterizedThreadStart)">
            <summary>
            Queues a new worker thread invoking the specified method.
            </summary>
            <param name="method">The method to invoke.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.NullThread.QueueIdle(MonoCross.Utilities.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a new worker thread invoking the specified method with the parameter provided.
            </summary>
            <param name="method">The method to invoke..</param>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.NullThread.DiscardIdleThread">
            <summary>
            Discards any idle thread.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Threading.NullThread.IdleQueueEnabled">
            <summary>
            Gets or sets a value indicating whether the idle queue is enabled.
            </summary>
            <value><c>true</c> if the idle queue is enabled; otherwise <c>false</c>.</value>
        </member>
        <member name="M:MonoCross.Utilities.Threading.NullThread.ExecuteOnMainThread(System.Delegate)">
            <summary>
            Invokes the specified method on the main thread.
            </summary>
            <param name="method">The method to invoke.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.NullThread.ExecuteOnMainThread(System.Delegate,System.Object)">
            <summary>
            Invokes the specified method on the main thread with the parameter provided.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.NullThread.ExecuteOnMainThread(System.Action)">
            <summary>
            Invokes the specified method on the main thread with the parameter provided.
            </summary>
            <param name="action">The method to invoke.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.NullThread.ExecuteOnMainThread(System.Action{System.Object},System.Object)">
            <summary>
            Invokes the specified method on the main thread with the parameter provided.
            </summary>
            <param name="action">The method to invoke.</param>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.TaskThread.QueueIdle(MonoCross.Utilities.Threading.ParameterizedThreadStart)">
            <summary>
            Queues a new worker thread invoking the specified method.
            </summary>
            <param name="method">The method to invoke.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.TaskThread.QueueIdle(MonoCross.Utilities.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a new worker thread invoking the specified method with the parameter provided.
            </summary>
            <param name="method">The method to invoke..</param>
            <param name="parameter">The method parameter.</param>
        </member>
        <member name="M:MonoCross.Utilities.Threading.TaskThread.DiscardIdleThread">
            <summary>
            Discards any idle thread.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.Threading.TaskThread.IdleQueueEnabled">
            <summary>
            Gets or sets a value indicating whether the idle queue is enabled.
            </summary>
            <value><c>true</c> if the idle queue is enabled; otherwise <c>false</c>.</value>
        </member>
        <member name="P:MonoCross.Utilities.Threading.TaskThread.UiSynchronizationContext">
            <summary>
            A <see cref="T:System.Threading.SynchronizationContext"/> for returning to the UI thread.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.TypeSwitch">
            <summary>
            A switch statement for Types
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.TypeSwitch.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MonoCross.Utilities.TypeSwitch"/>
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.TypeSwitch.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:MonoCross.Utilities.TypeSwitch"/>
            </summary>
            <param name="o">The object to check against cases.</param>
        </member>
        <member name="M:MonoCross.Utilities.TypeSwitch.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:MonoCross.Utilities.TypeSwitch"/>
            </summary>
            <param name="type">The type to check against cases.</param>
        </member>
        <member name="M:MonoCross.Utilities.TypeSwitch.#ctor(System.Object,System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:MonoCross.Utilities.TypeSwitch"/>
            </summary>
            <param name="o">The object to check against cases.</param>
            <param name="type">The specific type to check against cases.</param>
        </member>
        <member name="P:MonoCross.Utilities.TypeSwitch.Object">
            <summary>
            The object to check for types.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.TypeSwitch.Type">
            <summary>
            The type filter to apply.
            </summary>
        </member>
        <member name="T:MonoCross.Utilities.TypeSwitchExtensions">
            <summary>
            Provides case and default branch statements for a <see cref="T:MonoCross.Utilities.TypeSwitch"/>
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.TypeSwitchExtensions.Case``1(MonoCross.Utilities.TypeSwitch,System.Action{``0})">
            <summary>
            Adds a case label to a <see cref="T:MonoCross.Utilities.TypeSwitch"/>.
            </summary>
            <typeparam name="T">The case type.</typeparam>
            <param name="typeSwitch">The current <see cref="T:MonoCross.Utilities.TypeSwitch"/>.</param>
            <param name="a">The action to perform if <see cref="P:MonoCross.Utilities.TypeSwitch.Object"/> matches the case type.</param>
            <returns>The current TypeSwitch to be used with chaining cases.</returns>
        </member>
        <member name="M:MonoCross.Utilities.TypeSwitchExtensions.Case``1(MonoCross.Utilities.TypeSwitch,System.Action{``0},System.Boolean)">
            <summary>
            Adds a case label to a <see cref="T:MonoCross.Utilities.TypeSwitch"/>.
            </summary>
            <typeparam name="T">The case type.</typeparam>
            <param name="typeSwitch">The current <see cref="T:MonoCross.Utilities.TypeSwitch"/>.</param>
            <param name="a">The action to perform if <see cref="P:MonoCross.Utilities.TypeSwitch.Object"/> matches the case type.</param>
            <param name="fallThrough"><c>true</c> to fall-through to any following cases; otherwise <c>false</c>.</param>
            <returns>The current TypeSwitch to be used with chaining cases.</returns>
        </member>
        <member name="M:MonoCross.Utilities.TypeSwitchExtensions.Case``1(MonoCross.Utilities.TypeSwitch,System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
            Adds a case label to a <see cref="T:MonoCross.Utilities.TypeSwitch"/>.
            </summary>
            <typeparam name="T">The case type.</typeparam>
            <param name="typeSwitch">The current <see cref="T:MonoCross.Utilities.TypeSwitch"/>.</param>
            <param name="c">A filter function that returns <c>true</c> if the object should run the case; otherwise <c>false</c>.</param>
            <param name="a">The action to perform if <see cref="P:MonoCross.Utilities.TypeSwitch.Object"/> matches the case type.</param>
            <returns>The current TypeSwitch to be used with chaining cases.</returns>
        </member>
        <member name="M:MonoCross.Utilities.TypeSwitchExtensions.Case``1(MonoCross.Utilities.TypeSwitch,System.Func{``0,System.Boolean},System.Action{``0},System.Boolean)">
            <summary>
            Adds a case label to a <see cref="T:MonoCross.Utilities.TypeSwitch"/>.
            </summary>
            <typeparam name="T">The case type.</typeparam>
            <param name="typeSwitch">The current <see cref="T:MonoCross.Utilities.TypeSwitch"/>.</param>
            <param name="c">A filter function that returns <c>true</c> if the object should run the case; otherwise <c>false</c>.</param>
            <param name="a">The action to perform if <see cref="P:MonoCross.Utilities.TypeSwitch.Object"/> matches the case type.</param>
            <param name="fallThrough"><c>true</c> to fall-through to any following cases; otherwise <c>false</c>.</param>
            <returns>The current TypeSwitch to be used with chaining cases.</returns>
        </member>
        <member name="M:MonoCross.Utilities.TypeSwitchExtensions.Default(MonoCross.Utilities.TypeSwitch,System.Action{System.Object})">
            <summary>
            Adds a default label to a <see cref="T:MonoCross.Utilities.TypeSwitch"/>.
            </summary>
            <param name="typeSwitch">The current <see cref="T:MonoCross.Utilities.TypeSwitch"/>.</param>
            <param name="a">The action to perform if <see cref="P:MonoCross.Utilities.TypeSwitch.Object"/> reaches the Default case.</param>
            <returns>The current TypeSwitch to be used with chaining cases.</returns>
        </member>
        <member name="T:MonoCross.Utilities.WeakKeyDictionary`2">
            <summary>
            Represents a collection of keys and values.  The keys are weakly referenced, thereby allowing
            them to be reclaimed by the garbage collector if no other references to them exist.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="P:MonoCross.Utilities.WeakKeyDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see cref="T:WeakKeyDictionary&lt;TKey, TValue&gt;"/>.
            This number may include dead references; to get a count of live references only, call the
            <see cref="M:PurgeDeadKeys"/> method prior to calling <see cref="P:Count"/>.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.WeakKeyDictionary`2.Keys">
            <summary>
            Gets a collection containing the live keys in the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/>.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.WeakKeyDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/>.
            This may include values associated with dead keys; to get values from live keys only, call the
            <see cref="M:PurgeDeadKeys"/> method prior to calling <see cref="P:Values"/>.
            </summary>
        </member>
        <member name="P:MonoCross.Utilities.WeakKeyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value associated with the specified <paramref name="key"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the value is retrieved and the <paramref name="key"/> is not present in the dictionary.</exception>
        </member>
        <member name="M:MonoCross.Utilities.WeakKeyDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.WeakKeyDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/> class.
            </summary>
            <param name="capacity">The initial number of the elements that the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="capacity"/> is less than zero.</exception>
        </member>
        <member name="M:MonoCross.Utilities.WeakKeyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/> class.
            </summary>
            <param name="dictionary">A <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="dictionary"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MonoCross.Utilities.WeakKeyDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/> class.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of key.</param>
        </member>
        <member name="M:MonoCross.Utilities.WeakKeyDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/> class.
            </summary>
            <param name="capacity">The initial number of the elements that the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/> can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="capacity"/> is less than zero.</exception>
        </member>
        <member name="M:MonoCross.Utilities.WeakKeyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/> class.
            </summary>
            <param name="dictionary">A <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of key.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="dictionary"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MonoCross.Utilities.WeakKeyDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified <paramref name="key"/> and <paramref name="value"/> to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when an element with the same <paramref name="key"/> already exists in the dictionary.</exception>
        </member>
        <member name="M:MonoCross.Utilities.WeakKeyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/> contains the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to locate in the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/>.</param>
            <returns><c>true</c> if the key was located in the dictionary; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MonoCross.Utilities.WeakKeyDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified <paramref name="key"/> from the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><c>true</c> if the element is successfully found and removed; otherwise, <c>false</c>.
            This method returns false if the key is not found in the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MonoCross.Utilities.WeakKeyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key was found;
            otherwise, the default value for the type of the value parameter.  This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/> contains an element with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MonoCross.Utilities.WeakKeyDictionary`2.Clear">
            <summary>
            Removes all keys and values from the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/>.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.WeakKeyDictionary`2.PurgeDeadKeys">
            <summary>
            Scans the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/> for dead references and removes any that are found.
            </summary>
        </member>
        <member name="M:MonoCross.Utilities.WeakKeyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:MonoCross.Utilities.WeakKeyDictionary`2"/>.
            </summary>
        </member>
        <member name="T:MonoCross.EnumExtensions">
            <summary>
            Provides Enum methods available in .NET 4.0
            </summary>
        </member>
        <member name="M:MonoCross.EnumExtensions.HasFlag(System.Enum,System.Enum)">
            <summary>
            Check to see if a flags enumeration has a specific flag set.
            </summary>
            <param name="variable">Flags enumeration to check</param>
            <param name="value">Flag to check for</param>
            <returns></returns>
        </member>
        <member name="T:MonoCross.ImageCache">
            <summary>
            Represents an object that is responsible for caching image data within memory.
            </summary>
        </member>
        <member name="P:MonoCross.ImageCache.Capacity">
            <summary>
            Gets or sets the maximum number of images that are allowed to be cached at any given time.
            </summary>
        </member>
        <member name="P:MonoCross.ImageCache.Count">
            <summary>
            Gets the number of images that are currently cached.
            </summary>
        </member>
        <member name="M:MonoCross.ImageCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.ImageCache"/> class.
            </summary>
        </member>
        <member name="M:MonoCross.ImageCache.Add(System.String,MonoCross.IImageData)">
            <summary>
            Adds the specified image data to the cache using the specified file path as a key.
            Image data added with this method will never expire.
            </summary>
            <param name="filePath">The path to the file where the image data is stored.</param>
            <param name="imageData">The image data to be added to the cache.</param>
        </member>
        <member name="M:MonoCross.ImageCache.Add(System.String,MonoCross.IImageData,System.Nullable{System.DateTime})">
            <summary>
            Adds the specified image data to the cache using the specified file path as a key.
            </summary>
            <param name="filePath">The path to the file where the image data is stored.</param>
            <param name="imageData">The image data to be added to the cache.</param>
            <param name="expirationDate">An optional point in time at which the image data should be considered invalid and removed from the cache.
            A value of <c>null</c> means that the data should never expire.</param>
        </member>
        <member name="M:MonoCross.ImageCache.Clear">
            <summary>
            Empties the cache of all images.
            </summary>
        </member>
        <member name="M:MonoCross.ImageCache.Get(System.String)">
            <summary>
            Returns the image data associated with the specified file path.
            </summary>
            <param name="filePath">The file path of the image data to return.</param>
            <returns>The <see cref="T:MonoCross.IImageData"/> instance associated with the file path, or <c>null</c> if no instance is found.</returns>
        </member>
        <member name="M:MonoCross.ImageCache.Remove(System.String)">
            <summary>
            Removes from the cache the image data associated with the specified file path.
            </summary>
            <param name="filePath">The file path of the image data to remove.</param>
        </member>
        <member name="T:MonoCross.IExifData">
            <summary>
            Defines an object that contains Exif data for an image.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.Aperture">
            <summary>
            Gets the aperture value of the lens when the image was taken.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.ColorSpace">
            <summary>
            Gets a value indicating the color space of the image.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.DateTime">
            <summary>
            Gets the date and time when the image was last changed.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.DateTimeDigitized">
            <summary>
            Gets the date and time when the image was stored as digital data.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.DateTimeOriginal">
            <summary>
            Gets the date and time when the image was originally generated.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.DPIHeight">
            <summary>
            Gets the number of dots per inch on the Y axis.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.DPIWidth">
            <summary>
            Gets the number of dots per inch on the X axis.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.ExposureProgram">
            <summary>
            Gets the exposure program that the camera used when the image was taken.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.ExposureTime">
            <summary>
            Gets the exposure time, in seconds.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.Flash">
            <summary>
            Gets a flag value indicating the type of flash that was used.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.FNumber">
            <summary>
            Gets the F-number of the lens when the image was taken.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.FocalLength">
            <summary>
            Gets the focal length of the lens when the image was taken, in millimeters.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.Manufacturer">
            <summary>
            Gets the manufacturer of the camera that captured the image.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.Model">
            <summary>
            Gets the model of the camera that captured the image.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.Orientation">
            <summary>
            Gets a value indicating the orientation of the camera relative to the captured scene.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.PixelHeight">
            <summary>
            Gets the number of pixels on the Y axis.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.PixelWidth">
            <summary>
            Gets the number of pixels on the X axis.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.ShutterSpeed">
            <summary>
            Gets the shutter speed of the camera when the image was taken.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.XResolution">
            <summary>
            Gets the resolution of the image on the X axis.
            </summary>
        </member>
        <member name="P:MonoCross.IExifData.YResolution">
            <summary>
            Gets the resolution of the image on the Y axis.
            </summary>
        </member>
        <member name="M:MonoCross.IExifData.GetRawData">
            <summary>
            Returns a collection containing all of the available Exif data in an unformatted and unparsed form.
            </summary>
        </member>
        <member name="T:MonoCross.IImageCache">
            <summary>
            Defines an object that is responsible for caching image data within memory.
            </summary>
        </member>
        <member name="P:MonoCross.IImageCache.Capacity">
            <summary>
            Gets or sets the maximum number of images that are allowed to be cached at any given time.
            </summary>
        </member>
        <member name="P:MonoCross.IImageCache.Count">
            <summary>
            Gets the number of images that are currently cached.
            </summary>
        </member>
        <member name="M:MonoCross.IImageCache.Add(System.String,MonoCross.IImageData)">
            <summary>
            Adds the specified image data to the cache using the specified file path as a key.
            Image data added with this method will never expire.
            </summary>
            <param name="filePath">The path to the file where the image data is stored.</param>
            <param name="imageData">The image data to be added to the cache.</param>
        </member>
        <member name="M:MonoCross.IImageCache.Add(System.String,MonoCross.IImageData,System.Nullable{System.DateTime})">
            <summary>
            Adds the specified image data to the cache using the specified file path as a key.
            </summary>
            <param name="filePath">The path to the file where the image data is stored.</param>
            <param name="imageData">The image data to be added to the cache.</param>
            <param name="expirationDate">An optional point in time at which the image data should be considered invalid and removed from the cache.
            A value of <c>null</c> means that the data should never expire.</param>
        </member>
        <member name="M:MonoCross.IImageCache.Clear">
            <summary>
            Empties the cache of all images.
            </summary>
        </member>
        <member name="M:MonoCross.IImageCache.Get(System.String)">
            <summary>
            Returns the image data associated with the specified file path.
            </summary>
            <param name="filePath">The file path of the image data to return.</param>
            <returns>The <see cref="T:MonoCross.IImageData"/> instance associated with the file path, or <c>null</c> if no instance is found.</returns>
        </member>
        <member name="M:MonoCross.IImageCache.Remove(System.String)">
            <summary>
            Removes from the cache the image data associated with the specified file path.
            </summary>
            <param name="filePath">The file path of the image data to remove.</param>
        </member>
        <member name="T:MonoCross.IImageData">
            <summary>
            Defines an object that contains image data.
            </summary>
        </member>
        <member name="M:MonoCross.IImageData.GetBytes">
            <summary>
            Returns an array of bytes that represent the individual pixel values of the image.
            </summary>
        </member>
        <member name="M:MonoCross.IImageData.GetExifData">
            <summary>
            Returns an <see cref="T:MonoCross.IExifData"/> object containing any available Exif data for the image.
            </summary>
        </member>
        <member name="M:MonoCross.IImageData.Save(System.String,MonoCross.ImageFileFormat)">
            <summary>
            Saves the image data to the specified path on disk using the specified file format.
            </summary>
            <param name="filePath">The path at which to save the image data.</param>
            <param name="format">The file format in which to save the image data.</param>
        </member>
        <member name="T:MonoCross.ImageFileFormat">
            <summary>
            Describes the available file formats for image data.
            </summary>
        </member>
        <member name="F:MonoCross.ImageFileFormat.JPEG">
            <summary>
            The Joint Photographics Experts Group file format.
            </summary>
        </member>
        <member name="F:MonoCross.ImageFileFormat.PNG">
            <summary>
            The Portable Network Graphics file format.
            </summary>
        </member>
        <member name="T:MonoCross.MobilePlatform">
            <summary>
            The available platforms in the MonoCross framework.
            </summary>
        </member>
        <member name="F:MonoCross.MobilePlatform.Unknown">
            <summary>
            The platform is unknown.
            </summary>
        </member>
        <member name="F:MonoCross.MobilePlatform.Android">
            <summary>
            A Google Android device.
            </summary>
        </member>
        <member name="F:MonoCross.MobilePlatform.BlackBerry">
            <summary>
            A RIM BlackBerry device.
            </summary>
        </member>
        <member name="F:MonoCross.MobilePlatform.iPhone">
            <summary>
            An Apple iPhone or iPod Touch device.
            </summary>
        </member>
        <member name="F:MonoCross.MobilePlatform.iPad">
            <summary>
            An Apple iPad device.
            </summary>
        </member>
        <member name="F:MonoCross.MobilePlatform.WindowsMobile">
            <summary>
            A Microsoft Windows Mobile device (v. 6.1 and earlier).
            </summary>
        </member>
        <member name="F:MonoCross.MobilePlatform.WebOS">
            <summary>
            A WebOS device like the Palm Pre or Pixi.
            </summary>
        </member>
        <member name="F:MonoCross.MobilePlatform.Windows">
            <summary>
            A Microsoft Windows PC.
            </summary>
        </member>
        <member name="F:MonoCross.MobilePlatform.WindowsIE">
            <summary>
            A Microsoft Internet Explorer browser.
            </summary>
        </member>
        <member name="F:MonoCross.MobilePlatform.Silverlight">
            <summary>
            A Microsoft Silverlight browser.
            </summary>
        </member>
        <member name="F:MonoCross.MobilePlatform.WinPhone">
            <summary>
            A Microsoft Windows Phone device.
            </summary>
        </member>
        <member name="T:MonoCross.NetworkResponse">
            <summary>
            Represents the state of a network response.
            </summary>
        </member>
        <member name="P:MonoCross.NetworkResponse.Expiration">
            <summary>
            Gets or sets the expiration date and time of the request.
            </summary>
        </member>
        <member name="P:MonoCross.NetworkResponse.Downloaded">
            <summary>
            Gets or sets the date and time that the content of the request was downloaded.
            </summary>
        </member>
        <member name="P:MonoCross.NetworkResponse.AttemptToRefresh">
            <summary>
            Gets or sets the date and time of the last attempt to refresh.
            </summary>
        </member>
        <member name="P:MonoCross.NetworkResponse.StatusCode">
            <summary>
            Gets or sets the status of the response.
            </summary>
        </member>
        <member name="P:MonoCross.NetworkResponse.WebExceptionStatusCode">
            <summary>
            Gets or sets the status of the response when an exception has occurred during the request.
            </summary>
        </member>
        <member name="P:MonoCross.NetworkResponse.Message">
            <summary>
            Gets or sets the message describing the state of the response.
            </summary>
        </member>
        <member name="P:MonoCross.NetworkResponse.Exception">
            <summary>
            Gets or sets the exception that occurred during the request.
            </summary>
        </member>
        <member name="P:MonoCross.NetworkResponse.URI">
            <summary>
            Gets or sets the URI of the request.
            </summary>
        </member>
        <member name="P:MonoCross.NetworkResponse.OutputFile">
            <summary>
            Gets or sets the file to output.
            </summary>
        </member>
        <member name="P:MonoCross.NetworkResponse.ResponseString">
            <summary>
            Gets or sets the body of the response from the server as a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:MonoCross.NetworkResponse.ResponseBytes">
            <summary>
            Gets or sets the body of the response from the server as an array of <see cref="T:System.Byte"/>s.
            </summary>
        </member>
        <member name="P:MonoCross.NetworkResponse.PostObject">
            <summary>
            Gets or sets the object being posted.
            </summary>
        </member>
        <member name="P:MonoCross.NetworkResponse.Verb">
            <summary>
            Gets or sets the HTTP verb for the request.
            </summary>
        </member>
        <member name="P:MonoCross.NetworkResponse.ResponseHeaders">
            <summary>
            Gets the headers contained in the server's response.
            </summary>
            <value>The response headers.</value>
        </member>
        <member name="M:MonoCross.NetworkResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.NetworkResponse"/> class.
            </summary>
        </member>
        <member name="T:MonoCross.PlatformUtils">
            <summary>
            Represents utility methods for querying platforms.
            </summary>
        </member>
        <member name="M:MonoCross.PlatformUtils.GetMobilePlatform(System.String)">
            <summary>
            Gets a mobile platform from the HTTP request.
            </summary>
            <param name="userAgent">A <see cref="T:System.String"/> representing the HTTP request's user agent value.</param>
            <returns>A <see cref="T:MonoCross.MobilePlatform"/> value.</returns>
        </member>
        <member name="T:MonoCross.IReflector">
            <summary>
            Defines an object for reflecting on a <see cref="T:System.Type"/> in real-time.
            </summary>
        </member>
        <member name="M:MonoCross.IReflector.GetAssembly(System.Type)">
            <summary>
            Gets the assembly in which the specified <see cref="T:System.Type"/> is declared.
            </summary>
            <param name="type">The type for which to get the declaring assembly.</param>
            <returns>The <see cref="T:System.Reflection.Assembly"/> in which the specified <see cref="T:System.Type"/> is declared.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetTypes(System.Reflection.Assembly)">
            <summary>
            Gets all types for the specified <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The assembly to check.</param>
            <returns>An enumeration of <see cref="T:System.Type"/> objects in the specified <see cref="T:System.Reflection.Assembly"/>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetBaseType(System.Type)">
            <summary>
            Gets the type from which the specified <see cref="T:System.Type"/> directly inherits.
            </summary>
            <param name="type">The child type.</param>
            <returns>The <see cref="T:System.Type"/> from which the current <see cref="T:System.Type"/> directly inherits, or <c>null</c> if the current <c>Type</c> represents the <see cref="T:System.Object"/> class or an interface.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetEvent(System.Type,System.String)">
            <summary>
            Searches for the event with the specified name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The name of the event.</param>
            <returns>
            An object that represents the event with the specified name, if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:MonoCross.IReflector.GetEvents(System.Type)">
            <summary>
            Gets all events of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns>An enumeration of <see cref="T:System.Reflection.EventInfo"/> objects representing all events of the specified <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetField(System.Type,System.String)">
            <summary>
            Searches for the field with the specified name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The name of the field.</param>
            <returns>
            An object that represents the field with the specified name, if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:MonoCross.IReflector.GetFields(System.Type)">
            <summary>
            Gets all fields of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns>An enumeration of <see cref="T:System.Reflection.FieldInfo"/> objects representing all fields of the specified <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetMembers(System.Type)">
            <summary>
            Gets all members of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns>An enumeration of <see cref="T:System.Reflection.MemberInfo"/> objects representing all members of the specified <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetMethod(System.Type,System.String)">
            <summary>
            Searches for the method with the specified name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The name of the method.</param>
            <returns>An object that represents the method with the specified name, if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            Searches for the method with the specified name and parameter types.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The name of the method.</param>
            <param name="parameterTypes">The types of the parameters in the order in which they appear in the method signature.</param>
            <returns>An object that represents the method with the specified name and parameter types, if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetMethods(System.Type)">
            <summary>
            Gets all methods of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns>An enumeration of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods of the specified <see cref="T:System.Type" />.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetInterface(System.Type,System.String,System.Boolean)">
            <summary>
            Searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The string containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
            <param name="ignoreCase"><c>true</c> to ignore the case of that part of name that specifies the simple interface name (the part that specifies the namespace must be correctly cased); otherwise <c>false</c> to perform a case-sensitive search for all parts of name.</param>
            <returns>An object representing the interface with the specified name, implemented or inherited by <paramref name="type"/>, if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetInterfaces(System.Type)">
            <summary>
            Gets all the interfaces implemented or inherited by the specified Type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>An enumeration of Type objects representing all the interfaces implemented or inherited by the specified <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetProperty(System.Type,System.String)">
            <summary>
            Searches for the property with the specified name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The name of the property.</param>
            <returns>An object representing the property with the specified name, if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetProperties(System.Type)">
            <summary>
            Gets all properties of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns>An enumeration of <see cref="T:System.Reflection.PropertyInfo"/> objects representing all properties of the specified <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetCustomAttribute``1(System.Type,System.Boolean)">
            <summary>
            Gets the first instance of a custom attribute applied to the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="type">The type to check.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="type"/>'s inheritance chain to find the attribute; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>The first attribute found that is assignable to <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes applied to the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to check.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="type"/>'s inheritance chain to find the attributes; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>An enumeration of custom attributes applied to the <paramref name="type"/>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetCustomAttributes(System.Type,System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes applied to the specified <see cref="T:System.Type"/> and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to check.</param>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="type"/>'s inheritance chain to find the attributes; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>An enumeration of custom attributes applied to the <paramref name="type"/>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the first instance of a custom attribute applied to the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="member">The type to check.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="member"/>'s inheritance chain to find the attribute; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>The first attribute found that is assignable to <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the custom attributes applied to the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="member">The type to check.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="member"/>'s inheritance chain to find the attributes; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>An enumeration of custom attributes applied to the <paramref name="member"/>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes applied to the specified <see cref="T:System.Type"/> and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="member">The type to check.</param>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="member"/>'s inheritance chain to find the attributes; otherwise <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>An enumeration of custom attributes applied to the <paramref name="member"/>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.HasAttribute(System.Type,System.Type,System.Boolean)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> has an attribute defined.
            </summary>
            <param name="type">The type to check.</param>
            <param name="attributeType">The type of the attribute to look for.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="type"/>'s inheritance chain to find the attributes; otherwise <c>false</c>.</param>
            <returns><c>true</c> if the <see cref="T:System.Type"/> has the attribute defined; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.HasAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> has an attribute defined.
            </summary>
            <param name="member">The member to check.</param>
            <param name="attributeType">The type of the attribute to look for.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="member"/>'s inheritance chain to find the attributes; otherwise <c>false</c>.</param>
            <returns><c>true</c> if the <see cref="T:System.Type"/> has the attribute defined; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.HasInterface(System.Type,System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> implements an interface.
            </summary>
            <param name="type">The type to check.</param>
            <param name="interfaceType">The type of the interface to look for.</param>
            <returns><c>true</c> if the <see cref="T:System.Type"/> implements the interface; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.IsAbstract(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> is abstract and must be overridden.
            </summary>
            <param name="type">The type to check for abstractness.</param>
            <returns><c>true</c> if the <see cref="T:System.Type"/> is abstract; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether another type is assignable from the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="baseType">The type to be assigned.</param>
            <param name="type">The type to compare.</param>
            <returns>
            <c>true</c> if <paramref name="baseType"/> and <paramref name="type"/> represent the same type,
            or if <paramref name="baseType"/> is in the inheritance hierarchy of <paramref name="type"/>,
            or if <paramref name="baseType"/> is an interface that <paramref name="type"/> implements,
            or if <paramref name="type"/> is a generic type parameter and <paramref name="baseType"/> represents one of type's constraints,
            or if <paramref name="type"/> represents a value type and <paramref name="baseType"/> represents <see cref="T:System.Nullable`1"/>.
            <c>false</c> if none of these conditions are true, or if <paramref name="type"/> is <c>null</c>.
            </returns>
        </member>
        <member name="M:MonoCross.IReflector.IsClass(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> is a class; that is, not a value type or interface.
            </summary>
            <param name="type">The type to check for classhood.</param>
            <returns><c>true</c> if the <see cref="T:System.Type"/> is a class; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.IsEnum(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> is an enum.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if the <see cref="T:System.Type"/> is an enum; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.IsInterface(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> is interface; that is, not a class or a value type.
            </summary>
            <param name="type">The type to check as an interface.</param>
            <returns><c>true</c> if the <see cref="T:System.Type"/> is an interface; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.IsPrimitive(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> is a primitive.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if the <see cref="T:System.Type"/> is a primitive; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MonoCross.IReflector.IsSubclassOf(System.Type,System.Type)">
            <summary>
            Determines whether the class represented by the specified <see cref="T:System.Type"/> derives from the class represented by the another <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="baseType">Type of the base.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> or <paramref name="baseType"/> parameter is <c>null</c>.</exception>
            <returns>
            <c>true</c> if the <c>Type</c> represented by the <paramref name="type"/> parameter and the <c>Type</c> represented by the <paramref name="baseType"/> parameter represent classes, and <paramref name="type"/>'s class derives from <paramref name="baseType"/>; otherwise <c>false</c>.
            This method also returns <c>false</c> if <paramref name="type"/> and <paramref name="baseType"/> represent the same class.
            </returns>
        </member>
        <member name="M:MonoCross.IReflector.IsValueType(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> is a value type.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if the <see cref="T:System.Type"/> is a value type; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:MonoCross.Scanning.ScanEventDelegate">
            <summary>
            A Delegate for capturing data when a scan successfully occurs on an IScanner implementation
            </summary>
            <param name="scannedValue"></param>
        </member>
        <member name="T:MonoCross.Scanning.IScanner">
            <summary>Interface for interacting with data collection devices</summary>
        </member>
        <member name="E:MonoCross.Scanning.IScanner.ScanOccurred">
            <summary>This event occurs when a valid scan occurs</summary>
        </member>
        <member name="M:MonoCross.Scanning.IScanner.InitScanner">
            <summary>
            Initialize the scanning device</summary>
            <returns>Indicates if the device initiallized successfully</returns>
        </member>
        <member name="M:MonoCross.Scanning.IScanner.TermScanner">
            <summary>Terminate the scanning device</summary>
        </member>
        <member name="M:MonoCross.Scanning.IScanner.StartScan">
            <summary>Signal the scanning device to actively scan</summary>
        </member>
        <member name="M:MonoCross.Scanning.IScanner.StartScan(System.Boolean)">
            <summary>
            Signal the scanning device to actively scan</summary>
            <param name="triggerSoftAlways">Require hardware trigger to active scanning</param>
        </member>
        <member name="M:MonoCross.Scanning.IScanner.StopScan">
            <summary>Signal the scanning device to stop actively scanning</summary>
        </member>
        <member name="M:MonoCross.Scanning.IScanner.StopScan(MonoCross.Scanning.ScanEventDelegate)">
            <summary>
            Signal the scanning device to stop actively scanning</summary>
            <param name="scanDelegate">Delegate to unregister from the ScanOccurred event</param>
        </member>
        <member name="M:MonoCross.Scanning.IScanner.RaiseScanOccurred(System.String)">
            <summary>
            Raise the ScanOccurred event</summary>
            <param name="code">Scanned value to pass to the event</param>
        </member>
        <member name="M:MonoCross.Scanning.IScanner.NullifyScanOccurredEvent">
            <summary>Unregister all ScanEventDelegate delegates registered to the ScanOccurred Event</summary>
        </member>
        <member name="T:MonoCross.Scanning.MockScanner">
            <summary>
            An IScanner implementation for testing applications in simulators, or in unit tests
            </summary>
        </member>
        <member name="E:MonoCross.Scanning.MockScanner.ScanOccurred">
            <summary>
            This event occurs when a valid scan occurs
            </summary>
        </member>
        <member name="M:MonoCross.Scanning.MockScanner.InitScanner">
            <summary>
            Initialize the scanning device</summary>
            <returns>Indicates if the device initiallized successfully</returns>
        </member>
        <member name="M:MonoCross.Scanning.MockScanner.TermScanner">
            <summary>
            Terminate the scanning device
            </summary>
        </member>
        <member name="M:MonoCross.Scanning.MockScanner.StartScan">
            <summary>
            Signal the scanning device to actively scan
            </summary>
        </member>
        <member name="M:MonoCross.Scanning.MockScanner.StartScan(System.Boolean)">
            <summary>
            Signal the scanning device to actively scan</summary>
            <param name="triggerSoftAlways">Require hardware trigger to active scanning</param>
        </member>
        <member name="M:MonoCross.Scanning.MockScanner.StopScan">
            <summary>
            Signal the scanning device to stop actively scanning
            </summary>
        </member>
        <member name="M:MonoCross.Scanning.MockScanner.StopScan(MonoCross.Scanning.ScanEventDelegate)">
            <summary>
            Signal the scanning device to stop actively scanning</summary>
            <param name="scanDelegate">Delegate to unregister from the ScanOccurred event</param>
        </member>
        <member name="M:MonoCross.Scanning.MockScanner.NullifyScanOccurredEvent">
            <summary>
            Unregister all ScanEventDelegate delegates registered to the ScanOccurred Event
            </summary>
        </member>
        <member name="M:MonoCross.Scanning.MockScanner.#ctor">
            <summary>
            Create a MockScanner for testing applications in simulators, or in unit tests
            </summary>
        </member>
        <member name="M:MonoCross.Scanning.MockScanner.#ctor(System.Int32,System.String)">
            <summary>
            Create a MockScanner for testing applications in simulators, or in unit tests
            </summary>
            <param name="delay">
            Number of milliseconds after calling StartScan() that a simulated scan will occur
            </param>
            <param name="barcode">Barcode value the simulated scan will produce</param>
        </member>
        <member name="M:MonoCross.Scanning.MockScanner.Dispose">
            <summary>
            Clean up resources: Stop Scanning, Terminate Scanner, Nullify ScanOccurred Event handler
            </summary>
        </member>
        <member name="T:MonoCross.Scanning.Scanner">
            <summary>
            Default singleton instance for IScanner implementations
            </summary>
        </member>
        <member name="P:MonoCross.Scanning.Scanner.Instance">
            <summary>
            Singleton instance of an IScanner implementation
            </summary>
        </member>
        <member name="P:MonoCross.Scanning.Scanner.IsInitialized">
            <summary>
            Indicates whether <see cref="P:MonoCross.Scanning.Scanner.Instance"/> has been initialized using <see cref="M:MonoCross.Scanning.Scanner.Initialize(MonoCross.Scanning.IScanner)"/>
            </summary>
        </member>
        <member name="M:MonoCross.Scanning.Scanner.Initialize(MonoCross.Scanning.IScanner)">
            <summary>
            Initialize the singleton object with an instance of an IScanner implementation
            </summary>
            <param name="scanner">Instance of an IScanner implementation</param>
        </member>
        <member name="M:MonoCross.Scanning.Scanner.Initalize(MonoCross.Scanning.IScanner)">
            <summary>
            Obsolete scanner initialization method
            </summary>
            <param name="scanner">Instance of an IScanner implementation</param>
        </member>
        <member name="E:MonoCross.Scanning.Scanner.ScanOccurred">
            <summary>
            This event occurs when a valid scan occurs
            </summary>
        </member>
        <member name="M:MonoCross.Scanning.Scanner.InitScanner">
            <summary>
            Initialize the scanning device</summary>
            <returns>Indicates if the device initialized successfully</returns>
        </member>
        <member name="M:MonoCross.Scanning.Scanner.TermScanner">
            <summary>
            Terminate the scanning device
            </summary>
        </member>
        <member name="M:MonoCross.Scanning.Scanner.StartScan">
            <summary>
            Signal the scanning device to actively scan
            </summary>
        </member>
        <member name="M:MonoCross.Scanning.Scanner.StartScan(System.Boolean)">
            <summary>
            Signal the scanning device to actively scan</summary>
            <param name="triggerSoftAlways">Require hardware trigger to active scanning</param>
        </member>
        <member name="M:MonoCross.Scanning.Scanner.StopScan">
            <summary>
            Signal the scanning device to stop actively scanning
            </summary>
        </member>
        <member name="M:MonoCross.Scanning.Scanner.StopScan(MonoCross.Scanning.ScanEventDelegate)">
            <summary>
            Signal the scanning device to stop actively scanning</summary>
            <param name="scanDelegate">Delegate to unregister from the ScanOccurred event</param>
        </member>
        <member name="M:MonoCross.Scanning.Scanner.RaiseScanOccurred(System.String)">
            <summary>
            Raise the ScanOccurred event</summary>
            <param name="code">Scanned value to pass to the event</param>
        </member>
        <member name="M:MonoCross.Scanning.Scanner.NullifyScanOccurredEvent">
            <summary>
            Unregister all ScanEventDelegate delegates attached to the ScanOccurred Event
            </summary>
        </member>
        <member name="T:System.Collections.Generic.DictionaryExtensions">
            <summary>
            Provides methods for easily retrieving values from an <see cref="T:System.Collections.Generic.IDictionary`2"/> object.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Merges the contents of the given dictionary into the current dictionary, overriding any current values.
            </summary>
            <param name="current">The current dictionary.</param>
            <param name="dictionary">The dictionary to be merged.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when either dictionary is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns the value associated with the specified key,
            or returns the default value of TValue if the key was not found.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> object.</param>
            <param name="key">The key for the value to return.</param>
            <typeparam name="TKey">The 1st type parameter.</typeparam>
            <typeparam name="TValue">The 2nd type parameter.</typeparam>
            <returns>The value associated with the key -or- the default value of TValue.</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value associated with the specified key,
            or returns the specified default value if the key was not found.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> object.</param>
            <param name="key">The key for the value to return.</param>
            <param name="defaultValue">The value to return if the key was not found.</param>
            <typeparam name="TKey">The 1st type parameter.</typeparam>
            <typeparam name="TValue">The 2nd type parameter.</typeparam>
            <returns>The value associated with the key -or- the specified default value.</returns>
        </member>
        <member name="T:System.Collections.Generic.EnumerableExtensions">
            <summary>
            Provides methods for querying information from an <see cref="T:System.Collections.IEnumerable"/> object.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the index of the first element in a sequence that satisfies a specified condition.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> object.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>The index of the first element that satisfies the condition.</returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Returns the index of the first element in a sequence that satisfies a specified condition.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> object.</param>
            <param name="startIndex">The zero-based starting index of the search.  The search proceeds from the start index to the end of the sequence.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>The index of the first element that satisfies the condition.</returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the index of the last element in a sequence that satisfies a specified condition.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> object.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>The index of the last element that satisfies the condition.</returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Returns the index of the last element in a sequence that satisfies a specified condition.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> object.</param>
            <param name="startIndex">The zero-based starting index of the search.  The search proceeds from the start index to the beginning of the sequence.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>The index of the last element that satisfies the condition.</returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.Equivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Determines whether two <see cref="T:System.Collections.Generic.IEnumerable`1"/> objects have equivalent contents.
            </summary>
            <typeparam name="T">The enumerable type parameter.</typeparam>
            <param name="first">The first enumerable to check.</param>
            <param name="second">The second enumerable to check.</param>
            <param name="orderMatters"><c>true</c> to compare elements by order and contents; otherwise <c>false</c> to compare just contents</param>
            <returns><c>true</c> if the enumerables are equivalent; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:System.Collections.EnumerableExtensions">
            <summary>
            Provides methods for querying information from an <see cref="T:System.Collections.IEnumerable"/> object.
            </summary>
        </member>
        <member name="M:System.Collections.EnumerableExtensions.Any(System.Collections.IEnumerable)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IEnumerable"/> contains any elements.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> object.</param>
            <returns><c>true</c> if the <see cref="T:System.Collections.IEnumerable"/> contains any elements; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.EnumerableExtensions.Any(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
            <summary>
            Determines whether any element in the <see cref="T:System.Collections.IEnumerable"/> satisfies a condition.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> object.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns><c>true</c> if any element in the <see cref="T:System.Collections.IEnumerable"/> satisfies the condition; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.EnumerableExtensions.Count(System.Collections.IEnumerable)">
            <summary>
            Returns the number of elements contained within the <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> object.</param>
            <returns>The number of elements in the <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="M:System.Collections.EnumerableExtensions.ElementAt(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Returns the element at the specified index within the <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> object.</param>
            <param name="index">The index of the element to return.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index equals or exceeds the
            number of elements in the <see cref="T:System.Collections.IEnumerable"/> -or- when the index is less than 0.</exception>
        </member>
        <member name="M:System.Collections.EnumerableExtensions.FirstOrDefault(System.Collections.IEnumerable)">
            <summary>
            Returns the first element in the <see cref="T:System.Collections.IEnumerable"/> or <c>null</c> if there are no elements.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> object.</param>
            <returns>The first element in the <see cref="T:System.Collections.IEnumerable"/> -or- <c>null</c> if there are no elements.</returns>
        </member>
        <member name="M:System.Collections.EnumerableExtensions.FirstOrDefault(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
            <summary>
            Returns the first element in the <see cref="T:System.Collections.IEnumerable"/> that satisfies a condition or <c>null</c> if no such element is found.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> object.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>The first element in the <see cref="T:System.Collections.IEnumerable"/> that satisfies the condition -or- <c>null</c> if no such element is found.</returns>
        </member>
        <member name="M:System.Collections.EnumerableExtensions.IndexOf(System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns the index at which the specified element resides within the <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> object.</param>
            <param name="element">The element to return the index of.</param>
            <returns>The index of the element -or- -1 if the element is not found in the collection.</returns>
        </member>
        <member name="M:System.Collections.EnumerableExtensions.LastOrDefault(System.Collections.IEnumerable)">
            <summary>
            Returns the last element in the <see cref="T:System.Collections.IEnumerable"/> or <c>null</c> if there are no elements.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> object.</param>
            <returns>The last element in the <see cref="T:System.Collections.IEnumerable"/> -or- <c>null</c> if there are no elements.</returns>
        </member>
        <member name="M:System.Collections.EnumerableExtensions.LastOrDefault(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
            <summary>
            Returns the last element in the <see cref="T:System.Collections.IEnumerable"/> that satisfies a condition or <c>null</c> if no such element is found.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> object.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>The last element in the <see cref="T:System.Collections.IEnumerable"/> that satisfies the condition -or- <c>null</c> if no such element is found.</returns>
        </member>
    </members>
</doc>
